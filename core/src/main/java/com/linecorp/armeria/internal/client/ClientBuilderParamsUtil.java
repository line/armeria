/*
 * Copyright 2024 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.armeria.internal.client;

import static com.google.common.base.Preconditions.checkArgument;
import static java.util.Objects.requireNonNull;

import java.net.URI;

import com.google.common.base.Strings;

import com.linecorp.armeria.client.ClientPreprocessors;
import com.linecorp.armeria.client.Clients;
import com.linecorp.armeria.client.HttpPreprocessor;
import com.linecorp.armeria.client.Preprocessor;
import com.linecorp.armeria.common.Scheme;
import com.linecorp.armeria.common.SerializationFormat;
import com.linecorp.armeria.common.SessionProtocol;
import com.linecorp.armeria.common.annotation.Nullable;

public final class ClientBuilderParamsUtil {

    private static final String INTERNAL_PREFIX = "armeria-";
    private static final String PREPROCESSOR_PREFIX = "armeria-preprocessor-";
    public static final String ENDPOINT_GROUP_PREFIX = "armeria-group-";
    public static final String UNDEFINED_URI_AUTHORITY = "armeria-undefined:1";

    public static URI preprocessorToUri(HttpPreprocessor preprocessor, @Nullable String absolutePathRef) {
        return preprocessorToUri(Scheme.of(SerializationFormat.NONE, SessionProtocol.HTTP),
                                 preprocessor, absolutePathRef);
    }

    public static URI preprocessorToUri(Scheme scheme, ClientPreprocessors preprocessors,
                                        @Nullable String absolutePathRef) {
        return preprocessorToUri(scheme, generateHashCode(preprocessors), absolutePathRef);
    }

    public static URI preprocessorToUri(Scheme scheme, Preprocessor<?, ?> preprocessor,
                                        @Nullable String absolutePathRef) {
        return preprocessorToUri(scheme, generateHashCode(preprocessor), absolutePathRef);
    }

    private static URI preprocessorToUri(Scheme scheme, String hashCode, @Nullable String absolutePathRef) {
        final String schemeStr = scheme.shortUriText();
        final String normalizedAbsolutePathRef = nullOrEmptyToSlash(absolutePathRef);
        return URI.create(schemeStr + "://" + PREPROCESSOR_PREFIX + hashCode +
                          ":1" + normalizedAbsolutePathRef);
    }

    static String generateHashCode(Object obj) {
        return Integer.toHexString(System.identityHashCode(requireNonNull(obj, "obj")));
    }

    public static String nullOrEmptyToSlash(@Nullable String absolutePathRef) {
        if (Strings.isNullOrEmpty(absolutePathRef)) {
            return "/";
        }

        checkArgument(absolutePathRef.charAt(0) == '/',
                      "absolutePathRef: %s (must start with '/')", absolutePathRef);
        return absolutePathRef;
    }

    /**
     * Returns {@code true} if the specified {@code uri} was generated by armeria.
     */
    public static boolean isInternalUri(URI uri) {
        if (Clients.isUndefinedUri(uri)) {
            return true;
        }
        final String authority = uri.getAuthority();
        return authority != null && authority.startsWith(INTERNAL_PREFIX) && uri.getPort() == 1;
    }

    public static boolean isPreprocessorUri(URI uri) {
        final String authority = uri.getAuthority();
        return authority != null && authority.startsWith(PREPROCESSOR_PREFIX) && uri.getPort() == 1;
    }

    private ClientBuilderParamsUtil() {}
}
