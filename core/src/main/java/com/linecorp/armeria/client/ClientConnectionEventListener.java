/*
 * Copyright 2024 LY Corporation
 *
 * LY Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.armeria.client;

import java.net.InetSocketAddress;

import com.linecorp.armeria.common.ConnectionEventListener;
import com.linecorp.armeria.common.SessionProtocol;
import com.linecorp.armeria.common.annotation.Nullable;
import com.linecorp.armeria.common.annotation.UnstableApi;
import com.linecorp.armeria.common.metric.MeterIdPrefix;

import io.micrometer.core.instrument.MeterRegistry;
import io.netty.util.AttributeMap;

/**
 * Listens to the client connection events.
 *
 * <p>Connection state diagram:
 * <pre>{@code
 *  +--------------+           +--------------+        | +--------------+ |       +--------------+
 *  |              |           |              |        | |              | |       |              |
 *  |    Initial   |  ----->   |    Pending   | -----> | |    Opened    | |-----> |    Closed    |
 *  |              |           |              |        | |              | |       |              |
 *  +--------------+           +--------------+        | +--------------+ |       +--------------+
 *          |                                          |                  |
 *          |                                          |      Active      |
 *          |                                          |         ^        |
 *          v                                          |         |        |
 *   +--------------+                                  |         |        |
 *   |              |                                  |         |        |
 *   |    Failed    |                                  |         v        |
 *   |              |                                  |       Idle       |
 *   +--------------+                                  |                  |
 *                                                     +------------------+
 * }</pre>
 */
public interface ClientConnectionEventListener extends ConnectionEventListener {
    /**
     * Returns an instance that does nothing.
     */
    static ClientConnectionEventListener noop() {
        return ClientConnectionEventListenerAdapter.NOOP;
    }

    /**
     * Returns a new {@link ClientConnectionEventListener} that collects metrics into the specified
     * {@link MeterRegistry}. The returned listener will generate the following metrics:
     * <table>
     * <caption>metrics that will be generated by this class</caption>
     * <tr>
     *   <th>metric name</th>
     *   <th>description</th>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connections#count{state="opened"}}</td>
     *   <td>The number of opened connection.</td>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connections#count{state="closed"}}</td>
     *   <td>The number of closed connections.</td>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connections#count{state="failed"}}</td>
     *   <td>The number of failed connections.</td>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connection.pool.size#value{state="pending"}}</td>
     *   <td>The number of pending connection in the connection pool.</td>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connection.pool.size#value{state="active"}}</td>
     *   <td>The number of active connection in the connection pool.</td>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connection.pool.size#value{state="idle"}}</td>
     *   <td>The number of idle connection in the connection pool.</td>
     * </tr>
     * </table>
     */
    @UnstableApi
    static ClientConnectionEventListener metricCollecting(MeterRegistry registry) {
        return metricCollecting(registry, new MeterIdPrefix("armeria.client"));
    }

    /**
     * Returns a new {@link ClientConnectionEventListener} that collects metrics into the specified
     * {@link MeterRegistry} using the {@link MeterIdPrefix}.
     * The returned listener will generate the following metrics:
     * <table>
     * <caption>metrics that will be generated by this class</caption>
     * <tr>
     *   <th>metric name</th>
     *   <th>description</th>
     * </tr>
     * <tr>
     *   <td>{@code <name>.connections#count{state="opened"}}</td>
     *   <td>The number of opened connection.</td>
     * </tr>
     * <tr>
     *   <td>{@code <name>.connections#count{state="closed"}}</td>
     *   <td>The number of closed connections.</td>
     * </tr>
     * <tr>
     *   <td>{@code <name>.connections#count{state="failed"}}</td>
     *   <td>The number of failed connections.</td>
     * </tr>
     * <tr>
     *   <td>{@code <name>.connection.pool.size#value{state="pending"}}</td>
     *   <td>The number of pending connection in the connection pool.</td>
     * </tr>
     * <tr>
     *   <td>{@code <name>.connection.pool.size#value{state="active"}}</td>
     *   <td>The number of active connection in the connection pool.</td>
     * </tr>
     * <tr>
     *   <td>{@code <name>.connection.pool.size#value{state="idle"}}</td>
     *   <td>The number of idle connection in the connection pool.</td>
     * </tr>
     * </table>
     */
    @UnstableApi
    static ClientConnectionEventListener metricCollecting(MeterRegistry registry, MeterIdPrefix meterIdPrefix) {
        return new MetricCollectingClientConnectionEventListener(registry, meterIdPrefix);
    }

    /**
     * Invoked when a connection is pending.
     *
     * @param desiredProtocol the protocol that the client requested to use.
     * @param remoteAddress the remote address of the connection.
     * @param localAddress the local address of the connection.
     * @param attrs the attributes of the connection.
     */
    void connectionPending(SessionProtocol desiredProtocol,
                           InetSocketAddress remoteAddress,
                           InetSocketAddress localAddress,
                           AttributeMap attrs) throws Exception;

    /**
     * Invoked when a connection attempt fails.
     *
     * @param desiredProtocol the protocol that the client requested to use.
     * @param remoteAddress the remote address of the connection.
     * @param localAddress the local address of the connection. It will be {@code null} if the connection is
     *                     failed before entering the {@link #connectionPending(SessionProtocol,
     *                     InetSocketAddress, InetSocketAddress, AttributeMap)}}
     *                     state.
     * @param attrs the attributes of the connection.
     * @param cause the cause of the failure.
     * @param wasPending whether the connection was pending.
     *                   If {@code true}, it means the session negotiation failed after the TCP connection was
     *                   established.
     *                   If {@code false}, it means the connection attempt failed during the TCP handshake.
     */
    void connectionFailed(SessionProtocol desiredProtocol,
                          InetSocketAddress remoteAddress,
                          @Nullable InetSocketAddress localAddress,
                          AttributeMap attrs,
                          Throwable cause, boolean wasPending) throws Exception;
}
