/**
 * Autogenerated by Thrift Compiler (0.9.1-LINE)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.armeria.service.test.thrift.main;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Name implements org.apache.thrift.TBase<Name, Name._Fields>, java.io.Serializable, Cloneable, Comparable<Name> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Name");

  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MIDDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("middle", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("last", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NameTupleSchemeFactory());
  }

  public String first; // required
  public String middle; // required
  public String last; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST((short)1, "first"),
    MIDDLE((short)2, "middle"),
    LAST((short)3, "last");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST
          return FIRST;
        case 2: // MIDDLE
          return MIDDLE;
        case 3: // LAST
          return LAST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLE, new org.apache.thrift.meta_data.FieldMetaData("middle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST, new org.apache.thrift.meta_data.FieldMetaData("last", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Name.class, metaDataMap);
  }

  public Name() {
  }

  public Name(
    String first,
    String middle,
    String last)
  {
    this();
    this.first = first;
    this.middle = middle;
    this.last = last;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Name(Name other) {
    if (other.isSetFirst()) {
      this.first = other.first;
    }
    if (other.isSetMiddle()) {
      this.middle = other.middle;
    }
    if (other.isSetLast()) {
      this.last = other.last;
    }
  }

  public Name deepCopy() {
    return new Name(this);
  }

  @Override
  public void clear() {
    this.first = null;
    this.middle = null;
    this.last = null;
  }

  public String getFirst() {
    return this.first;
  }

  public Name setFirst(String first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  public String getMiddle() {
    return this.middle;
  }

  public Name setMiddle(String middle) {
    this.middle = middle;
    return this;
  }

  public void unsetMiddle() {
    this.middle = null;
  }

  /** Returns true if field middle is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddle() {
    return this.middle != null;
  }

  public void setMiddleIsSet(boolean value) {
    if (!value) {
      this.middle = null;
    }
  }

  public String getLast() {
    return this.last;
  }

  public Name setLast(String last) {
    this.last = last;
    return this;
  }

  public void unsetLast() {
    this.last = null;
  }

  /** Returns true if field last is set (has been assigned a value) and false otherwise */
  public boolean isSetLast() {
    return this.last != null;
  }

  public void setLastIsSet(boolean value) {
    if (!value) {
      this.last = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((String)value);
      }
      break;

    case MIDDLE:
      if (value == null) {
        unsetMiddle();
      } else {
        setMiddle((String)value);
      }
      break;

    case LAST:
      if (value == null) {
        unsetLast();
      } else {
        setLast((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST:
      return getFirst();

    case MIDDLE:
      return getMiddle();

    case LAST:
      return getLast();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST:
      return isSetFirst();
    case MIDDLE:
      return isSetMiddle();
    case LAST:
      return isSetLast();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Name)
      return this.equals((Name)that);
    return false;
  }

  public boolean equals(Name that) {
    if (that == null)
      return false;

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_middle = true && this.isSetMiddle();
    boolean that_present_middle = true && that.isSetMiddle();
    if (this_present_middle || that_present_middle) {
      if (!(this_present_middle && that_present_middle))
        return false;
      if (!this.middle.equals(that.middle))
        return false;
    }

    boolean this_present_last = true && this.isSetLast();
    boolean that_present_last = true && that.isSetLast();
    if (this_present_last || that_present_last) {
      if (!(this_present_last && that_present_last))
        return false;
      if (!this.last.equals(that.last))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Name other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddle()).compareTo(other.isSetMiddle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middle, other.middle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast()).compareTo(other.isSetLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last, other.last);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Name(");
    boolean first = true;

    sb.append("first:");
    if (this.first == null) {
      sb.append("null");
    } else {
      sb.append(this.first);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("middle:");
    if (this.middle == null) {
      sb.append("null");
    } else {
      sb.append(this.middle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last:");
    if (this.last == null) {
      sb.append("null");
    } else {
      sb.append(this.last);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NameStandardSchemeFactory implements SchemeFactory {
    public NameStandardScheme getScheme() {
      return new NameStandardScheme();
    }
  }

  private static class NameStandardScheme extends StandardScheme<Name> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Name struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first = iprot.readString();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIDDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middle = iprot.readString();
              struct.setMiddleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last = iprot.readString();
              struct.setLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Name struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.first != null) {
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeString(struct.first);
        oprot.writeFieldEnd();
      }
      if (struct.middle != null) {
        oprot.writeFieldBegin(MIDDLE_FIELD_DESC);
        oprot.writeString(struct.middle);
        oprot.writeFieldEnd();
      }
      if (struct.last != null) {
        oprot.writeFieldBegin(LAST_FIELD_DESC);
        oprot.writeString(struct.last);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NameTupleSchemeFactory implements SchemeFactory {
    public NameTupleScheme getScheme() {
      return new NameTupleScheme();
    }
  }

  private static class NameTupleScheme extends TupleScheme<Name> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Name struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirst()) {
        optionals.set(0);
      }
      if (struct.isSetMiddle()) {
        optionals.set(1);
      }
      if (struct.isSetLast()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFirst()) {
        oprot.writeString(struct.first);
      }
      if (struct.isSetMiddle()) {
        oprot.writeString(struct.middle);
      }
      if (struct.isSetLast()) {
        oprot.writeString(struct.last);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Name struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.first = iprot.readString();
        struct.setFirstIsSet(true);
      }
      if (incoming.get(1)) {
        struct.middle = iprot.readString();
        struct.setMiddleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.last = iprot.readString();
        struct.setLastIsSet(true);
      }
    }
  }

}

