"use strict";(self.webpackChunkarmeria_site=self.webpackChunkarmeria_site||[]).push([[8752],{77306:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return c},default:function(){return g},pageTitle:function(){return s}});var r=t(63366),n=(t(67294),t(64983)),i=t(28819),o=t(75609),l=["components"],s="ScalaPB integration",c={},p=function(e){return function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",a)}},m=p("Tip"),u=p("CodeBlock"),d={pageTitle:s,_frontmatter:c},v=i.Z;function g(e){var a=e.components,t=(0,r.Z)(e,l);return(0,n.kt)(v,Object.assign({},d,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"scalapb-integration",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h1",href:"#scalapb-integration","aria-label":"scalapb integration permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"ScalaPB integration"),(0,n.kt)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"#running-a-grpc-service"},"Running a gRPC service"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"#calling-a-grpc-service"},"Calling a gRPC service"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"#supporting-scalapb-in-annotated-services"},"Supporting ScalaPB in annotated services.")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#converting-an-http-request-to-a-scalapbs-generatedmesage"},"Converting an HTTP request to a ScalaPB's GeneratedMesage")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#returning-a-scalapbs-generatedmesage"},"Returning a ScalaPB's GeneratedMesage")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#injecting-an-executioncontext-to-an-annotated-service-method"},"Injecting an ExecutionContext to an annotated service method"))))),(0,n.kt)(m,{mdxType:"Tip"},(0,n.kt)("p",null,"Visit ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/line/armeria/tree/main/examples/grpc-scala"},"here")," to find a fully working example.")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://scalapb.github.io/"},"ScalaPB")," is a protocol buffer compiler (protoc) plugin for\n",(0,n.kt)("a",{parentName:"p",href:"https://www.scala-lang.org/"},"Scala"),". It will generate Scala case classes, parsers and serializers for\nyour ",(0,n.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers"},"protocol buffers"),".\nScalaPB also supports a thin wrapper around ",(0,n.kt)("a",{parentName:"p",href:"https://grpc.io/docs/languages/java/quickstart/"},"grpc-java"),",\nand provides you with an interface that is based on Scala's standard library\n",(0,n.kt)("a",{parentName:"p",href:"https://docs.scala-lang.org/overviews/core/futures.html"},"Future"),",\nwhile streaming is based on the Observer pattern.\nIf you integrate ScalaPB with Armeria, you can leverage the followings:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Using both ",(0,n.kt)("a",{parentName:"li",href:"https://armeria.dev/docs/server-docservice"},"gRPC server")," and\n",(0,n.kt)("a",{parentName:"li",href:"https://armeria.dev/docs/client-grpc"},"gRPC client")," features such as gRPC-over-HTTP/1 and\n",(0,n.kt)("a",{parentName:"li",href:"gRPC-Web"},"gRPC-Web")," protocol powered by Armeria"),(0,n.kt)("li",{parentName:"ul"},"Browsing the list of available RPC operations and invoking a service operation via a web console"),(0,n.kt)("li",{parentName:"ul"},"Converting either a Protocol Buffers or JSON to and from an\n",(0,n.kt)("a",{parentName:"li",href:"https://scalapb.github.io/docs/generated-code"},"scalapb.GeneratedMessage")," in annotated service")),(0,n.kt)("p",null,"First, you need the ",(0,n.kt)("inlineCode",{parentName:"p"},"armeria-scalapb_2.12")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"armeria-scalapb_2.13")," dependency to use the above features:"),(0,n.kt)(u,{language:"groovy",filename:"build.sbt",mdxType:"CodeBlock"},'\nlibraryDependencies += "com.linecorp.armeria" %% "armeria-scalapb" % "'+o["com.linecorp.armeria:armeria-bom"]+'"\n'),(0,n.kt)(m,{mdxType:"Tip"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"armeria-scalapb")," is only available for Scala 2.12.x and 2.13.x.")),(0,n.kt)("h2",{id:"running-a-grpc-service",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#running-a-grpc-service","aria-label":"running a grpc service permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Running a gRPC service"),(0,n.kt)("p",null,"You need to register a ScalaPB gRPC stub to a ",(0,n.kt)("a",{parentName:"p",href:"type://GrpcService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/grpc/GrpcService.html"},"type://GrpcService")," using a ",(0,n.kt)("a",{parentName:"p",href:"type://GrpcServiceBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.html"},"type://GrpcServiceBuilder"),"\nand add it to the ",(0,n.kt)("a",{parentName:"p",href:"type://ServerBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/ServerBuilder.html"},"type://ServerBuilder"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.linecorp.armeria.common.scalapb.ScalaPbJsonMarshaller\nimport com.linecorp.armeria.server.Server\nimport com.linecorp.armeria.server.docs.DocService\nimport com.linecorp.armeria.server.grpc.GrpcService\n\n// Creates GrpcService with your gRPC stub generated by ScalaPB.\nval grpcService =\n      GrpcService\n        .builder()\n        // Add your ScalaPB gRPC stub using `bindService()`\n        .addService(YourServiceGrpc.bindService(\n          new YourServiceImpl, ExecutionContext.global))\n        // Register `ScalaPbJsonMarshaller` for supporting gRPC JSON format.\n        .jsonMarshallerFactory(_ => ScalaPbJsonMarshaller())\n        .enableUnframedRequests(true)\n        .build()\n\n// Creates Armeria Server for ScalaPB gRPC stub.\nServer.builder()\n      .http(httpPort)\n      .https(httpsPort)\n      .service(grpcService)\n      // Add DocService for browsing the list of gRPC services and \n      // invoking a service operation from a web form.\n      // See https://armeria.dev/docs/server-docservice for more information.\n      .serviceUnder("/docs", new DocService())\n      .build()\n')),(0,n.kt)("p",null,"Please see ",(0,n.kt)("a",{parentName:"p",href:"https://armeria.dev/docs/server-grpc"},"gRPC service")," for more information."),(0,n.kt)("h2",{id:"calling-a-grpc-service",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#calling-a-grpc-service","aria-label":"calling a grpc service permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Calling a gRPC service"),(0,n.kt)("p",null,"You can also call a gRPC service using a ScalaPB gRPC client.\n",(0,n.kt)("inlineCode",{parentName:"p"},"ScalaPbJsonMarshaller")," should be registered with ",(0,n.kt)("a",{parentName:"p",href:"type://GrpcClientBuilder#jsonMarshallerFactory(Function):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/grpc/GrpcClientBuilder.html#jsonMarshallerFactory(java.util.function.Function)"},"type://GrpcClientBuilder#jsonMarshallerFactory(Function)")," to\nsupport gRPC JSON serialization format."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.linecorp.armeria.client.grpc.GrpcClients\nimport com.linecorp.armeria.common.grpc.GrpcSerializationFormats\nimport com.linecorp.armeria.common.scalapb.ScalaPbJsonMarshaller\n        \nval client = \n  GrpcClients.builder("http://127.0.0.1:8080/")\n             .serializationFormat(GrpcSerializationFormats.JSON)\n             // Register \'ScalaPbJsonMarshaller\' for enabling gRPC JSON serialization format\n             .jsonMarshallerFactory(_ => ScalaPbJsonMarshaller())\n             .build(classOf[HelloServiceBlockingStub])\n    \nval request = HelloRequest("Armerian World")\nval reply = helloService.hello(request)\nassert(reply.message == "Hello, Armerian World!")\n')),(0,n.kt)("p",null,"Please see ",(0,n.kt)("a",{parentName:"p",href:"https://armeria.dev/docs/client-grpc"},"gRPC client")," for more information."),(0,n.kt)("h2",{id:"supporting-scalapb-in-annotated-services",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#supporting-scalapb-in-annotated-services","aria-label":"supporting scalapb in annotated services permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Supporting ScalaPB in annotated services."),(0,n.kt)("h3",{id:"converting-an-http-request-to-a-scalapbs-generatedmesage",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h3",href:"#converting-an-http-request-to-a-scalapbs-generatedmesage","aria-label":"converting an http request to a scalapbs generatedmesage permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Converting an HTTP request to a ScalaPB's ",(0,n.kt)("inlineCode",{parentName:"h3"},"GeneratedMesage")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A Protocol Buffers is automatically converted to a ",(0,n.kt)("inlineCode",{parentName:"li"},"GeneratedMessage")," only when\nthe content type is one of followings:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"application/probuf")," "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"application/octet-stream")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"application/x-protobuf")),(0,n.kt)("li",{parentName:"ul"},"no media type negotiated"))),(0,n.kt)("li",{parentName:"ul"},"A JSON is automatically converted to a ",(0,n.kt)("inlineCode",{parentName:"li"},"GeneratedMessage")," only when the content type\nis either ",(0,n.kt)("inlineCode",{parentName:"li"},"application/json")," or ends with ",(0,n.kt)("inlineCode",{parentName:"li"},"+json"),".")),(0,n.kt)("p",null,"If you have the following proto file,"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\npackage com.example.testing;\noption java_package = "com.example.testing";\n\nmessage SimpleRequest {\n  string payload = 1;\n  int32 size = 2;\n}\n\nmessage SimpleResponse {\n  string message = 1;\n  int32 status = 2;\n}\n')),(0,n.kt)("p",null,"the ",(0,n.kt)("inlineCode",{parentName:"p"},"SimpleRequest")," generated by ScalaPB could be used for a parameter of your service method."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.example.testing.SimpleRequest\nimport com.linecorp.armeria.server.annotation.{ConsumesJson, ConsumesProtobuf, Post}\n\nclass GreetingService {\n  // If a content type is not set, Protoco Buffers\' parser is used by default.\n  @Post("/no-content-type")\n  def noContentType(request: SimpleRequest): String = s"Hello, ${request.payload}!"\n\n  // Convert the Protocol Buffers in an HTTP payload into the \'SimpleRequest\'\n  @Post("/protobuf")\n  @ConsumesProtobuf\n  def consumeProtobuf(request: SimpleRequest): String = s"Hello, ${request.payload}!"\n\n  // Convert the JSON in an HTTP payload into a \'SimpleRequest\'\n  @Post("/json")\n  @ConsumesJson\n  def consumeJson(request: SimpleRequest): String = "Hello, Armeria!"\n}\n')),(0,n.kt)("h3",{id:"returning-a-scalapbs-generatedmesage",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h3",href:"#returning-a-scalapbs-generatedmesage","aria-label":"returning a scalapbs generatedmesage permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Returning a ScalaPB's ",(0,n.kt)("inlineCode",{parentName:"h3"},"GeneratedMesage")),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"GeneratedMesage")," can be converted to either Protocol Buffers or JSON."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.example.testing.SimpleResponse\nimport scala.concurrent.Future\n\nclass GreetingService {\n\n  // Convert \'SimpleResponse\' into Protocol Buffers wire format\n  @Get("/protobuf")\n  @ProducesProtobuf\n  def produceProtobuf: SimpleResponse = SimpleResponse("Hello, Armeria!")\n\n  // Convert \'SimpleResponse\' into JSON format\n  @Get("/json")\n  @ProducesJson\n  def produceJson: SimpleResponse = SimpleResponse("Hello, Armeria!")\n\n  // Convert \'SimpleResponse\' into Protocol Buffers wire format with Scala Future\n  @Get("/protobuf+async")\n  @ProducesProtobuf\n  def produceProtobufFuture: Future[SimpleResponse] = \n    Future { SimpleResponse("Hello, Armeria!") }\n}\n')),(0,n.kt)("p",null,"However, a sequence of ",(0,n.kt)("inlineCode",{parentName:"p"},"GeneratedMesage"),"s can be only converted to JSON array because Protocol Buffers\nwire format is ",(0,n.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/techniques#streaming"},"not self-delimiting"),".\nThe following collection types can be converted to JSON array:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"scala.List")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"scala.Vector")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"scala.Set")),(0,n.kt)("li",{parentName:"ul"},"Reactive Stream ",(0,n.kt)("a",{parentName:"li",href:"https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html"},"Publisher")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"java.util.List")," "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"java.util.Set")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"java.util.stream.Stream"))),(0,n.kt)("h3",{id:"injecting-an-executioncontext-to-an-annotated-service-method",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h3",href:"#injecting-an-executioncontext-to-an-annotated-service-method","aria-label":"injecting an executioncontext to an annotated service method permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Injecting an ",(0,n.kt)("a",{parentName:"h3",href:"https://www.scala-lang.org/api/current/scala/concurrent/ExecutionContext.html"},"ExecutionContext")," to an annotated service method"),(0,n.kt)("p",null,"An ",(0,n.kt)("inlineCode",{parentName:"p"},"ExecutionContext")," could be automatically injected as a method parameter to execute an asynchronous service\non top of an Armeria's event loop or blocking task executor."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.linecorp.armeria.server.ServiceRequestContext\nimport com.linecorp.armeria.server.annoation.Blocking\nimport scala.concurrent.Future\n\nclass MyAsyncService {\n  @Post("/async")\n  def asyncService(req: SimpleRequest)(implicit ec: ExecutionContext): Future[String] =\n    Future {\n      // This callback will be executed in an Armeria\'s event loop\n      assert(ServiceRequestContext.current() != null)\n      "Hello, Armeria!"\n    }\n\n  @Blocking\n  @Post("/blocking-task")\n  def blockingAsyncService(req: SimpleRequest)(implicit ec: ExecutionContext): Future[String] =\n    Future {\n      // This callback will be executed in an Armeria\'s blocking task executor\n      assert(ServiceRequestContext.current() != null)\n      // Perform a long running task\n      "Hello, Armeria!"\n    }\n  }\n}\n')))}g.isMDXComponent=!0},28819:function(e,a,t){t.d(a,{Z:function(){return l}});var r=t(25444),n=t(67294),i=JSON.parse('{"root":["index","setup"],"Useful links":{"Tutorials":"/tutorials","Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-graphql","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse","server-service-registration","server-multipart","server-timeouts"],"Client":["client-http","client-thrift","client-grpc","client-factory","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-streaming-backpressure","advanced-structured-logging-kafka","advanced-metrics","advanced-unit-testing","advanced-production-checklist","advanced-saml","advanced-spring-boot-integration","advanced-spring-webflux-integration","advanced-dropwizard-integration","advanced-kotlin","advanced-scala","advanced-scalapb","advanced-flags-provider","advanced-zipkin","advanced-client-interoperability"]}'),o=t(46731),l=function(e){var a=(0,r.useStaticQuery)("1217743243").allMdx.nodes;return n.createElement(o.Z,Object.assign({},e,{candidateMdxNodes:a,index:i,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-scalapb-mdx-b9410ddbc09d31b55d23.js.map