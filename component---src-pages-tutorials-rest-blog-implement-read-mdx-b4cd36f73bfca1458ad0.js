"use strict";(self.webpackChunkarmeria_site=self.webpackChunkarmeria_site||[]).push([[3824],{69804:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return v},pageTitle:function(){return l}});var r=a(63366),n=(a(67294),a(64983)),i=a(89791),o=["components"],l="Implementing READ operation",s={},p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)}},m=p("TutorialSteps"),c=p("Tabs"),d=p("TabPane"),h={pageTitle:l,_frontmatter:s},g=i.Z;function v(e){var t=e.components,a=(0,r.Z)(e,o);return(0,n.kt)(g,Object.assign({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"implementing-read-operation",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h1",href:"#implementing-read-operation","aria-label":"implementing read operation permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Implementing READ operation"),(0,n.kt)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#what-you-need"},"What you need")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#1-map-http-method"},"1. Map HTTP method")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#2-handle-parameters"},"2. Handle parameters")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#3-implement-service-code"},"3. Implement service code")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#4-return-response"},"4. Return response")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#5-test-retrieving-a-single-post"},"5. Test retrieving a single post")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#6-test-retrieving-multiple-posts"},"6. Test retrieving multiple posts")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#next-step"},"Next step"))),(0,n.kt)("p",null,"In this step, we'll implement two methods at once. One is for retrieving a single post and another for multiple blog\nposts. By completing this step, you'll learn to map your service with the HTTP GET (",(0,n.kt)("a",{parentName:"p",href:"type://@Get:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Get.html"},"type://@Get"),") method, use parameter injection (",(0,n.kt)("a",{parentName:"p",href:"type://@Param:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Param.html"},"type://@Param"),"), set default parameter value (",(0,n.kt)("a",{parentName:"p",href:"type://@Default:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Default.html"},"type://@Default"),"), and return a JSON object (",(0,n.kt)("a",{parentName:"p",href:"type://@ProducesJson:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/ProducesJson.html"},"type://@ProducesJson"),") as a response."),(0,n.kt)(m,{current:5,mdxType:"TutorialSteps"}),(0,n.kt)("h2",{id:"what-you-need",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#what-you-need","aria-label":"what you need permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What you need"),(0,n.kt)("p",null,"You need to have the following files obtained from previous steps.\nYou can always ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/line/armeria-examples/blob/main/tutorials/rest-api-annotated-service/src/main/java/example/armeria/server/blog/"},"download")," the full version, instead of creating one yourself."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Main.java")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"BlogPost.java")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"BlogService.java")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"BlogServiceTest.java"))),(0,n.kt)("h2",{id:"1-map-http-method",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#1-map-http-method","aria-label":"1 map http method permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"1. Map HTTP method"),(0,n.kt)("p",null,"Let's start ",(0,n.kt)("a",{parentName:"p",href:"/docs/server-annotated-service#mapping-http-service-methods"},"mapping the HTTP GET method")," with our service method:"),(0,n.kt)(c,{mdxType:"Tabs"},(0,n.kt)(d,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,n.kt)("p",null,"Map the HTTP GET method for retrieving a single post:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Declare a service method ",(0,n.kt)("inlineCode",{parentName:"p"},"getBlogPost()")," in the class ",(0,n.kt)("inlineCode",{parentName:"p"},"BlogService"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Map this service method with the HTTP GET method by adding the ",(0,n.kt)("a",{parentName:"p",href:"type://@Get:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Get.html"},"type://@Get")," annotation as follows.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Bind the endpoint ",(0,n.kt)("inlineCode",{parentName:"p"},"/blogs")," to the method."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java highlight=6",filename:"BlogService.java",highlight:"6"},'import com.linecorp.armeria.server.annotation.Get;\n\npublic final class BlogService {\n  ...\n\n  @Get("/blogs")\n  public void getBlogPost(int id) {\n    // Retrieve a single post\n  }\n}\n'))))),(0,n.kt)(d,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,n.kt)("p",null,"Map the HTTP GET method for retrieving multiple posts:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Declare a service method ",(0,n.kt)("inlineCode",{parentName:"p"},"getBlogPosts()")," in the class ",(0,n.kt)("inlineCode",{parentName:"p"},"BlogService"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Map this service method with the HTTP GET method by adding the ",(0,n.kt)("a",{parentName:"p",href:"type://@Get:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Get.html"},"type://@Get")," annotation as follows.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Bind the endpoint ",(0,n.kt)("inlineCode",{parentName:"p"},"/blogs")," to the method."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java highlight=6",filename:"BlogService.java",highlight:"6"},'import com.linecorp.armeria.server.annotation.Get;\n\npublic final class BlogService {\n  ...\n\n  @Get("/blogs")\n  public void getBlogPosts(boolean descending) {\n    // Retrieve multiple posts\n  }\n}\n')))))),(0,n.kt)("h2",{id:"2-handle-parameters",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#2-handle-parameters","aria-label":"2 handle parameters permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"2. Handle parameters"),(0,n.kt)("p",null,"Take in information through ",(0,n.kt)("em",{parentName:"p"},"path")," and ",(0,n.kt)("em",{parentName:"p"},"query")," parameters for retrieving blog posts. For retrieving a single post, we'll take a blog post ID as the path parameter. For multiple posts, we'll take the sorting order as a query parameter."),(0,n.kt)(c,{defaultActiveKey:"1",mdxType:"Tabs"},(0,n.kt)(d,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,n.kt)("p",null,"Let's handle parameters for retrieving a single post:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"To take in a path parameter, add ",(0,n.kt)("inlineCode",{parentName:"li"},"/:id")," to the ",(0,n.kt)("a",{parentName:"li",href:"type://@Get:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Get.html"},"type://@Get")," annotation's parameter as in line 6."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("a",{parentName:"li",href:"/docs/server-annotated-service#parameter-injection"},"Inject the path parameter")," to the service method, annotate the parameter with ",(0,n.kt)("a",{parentName:"li",href:"type://@Param:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Param.html"},"type://@Param")," as in line 7.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java showlineno=true",filename:"BlogService.java",showlineno:"true"},'import com.linecorp.armeria.server.annotation.Param;\n\npublic final class BlogService {\n ...\n\n @Get("/blogs/:id")\n public void getBlogPost(@Param int id) {\n   // Retrieve a single post\n }\n}\n'))),(0,n.kt)(d,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,n.kt)("p",null,"Let's handle parameters for retrieving multiple posts:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Specify the endpoint for the service using the ",(0,n.kt)("a",{parentName:"p",href:"type://@Get:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Get.html"},"type://@Get")," annotation.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"/docs/server-annotated-service#parameter-injection"},"Inject the parameter")," by annotating the parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"descending")," with ",(0,n.kt)("a",{parentName:"p",href:"type://@Param:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Param.html"},"type://@Param")," as in line 8.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set the default sorting order to descending by annotating the parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"descending")," with ",(0,n.kt)("a",{parentName:"p",href:"type://@Default:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Default.html"},"type://@Default"),", with its parameter as ",(0,n.kt)("inlineCode",{parentName:"p"},'"true"'),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java showlineno=true",filename:"BlogService.java",showlineno:"true"},'import com.linecorp.armeria.server.annotation.Param;\nimport com.linecorp.armeria.server.annotation.Default;\n\npublic final class BlogService {\n  ...\n\n  @Get("/blogs")\n  public void getBlogPosts(@Param @Default("true") boolean descending) {\n    // Retrieve multiple posts\n  }\n}\n')))))),(0,n.kt)("h2",{id:"3-implement-service-code",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#3-implement-service-code","aria-label":"3 implement service code permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"3. Implement service code"),(0,n.kt)("p",null,"In this step, write the code required for service itself."),(0,n.kt)(c,{defaultActiveKey:"1",mdxType:"Tabs"},(0,n.kt)(d,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,n.kt)("p",null,"To retrieve a single blog post information, copy the following code inside the ",(0,n.kt)("inlineCode",{parentName:"p"},"getBlogPost()")," method."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java highlight=3",filename:"BlogService.java",highlight:"3"},'@Get("/blogs")\npublic void getBlogPost(@Param int id) {\n  BlogPost blogPost = blogPosts.get(id);\n}\n'))),(0,n.kt)(d,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,n.kt)("p",null,"To retrieve multiple blog posts, copy the following code inside the ",(0,n.kt)("inlineCode",{parentName:"p"},"getBlogPosts()")," method. Note that the return type has been changed from ",(0,n.kt)("inlineCode",{parentName:"p"},"void")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterable<BlogPost>"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java",filename:"BlogService.java"},'import java.util.Map.Entry;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.stream.Collectors;\n\n@Get("/blogs")\npublic Iterable<BlogPost> getBlogPosts(@Param @Default("true") boolean descending) {\n  // Descending\n  if (descending) {\n      return blogPosts.entrySet()\n                      .stream()\n                      .sorted(Collections.reverseOrder(Comparator.comparingInt(Entry::getKey)))\n                      .map(Entry::getValue).collect(Collectors.toList());\n  }\n  // Ascending\n  return blogPosts.values().stream().collect(Collectors.toList());\n}\n')))),(0,n.kt)("h2",{id:"4-return-response",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#4-return-response","aria-label":"4 return response permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"4. Return response"),(0,n.kt)("p",null,"Let's return a response for the service call."),(0,n.kt)(c,{defaultActiveKey:"1",mdxType:"Tabs"},(0,n.kt)(d,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,n.kt)("p",null,"To return a response for getting a single post:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Replace the return type of the ",(0,n.kt)("inlineCode",{parentName:"li"},"getBlogPost()")," method from ",(0,n.kt)("inlineCode",{parentName:"li"},"void")," to ",(0,n.kt)("a",{parentName:"li",href:"type://HttpResponse:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponse.html"},"type://HttpResponse"),"."),(0,n.kt)("li",{parentName:"ol"},"Return a response using Armeria's ",(0,n.kt)("a",{parentName:"li",href:"type://HttpResponse:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponse.html"},"type://HttpResponse")," containing the content of the blog post retrieved.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java highlight=5,8",filename:"BlogService.java",highlight:"5,8"},'import com.linecorp.armeria.common.HttpResponse;\n\npublic final class BlogService {\n  @Get("/blogs/:id")\n  public HttpResponse getBlogPost(@Param int id) {\n    ...\n\n    return HttpResponse.ofJson(blogPost);\n  }\n}\n'))),(0,n.kt)(d,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,n.kt)("p",null,"We've already implemented returning multiple blog posts in the previous step. Here, annotate the method ",(0,n.kt)("inlineCode",{parentName:"p"},"getBlogPosts()")," with ",(0,n.kt)("a",{parentName:"p",href:"type://@ProducesJson:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/ProducesJson.html"},"type://@ProducesJson"),". This converts a list of ",(0,n.kt)("inlineCode",{parentName:"p"},"BlogPost")," objects into a JSON response."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java highlight=4",filename:"BlogService.java",highlight:"4"},'import com.linecorp.armeria.server.annotation.ProducesJson;\n\n@Get("/blogs")\n@ProducesJson\npublic Iterable<BlogPost> getBlogPosts(@Param @Default("true") boolean descending) {\n  // Retrieve multiple blog posts\n}\n')))),(0,n.kt)("h2",{id:"5-test-retrieving-a-single-post",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#5-test-retrieving-a-single-post","aria-label":"5 test retrieving a single post permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"5. Test retrieving a single post"),(0,n.kt)("p",null,"Let's test if we can retrieve a blog post we created."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"In the ",(0,n.kt)("inlineCode",{parentName:"p"},"BlogServiceTest")," class, add a test method to retrieve the first blog post with ID ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\nvoid getBlogPost() throws JsonProcessingException {\n  final WebClient client = WebClient.of(server.httpUri());\n  final AggregatedHttpResponse res = client.get("/blogs/0").aggregate().join();\n  final Map<String, Object> expected = Map.of("id", 0,\n              "title", "My first blog",\n              "content", "Hello Armeria!");\n\n  assertThatJson(res.contentUtf8()).whenIgnoringPaths("createdAt", "modifiedAt")\n              .isEqualTo(mapper.writeValueAsString(expected));\n}\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Add annotations to configure the order our test methods will be executed.\nThe annotations guarantee that the first blog post will be created in the ",(0,n.kt)("inlineCode",{parentName:"p"},"createBlogPost()")," method before we try to retrieve it in the ",(0,n.kt)("inlineCode",{parentName:"p"},"getBlogPost()")," method."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},"import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(OrderAnnotation.class) // Add this\nclass BlogServiceTest {\n  ...\n\n  @Test\n  @Order(1) // Add this\n  void createBlogPost() throws JsonProcessingException {\n    ...\n  }\n\n  @Test\n  @Order(2) // Add this\n  void getBlogPost() throws JsonProcessingException {\n    ...\n  }\n}\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run all the test cases on your IDE or using Gradle."),(0,n.kt)("p",{parentName:"li"},"Your client retrieved a blog post from the server successfully if the test is passed."))),(0,n.kt)("h2",{id:"6-test-retrieving-multiple-posts",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#6-test-retrieving-multiple-posts","aria-label":"6 test retrieving multiple posts permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"6. Test retrieving multiple posts"),(0,n.kt)("p",null,"Finally, let's test if we can retrieve multiple posts.\nAdd a test method like the following to create the second blog post and test retrieving the list of blog posts."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'import java.util.List;\n\n@Test\n@Order(3)\nvoid getBlogPosts() throws JsonProcessingException {\n  final WebClient client = WebClient.of(server.httpUri());\n  final HttpRequest request = createBlogPostRequest(Map.of("title", "My second blog",\n                "content", "Armeria is awesome!"));\n  client.execute(request).aggregate().join();\n  final AggregatedHttpResponse res = client.get("/blogs").aggregate().join();\n  final List<Map<String, Object>> expected = List.of(\n          Map.of("id", 1,\n                 "title", "My second blog",\n                 "content", "Armeria is awesome!"),\n          Map.of("id", 0,\n                 "title", "My first blog",\n                 "content", "Hello Armeria!"));\n  assertThatJson(res.contentUtf8()).whenIgnoringPaths("[*].createdAt", "[*].modifiedAt")\n                .isEqualTo(mapper.writeValueAsString(expected));\n}\n')),(0,n.kt)("p",null,"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed."),(0,n.kt)("p",null,"You can test this also with Armeria's ",(0,n.kt)("a",{parentName:"p",href:"/docs/server-docservice"},"Documentation service"),". See ",(0,n.kt)("a",{parentName:"p",href:"/tutorials/rest/blog/add-services-to-server#using-docservice-after-adding-service-methods"},"Using DocService after adding service methods")," for instructions."),(0,n.kt)("h2",{id:"next-step",style:{position:"relative"}},(0,n.kt)("a",{parentName:"h2",href:"#next-step","aria-label":"next step permalink",className:"anchor before"},(0,n.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Next step"),(0,n.kt)("p",null,"In this step, we've implemented methods for a READ operation and used Armeria's annotations; ",(0,n.kt)("a",{parentName:"p",href:"type://@Get:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Get.html"},"type://@Get"),", ",(0,n.kt)("a",{parentName:"p",href:"type://@ProducesJson:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/ProducesJson.html"},"type://@ProducesJson"),", ",(0,n.kt)("a",{parentName:"p",href:"type://@Param:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Param.html"},"type://@Param"),", and ",(0,n.kt)("a",{parentName:"p",href:"type://@Default:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/annotation/Default.html"},"type://@Default"),"."),(0,n.kt)("p",null,"Next, at ",(0,n.kt)("a",{parentName:"p",href:"/tutorials/rest/blog/implement-update"},"Step 6. Implement UPDATE"),", we'll implement an UPDATE operation to modify existing blog posts."),(0,n.kt)(m,{current:5,mdxType:"TutorialSteps"}))}v.isMDXComponent=!0},89791:function(e,t,a){a.d(t,{Z:function(){return l}});var r=a(25444),n=a(67294),i=JSON.parse('{"root":["index"],"Useful links":{"User manual":"/docs","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"REST service":["rest/blog","rest/blog/create-server","rest/blog/prepare-data-object","rest/blog/add-services-to-server","rest/blog/implement-create","rest/blog/implement-read","rest/blog/implement-update","rest/blog/implement-delete"],"gRPC service":["grpc/blog","grpc/blog/define-service","grpc/blog/run-service","grpc/blog/implement-create","grpc/blog/implement-read","grpc/blog/implement-update","grpc/blog/implement-delete"],"Thrift service":["thrift/blog","thrift/blog/define-service","thrift/blog/run-service","thrift/blog/implement-create","thrift/blog/implement-read","thrift/blog/implement-update","thrift/blog/implement-delete"]}'),o=a(46731),l=function(e){var t=(0,r.useStaticQuery)("3172452987").allMdx.nodes;return n.createElement(o.Z,Object.assign({},e,{candidateMdxNodes:t,index:i,prefix:"tutorials",menuTitle:!0,pageTitleSuffix:"Armeria tutorial"}))}}}]);
//# sourceMappingURL=component---src-pages-tutorials-rest-blog-implement-read-mdx-b4cd36f73bfca1458ad0.js.map