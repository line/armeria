import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.nio.file.Files
import java.util.concurrent.TimeUnit
import java.util.regex.Pattern
import java.util.stream.Collectors

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:${managedVersions['com.github.node-gradle:gradle-node-plugin']}"
    }
}

apply plugin: 'base'
apply plugin: 'com.github.node-gradle.node'

node {
    version = '12.17.0'
    npmVersion = '6.14.5'
    download = true
    npmInstallCommand = "ci"
}

task npmClean(type: NpmTask) {
    dependsOn tasks.npmInstall
    args = ['run', 'clean']
}
tasks.clean.dependsOn tasks.npmClean
tasks.clean.delete(project.file("${project.projectDir}/gen-src"))

task versionIndex(type: VersionIndexTask)
task apiIndex(type: ApiIndexTask) {
    dependsOn ':javadoc:javadoc'
}
task contributorList(type: ContributorListTask)

project.ext.getGenerateSourcesTask().configure {
    dependsOn tasks.npmInstall
    dependsOn tasks.versionIndex
    dependsOn tasks.apiIndex
    dependsOn tasks.contributorList
}

task develop(type: NpmTask) {
    dependsOn tasks.generateSources
    args = ['run', 'develop']
}

final def lintEnabled = !rootProject.hasProperty('noLint')
if (lintEnabled) {
    task eslint(type: NpmTask) {
        dependsOn tasks.generateSources
        args = ['run', 'lint']
        inputs.dir('src')
        inputs.file('.eslintrc.js')
        inputs.file('package.json')
        inputs.file('package-lock.json')
    }

    project.ext.getLintTask().configure {
        dependsOn tasks.eslint
    }
}

// Note that this task is not triggered by the 'build' task
// because it takes long to build a site.
task site(type: NpmTask) {
    dependsOn tasks.generateSources
    if (lintEnabled) {
        dependsOn tasks.lint
    }
    args = ['run', 'build']
    inputs.dir('src')
    inputs.file('gatsby-config.js')
    inputs.file('package.json')
    inputs.file('package-lock.json')
    inputs.file('tsconfig.json')
    outputs.dir('.cache')
    outputs.dir('public')
}

class VersionIndexTask extends DefaultTask {

    @Input
    final def version = project.property('version')
    @Input
    final def managedVersions = project.property('managedVersions') as Map
    @OutputFile
    final def versionIndexFile = project.file("${project.projectDir}/gen-src/versions.json")

    @TaskAction
    def run() {
        def info = new TreeMap(this.managedVersions)
        info["${project.group}:armeria-bom"] = version

        versionIndexFile.withPrintWriter('UTF-8') { out ->
            out.println(new JsonBuilder(info).toPrettyString())
        }
    }
}

class ApiIndexTask extends DefaultTask {

    @InputDirectory
    final def javadocDir = project.file("${project.rootProject.projectDir}/javadoc/build/docs/javadoc")
    @OutputFile
    final def nameToHrefFile = project.file("${project.projectDir}/gen-src/api-index.json")

    @TaskAction
    def run() {
        def javadocPath = javadocDir.toPath()
        def nameToHref = Files.walk(javadocPath).filter({ path ->
            if (Files.isDirectory(path)) {
                return false
            }

            return path.getName(path.nameCount - 1).toString().matches(/[A-Z][a-zA-Z0-9._$]+\.html/)
        }).sorted().flatMap({ path ->
            def relativePath = "${javadocPath.relativize(path)}".replace(File.separator, '/')
            def fqcn = relativePath[0..-6].replace('/', '.')
            def href = "https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/${relativePath}"

            def result = []
            def name = fqcn
            for (;;) {
                result.add([name, href])
                def dotIndex = name.indexOf('.')
                if (dotIndex < 0) {
                    break
                }
                name = name.substring(dotIndex + 1)
            }

            return result.stream()
        }).collect(Collectors.toMap({ e -> e[0] }, { e -> e[1] }, { a, b -> a }, { new TreeMap()}))


        nameToHrefFile.withPrintWriter('UTF-8') { out ->
            out.println(new JsonBuilder(nameToHref).toPrettyString())
        }
    }
}

class ContributorListTask extends DefaultTask {
    // Rebuild up to once an hour, unless cleaned.
    @Input
    final def hourOfDay = System.currentTimeMillis() / TimeUnit.HOURS.toMillis(1)
    @OutputFile
    final def contributorsFile = project.file("${project.projectDir}/gen-src/contributors.json")

    @TaskAction
    def run() {
        def contributors = new TreeMap<String, String>()
        def accessToken = project.findProperty('githubToken')
        def url = 'https://api.github.com/repos/line/armeria/contributors'
        def nextPattern = Pattern.compile(/<(https:\/\/api\.github\.com\/[^>]+)>; rel="next"/)
        for (def i = 0; i < 10; i++) {
            def req = new URL(url).openConnection()
            if (accessToken != null) {
                req.setRequestProperty('Authorization', "token ${accessToken}")
            }
            def resText = req.getInputStream().getText()
            if (req.getResponseCode() != 200) {
                if (req.getHeaderFieldInt('X-RateLimit-Remaining', Integer.MAX_VALUE) <= 0) {
                    throw new Exception('Exceeded Github API rate limit. ' +
                            'Specify "-PgithubToken=<personalAccessToken>" option: ' +
                            "${req.getResponseCode()}, ${req.getHeaderFields()}, ${resText}")
                } else {
                    throw new Exception('Received a non-200 response from Github: ' +
                            "${req.getResponseCode()}, ${req.getHeaderFields()}, ${resText}")
                }
            }
            def res = new JsonSlurper().parseText(resText)
            res.each({
                def username = it['login']
                def avatarUrl = it['avatar_url']
                if (!(username instanceof CharSequence) || !(avatarUrl instanceof CharSequence)) {
                    throw new Exception("Received an invalid response from Github: ${resText}")
                }
                contributors.put("${username}".toString(), "${avatarUrl}".toString())
            })

            // Handle pagination
            def link = req.getHeaderField('Link')
            if (link == null) {
                // Last page or no link header
                break
            }

            def nextLinkMatcher = nextPattern.matcher(link)
            if (!nextLinkMatcher.find()) {
                // No next link
                break
            }

            // Jump to the next page
            url = nextLinkMatcher.group(1)
        }

        contributorsFile.withPrintWriter('UTF-8') { out ->
            out.println(new JsonBuilder(contributors).toPrettyString())
        }
    }
}
