{"version":3,"file":"component---src-pages-docs-advanced-unit-testing-mdx-480bac29d33d26b6cd23.js","mappings":"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","sources":["webpack://armeria-site/./src/layouts/docs.tsx","webpack://armeria-site/./src/pages/docs/advanced-unit-testing.mdx"],"sourcesContent":["import { RouteComponentProps } from '@reach/router';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport docsIndex from '../pages/docs/toc.json';\nimport MdxLayout from './mdx';\n\ninterface DocsLayoutProps extends RouteComponentProps {\n  pageContext: any;\n  pageTitle: string;\n}\n\nconst DocsLayout: React.FC<DocsLayoutProps> = (props) => {\n  const {\n    allMdx: { nodes: candidateMdxNodes },\n  } = useStaticQuery(graphql`\n    query {\n      allMdx(filter: { fileAbsolutePath: { glob: \"**/src/pages/docs/**\" } }) {\n        nodes {\n          tableOfContents(maxDepth: 1)\n          excerpt(pruneLength: 256, truncate: true)\n          parent {\n            ... on File {\n              sourceInstanceName\n              name\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <MdxLayout\n      {...props}\n      candidateMdxNodes={candidateMdxNodes}\n      index={docsIndex}\n      prefix=\"docs\"\n      pageTitleSuffix=\"Armeria documentation\"\n    />\n  );\n};\n\nexport default DocsLayout;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/armeria/armeria/site/src/layouts/docs.tsx\";\nexport const pageTitle = \"Unit-testing Client and Service\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  pageTitle,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"unit-testing-client-and-service\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#unit-testing-client-and-service\",\n        \"aria-label\": \"unit testing client and service permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Unit-testing `}<inlineCode parentName=\"h1\">{`Client`}</inlineCode>{` and `}<inlineCode parentName=\"h1\">{`Service`}</inlineCode></h1>\n    <h6 {...{\n      \"className\": \"inlinePageToc\",\n      \"role\": \"navigation\"\n    }}>{`Table of contents`}</h6>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#using-a-fake-context-to-emulate-an-incoming-request\"\n        }}>{`Using a fake context to emulate an incoming request`}</a></li>\n    </ul>\n    <p>{`A unit test of a client or a service will require you to prepare two objects:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"type://ClientRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientRequestContext.html\"\n        }}>{`type://ClientRequestContext`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"type://ServiceRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/ServiceRequestContext.html\"\n        }}>{`type://ServiceRequestContext`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"type://HttpRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpRequest.html\"\n        }}>{`type://HttpRequest`}</a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"type://RpcRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RpcRequest.html\"\n        }}>{`type://RpcRequest`}</a></li>\n    </ul>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"type://ClientRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientRequestContext.html\"\n      }}>{`type://ClientRequestContext`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"type://ServiceRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/ServiceRequestContext.html\"\n      }}>{`type://ServiceRequestContext`}</a>{` is a more complex object with many properties than\n`}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpRequest.html\"\n      }}>{`type://HttpRequest`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"type://RpcRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RpcRequest.html\"\n      }}>{`type://RpcRequest`}</a>{`, and thus Armeria provides the API dedicated to building a fake context\nobject easily:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport com.linecorp.armeria.common.HttpRequest;\nimport com.linecorp.armeria.common.HttpResponse;\nimport com.linecorp.armeria.common.AggregatedHttpResponse;\nimport com.linecorp.armeria.client.ClientRequestContext;\nimport com.linecorp.armeria.server.ServiceRequestContext;\n\nclass MyJUnit5Test {\n\n    private MyClient client;\n    private MyService service;\n\n    @BeforeEach\n    void setUp() {\n        client = ...;\n        service = ...;\n    }\n\n    @Test\n    void testClient() {\n        // Given\n        HttpRequest req = HttpRequest.of(HttpMethod.GET, \"/greet?name=foo\");\n        ClientRequestContext cctx = ClientRequestContext.of(req);\n\n        // When\n        HttpResponse res = client.execute(cctx, req);\n\n        // Then\n        AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n        assertEquals(200, aggregatedRes.status().code());\n    }\n\n    @Test\n    void testService() {\n        // Given\n        HttpRequest req = HttpRequest.of(HttpMethod.POST, \"/greet\",\n                                         MediaType.JSON_UTF_8,\n                                         \"{ \\\\\"name\\\\\": \\\\\"foo\\\\\" }\");\n        ServiceRequestContext sctx = ServiceRequestContext.of(req);\n\n        // When\n        HttpResponse res = service.serve(sctx, req);\n\n        // Then\n        AggregatedHttpResponse aggregatedRes = res.aggregate().join();\n        assertEquals(200, aggregatedRes.status().code());\n    }\n}\n`}</code></pre>\n    <p>{`Although the fake context returned by `}<a parentName=\"p\" {...{\n        \"href\": \"type://ClientRequestContext#of(HttpRequest):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientRequestContext.html#of(com.linecorp.armeria.common.HttpRequest)\"\n      }}>{`type://ClientRequestContext#of(HttpRequest)`}</a>{` and\n`}<a parentName=\"p\" {...{\n        \"href\": \"type://ServiceRequestContext#of(HttpRequest):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/ServiceRequestContext.html#of(com.linecorp.armeria.common.HttpRequest)\"\n      }}>{`type://ServiceRequestContext#of(HttpRequest)`}</a>{` will provide sensible defaults,\nyou can override its default properties using a builder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\n\nimport com.linecorp.armeria.common.SessionProtocol;\nimport com.linecorp.armeria.client.ClientRequestContext;\nimport com.linecorp.armeria.server.RoutingResult;\nimport com.linecorp.armeria.server.ServiceRequestContext;\n\nHttpRequest req = HttpRequest.of(...);\n\nClientRequestContext cctx =\n        ClientRequestContext.builder(req)\n                            .sessionProtocol(SessionProtocol.H1C)\n                            .remoteAddress(new InetSocketAddress(\"192.168.0.2\", 443))\n                            .build();\n\nRoutingResult routingResult =\n        RoutingResult.builder()\n                     .path(\"/mapped/path\")                       // Mapped path\n                     .query(\"foo=bar&baz=qux\")                   // Query string\n                     .pathParams(Map.of(\"pathParam1\", \"value1\",  // Path parameters\n                                        \"pathParam2\", \"value2\"))\n                     .build();\n\nServiceRequestContext sctx =\n        ServiceRequestContext.builder(req)\n                             .clientAddress(InetAddress.getByName(\"192.168.1.2\"))\n                             .routingResult(routingResult);\n                             .build();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-a-fake-context-to-emulate-an-incoming-request\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#using-a-fake-context-to-emulate-an-incoming-request\",\n        \"aria-label\": \"using a fake context to emulate an incoming request permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Using a fake context to emulate an incoming request`}</h2>\n    <p>{`It is usually not necessary to build a context object by yourself except when writing a unit test,\nbecause Armeria will always create a context object for you. However, you may need to build a fake context and\ninvoke your request processing pipeline with it when you want to handle the requests received via other sources\nsuch as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Non-Armeria services`}</li>\n      <li parentName=\"ul\">{`Non-HTTP protocols, e.g. Kafka and STOMP`}</li>\n      <li parentName=\"ul\">{`Timers, i.e. Trigger a certain request every N minutes.`}</li>\n    </ul>\n    <p>{`The following example shows how to emit a fake request every minute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\nimport com.linecorp.armeria.server.HttpService;\n\nScheduledExecutorService executor = ...;\nHttpService sessionManagementService = (ctx, req) -> ...;\n\n// Send a session expiration request to the session management service\n// every minute.\nexecutor.scheduleWithFixedDelay(() -> {\n    HttpRequest req = HttpRequest.of(HttpMethod.POST, \"/expire_stall_sessions\");\n    ServiceRequestContext ctx = ServiceRequestContext.of(req);\n    try {\n        HttpResponse res = sessionManagementService.serve(ctx, req);\n        AggregatedHttpResponse aggregatedRes = res.aggregate().get();\n        if (aggregatedRes.status().code() != 200) {\n            System.err.println(\"Failed to expire stall sessions: \" +\n                               aggregatedRes);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}, 1, 1, TimeUnit.MINUTES);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["props","allMdx","nodes","candidateMdxNodes","useStaticQuery","React","MdxLayout","Object","assign","index","docsIndex","prefix","pageTitleSuffix","pageTitle","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","mdx","mdxType","parentName","isMDXComponent"],"sourceRoot":""}