/*
 * Copyright 2017 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.armeria.client.circuitbreaker;

import static java.util.Objects.requireNonNull;

import com.linecorp.armeria.common.metric.MetricKey;
import com.linecorp.armeria.common.metric.Metrics;

/**
 * A {@link CircuitBreakerListener} which exports the status of {@link CircuitBreaker}s to {@link Metrics}.
 *
 * <p>This class will generate the following metrics.
 *
 * <table summary="metrics that will be generated by this class">
 * <tr><th>metric name</th><th>description</th></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.total}</td>
 * <td>The number of requests in the counter time window.</td></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.success}</td>
 * <td>The number of successful requests in the counter time window.</td></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.failure}</td>
 * <td>The number of failed requests in the counter time window.</td></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.transitionToClosed}</td>
 * <td>The number of circuit breaker state transitions to {@link CircuitState#CLOSED}.</td></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.transitionToOpen}</td>
 * <td>The number of circuit breaker state transitions to {@link CircuitState#OPEN}.</td></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.transitionToHalfOpen}</td>
 * <td>The number of circuit breaker state transitions to {@link CircuitState#HALF_OPEN}.</td></tr>
 *
 * <tr><td>{@code {prefix}.{circuit-breaker-name}.rejectedRequest}</td>
 * <td>The number of requests rejected by the circuit breaker.</td></tr>
 *
 * </table>
 */
public final class MetricCollectingCircuitBreakerListener implements CircuitBreakerListener {

    private final Metrics metrics;
    private final MetricKey prefix;

    /**
     * Creates a new instance with the default prefix {@code "circuitBreaker"}.
     */
    public MetricCollectingCircuitBreakerListener(Metrics metrics) {
        this(metrics, "circuitBreaker");
    }

    /**
     * Creates a new instance with the specified prefix.
     */
    public MetricCollectingCircuitBreakerListener(Metrics metrics, String... prefix) {
        this(metrics, new MetricKey(requireNonNull(prefix, "prefix")));
    }

    /**
     * Creates a new instance with the specified prefix.
     */
    public MetricCollectingCircuitBreakerListener(Metrics metrics, MetricKey prefix) {
        this.metrics = requireNonNull(metrics, "metrics");
        this.prefix = requireNonNull(prefix, "prefix");
    }

    @Override
    public void onStateChanged(CircuitBreaker circuitBreaker, CircuitState state) {
        metricsOf(circuitBreaker).onStateChanged(state);
    }

    @Override
    public void onEventCountUpdated(CircuitBreaker circuitBreaker, EventCount eventCount) {
        metricsOf(circuitBreaker).onCountUpdated(eventCount);
    }

    @Override
    public void onRequestRejected(CircuitBreaker circuitBreaker) {
        metricsOf(circuitBreaker).onRequestRejected();
    }

    private DefaultCircuitBreakerMetrics metricsOf(CircuitBreaker circuitBreaker) {
        final MetricKey key = prefix.append(circuitBreaker.name());
        DefaultCircuitBreakerMetrics res = metrics.group(key, DefaultCircuitBreakerMetrics.class);
        if (res != null) {
            return res;
        }

        return metrics.group(key, DefaultCircuitBreakerMetrics.class, DefaultCircuitBreakerMetrics::new);
    }
}
