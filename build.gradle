import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import java.util.concurrent.atomic.AtomicBoolean

plugins {
    id 'com.google.osdetector' version '1.6.2' apply false
    // If you want to change `org.jetbrains.kotlin.jvm` version,
    // you also need to change `org.jetbrains.kotlin:kotlin-allopen` version in `dependencies.yml`.
    id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false

    id 'net.ltgt.errorprone' version '1.2.1' apply false
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    // Set the artifactId of 'armeria-core' to 'armeria'.
    artifactIdOverrides = [':core': rootProject.name]
}

apply from: "${rootDir}/gradle/scripts/build-flags.gradle"

def javaTestHome = System.env.JAVA_TEST_HOME
if (javaTestHome) {
    logger.quiet("Overriding JVM for tests with ${javaTestHome}")
}

// Fail the build if the console contains 'LEAK:'.
def hasLeak = new AtomicBoolean()
gradle.buildFinished({ result ->
    if (hasLeak.get()) {
        throw new TestExecutionException('Found a leak while testing. ' +
                "Specify '-Pleak' option to record the detail and " +
                'find it using the following command: \n\n' +
                "    find . -type f -name 'TEST-*.xml' -exec grep -Fl 'LEAK: ' {} ';'\n")
    }
})

allprojects {
    // Add common JVM options such as max memory and leak detection.
    tasks.withType(JavaForkOptions) {
        maxHeapSize = '512m'

        // Enable leak detection when '-Pleak' option is specified.
        if (rootProject.hasProperty('leak')) {
            systemProperties 'io.netty.leakDetectionLevel': 'paranoid'
            systemProperties 'io.netty.leakDetection.targetRecords': '256'
        }
    }

    tasks.withType(Test) {
        // Do not omit stack frames for easier tracking.
        jvmArgs '-XX:-OmitStackTraceInFastThrow'
        // Use verbose exception/response reporting for easier debugging.
        systemProperty 'com.linecorp.armeria.verboseExceptions', 'true'
        systemProperty 'com.linecorp.armeria.verboseResponses', 'true'
        // Pass special system property to tell our tests that we are measuring coverage.
        if (project.hasFlags('coverage')) {
            systemProperty 'com.linecorp.armeria.testing.coverage', 'true'
        }
        // Use a different JRE for testing if necessary.
        if (javaTestHome) {
            executable "${javaTestHome}/bin/java"
        }
        // Parallelize if --parallel is on.
        if (gradle.startParameter.parallelProjectExecutionEnabled) {
            maxParallelForks = gradle.startParameter.maxWorkerCount
        }

        // Fail the build at the end if there was any leak.
        // We do not fail immediately so that we collect as many leaks as possible.
        doFirst {
            addTestOutputListener({ descriptor, event ->
                if (event.message.contains('LEAK: ')) {
                    hasLeak.set(true)
                }
            })
        }
    }
}

task checkJavaVersion {
    doLast {
        if (JavaVersion.current().majorVersion.toInteger() < 12) {
            throw new GradleException("The Java version used (${JavaVersion.current()}) is too old to " +
                    "build Armeria. Please use at least JDK 12. You can download a compatible JDK from " +
                    "https://adoptopenjdk.net/")
        }
    }
}

// Configure all Java projects
configure(projectsWithFlags('java')) {

    // Error Prone compiler
    if (!rootProject.hasProperty('noLint')) {
        apply plugin: 'net.ltgt.errorprone'

        dependencies {
            errorprone 'com.google.errorprone:error_prone_core'
        }

        tasks.withType(JavaCompile) {
            options.errorprone.excludedPaths = '.*/gen-src/.*'
        }
    }

    // Common dependencies
    dependencies {
        // All projects currently require ':core' (except itself)
        if (project != project(':core')) {
            api project(':core')
        }

        // Testing utilities
        testImplementation project(':testing-internal')

        // completable-futures
        implementation 'com.spotify:completable-futures'

        // Errorprone
        compileOnly 'com.google.errorprone:error_prone_annotations'

        // FastUtil
        implementation 'it.unimi.dsi:fastutil'

        // Guava
        implementation 'com.google.guava:guava'

        // J2ObjC annotations
        compileOnly 'com.google.j2objc:j2objc-annotations'

        // JSR305
        implementation 'com.google.code.findbugs:jsr305'

        // JCTools
        implementation 'org.jctools:jctools-core'

        // Jetty ALPN support
        compileOnly 'org.eclipse.jetty.alpn:alpn-api'

        // Logging
        implementation 'org.slf4j:slf4j-api'
        testImplementation 'org.slf4j:jul-to-slf4j'
        testImplementation 'ch.qos.logback:logback-classic'
        ['jcl-over-slf4j', 'log4j-over-slf4j'].each {
            testRuntimeOnly "org.slf4j:$it"
        }

        // Reflections
        implementation 'org.reflections:reflections'

        // Test-time dependencies
        testImplementation 'com.google.guava:guava-testlib'
        testImplementation 'junit:junit'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.platform:junit-platform-commons'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
        testImplementation 'net.javacrumbs.json-unit:json-unit'
        testImplementation 'net.javacrumbs.json-unit:json-unit-fluent'
        testImplementation 'org.awaitility:awaitility'
        testRuntimeOnly 'org.checkerframework:checker-compat-qual' // Required by guava-testlib
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.apache.httpcomponents:httpclient'
        testImplementation 'org.hamcrest:hamcrest'
        testImplementation 'org.hamcrest:hamcrest-library'
    }

    // Target Java 8.
    tasks.withType(JavaCompile) {
        options.compilerArgs += ['--release', '8']

        dependsOn checkJavaVersion
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

// Configure the Javadoc tasks of all projects.
allprojects {
    tasks.withType(Javadoc) {
        options {
            // Groups
            group 'Server', 'com.linecorp.armeria.server*'
            group 'Client', 'com.linecorp.armeria.client*'
            group 'Common', 'com.linecorp.armeria.common*'

            // Exclude the machine-generated or internal-only classes
            exclude '**/Tomcat*ProtocolHandler.java'
            exclude '**/internal/**'
            exclude '**/thrift/v1/**'
            exclude '**/reactor/core/scheduler/**'
        }
    }
}

// Require to use JDK 13 when releasing.
tasks.release.doFirst {
    if (JavaVersion.current() != JavaVersion.VERSION_13) {
        throw new IllegalStateException("You must release using JDK 13.");
    }
}
