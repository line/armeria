/*
 * Copyright 2015 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.armeria.server.thrift;

import static java.util.Objects.requireNonNull;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.Set;

import com.linecorp.armeria.common.SerializationFormat;
import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
import com.linecorp.armeria.server.Service;
import com.linecorp.armeria.server.SimpleService;

/**
 * A {@link Service} that handles a Thrift call.
 *
 * @see ThriftProtocolFactories
 */
public class ThriftService extends SimpleService {

    /**
     * Creates a new instance with the specified service implementation, supporting all thrift protocols and
     * defaulting to {@link SerializationFormat#THRIFT_BINARY TBinary} protocol when the client doesn't
     * specify one. Currently, the only way to specify a serialization format is by using the HTTP session
     * protocol and setting the Content-Type header to the appropriate {@link SerializationFormat#mimeType}.
     *
     * @param thriftService an implementation of {@code *.Iface} or {@code *.AsyncIface} service interface
     *                      generated by the Apache Thrift compiler
     */
    public static ThriftService of(Object thriftService) {
        return of(thriftService, SerializationFormat.THRIFT_BINARY);
    }

    /**
     * Creates a new instance with the specified service implementation and supporting all thrift protocols and
     * defaulting to the specified {@code defaultSerializationFormat} when the client doesn't
     * specify one. Currently, the only way to specify a serialization format is by using the HTTP session
     * protocol and setting the Content-Type header to the appropriate {@link SerializationFormat#mimeType}.
     *
     * @param thriftService an implementation of {@code *.Iface} or {@code *.AsyncIface} service interface
     *                      generated by the  Apache Thrift compiler
     * @param defaultSerializationFormat the default serialization format to use when not specified by the
     *                                   client
     */
    public static ThriftService of(Object thriftService, SerializationFormat defaultSerializationFormat) {
        return new ThriftService(
                new ThriftServiceCodec(
                        thriftService, defaultSerializationFormat, SerializationFormat.ofThrift()),
                new ThriftServiceInvocationHandler(thriftService));
    }

    /**
     * Creates a new instance with the specified service implementation and supporting only the formats
     * specified, defaulting to the specified {@code defaultSerializationFormat} when the client doesn't specify
     * one. Currently, the only way to specify a serialization format is by using the HTTP session protocol and
     * setting the Content-Type header to the appropriate {@link SerializationFormat#mimeType}.
     *
     * @param thriftService an implementation of {@code *.Iface} or {@code *.AsyncIface} service interface
     *                      generated by the  Apache Thrift compiler
     * @param defaultSerializationFormat the default serialization format to use when not specified by the
     *                                   client
     * @param otherAllowedSerializationFormats other serialization formats that should be supported by this
     *                                         service in addition to the default
     */
    public static ThriftService ofFormats(Object thriftService, SerializationFormat defaultSerializationFormat,
                                          SerializationFormat... otherAllowedSerializationFormats) {
        requireNonNull(otherAllowedSerializationFormats, "otherAllowedSerializationFormats");
        return ofFormats(thriftService, defaultSerializationFormat, Arrays.asList(otherAllowedSerializationFormats));
    }

    /**
     * Creates a new instance with the specified service implementation and supporting the protocols specified
     * in {@code allowedSerializationFormats} and defaulting to the specified {@code defaultSerializationFormat}
     * when the client doesn't specify one. Currently, the only way to specify a serialization format is by
     * using the HTTP session protocol and setting the Content-Type header to the appropriate
     * {@link SerializationFormat#mimeType}.
     *
     * @param thriftService an implementation of {@code *.Iface} or {@code *.AsyncIface} service interface
     *                      generated by the  Apache Thrift compiler
     * @param defaultSerializationFormat the default serialization format to use when not specified by the
     *                                   client
     * @param otherAllowedSerializationFormats other serialization formats that should be supported by this
     *                                         service in addition to the default
     */
    public static ThriftService ofFormats(Object thriftService, SerializationFormat defaultSerializationFormat,
                                          Iterable<SerializationFormat> otherAllowedSerializationFormats) {
        requireNonNull(otherAllowedSerializationFormats, "otherAllowedSerializationFormats");
        EnumSet<SerializationFormat> allowedSerializationFormatsSet = EnumSet.of(defaultSerializationFormat);
        otherAllowedSerializationFormats.forEach(allowedSerializationFormatsSet::add);
        return new ThriftService(
                new ThriftServiceCodec(
                        thriftService,
                        defaultSerializationFormat,
                        allowedSerializationFormatsSet),
                new ThriftServiceInvocationHandler(thriftService));
    }

    /**
     * Returns the Thrift service object that implements {@code *.Iface} or {@code *.AsyncIface}.
     */
    public Object implementation() {
        return ((ThriftServiceCodec) codec()).implementation();
    }

    /**
     * Returns the Thrift service interfaces ({@code *.Iface} or {@code *.AsyncIface}) the Thrift service
     * object implements.
     */
    public Set<Class<?>> interfaces() {
        return ((ThriftServiceCodec) codec()).interfaces();
    }

    /**
     * Returns the allowed serialization formats of this service.
     */
    public Set<SerializationFormat> allowedSerializationFormats() {
        return ((ThriftServiceCodec) codec()).allowedSerializationFormats();
    }

    /**
     * Returns the default serialization format of this service.
     */
    public SerializationFormat defaultSerializationFormat() {
        return ((ThriftServiceCodec) codec()).defaultSerializationFormat();
    }

    private ThriftService(ThriftServiceCodec codec,
                          ThriftServiceInvocationHandler handler) {
        super(codec, handler);
    }
}
