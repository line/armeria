import net.davidecavestro.gradle.jxr.JxrLog
import org.apache.maven.jxr.JXR

import java.time.LocalDateTime

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'kr.motd.gradle:sphinx-gradle-plugin:1.0.2.Final'
        classpath 'gradle.plugin.net.davidecavestro:gradle-jxr-plugin:0.2.1'
    }
}

apply plugin: 'base'
apply plugin: 'kr.motd.sphinx'

ext.copyrightFooter =
        '&copy; Copyright ' + "${project.property('inceptionYear')}&ndash;${LocalDateTime.now().year} " +
        '<a href="http://linecorp.com/en/">LINE Corporation</a>. ' +
        'All rights reserved.'

sphinx {
    group = 'Documentation'
    description = 'Generates the Sphinx web site.'
    sourceDirectory "${project.projectDir}/src/sphinx"
}

task javadoc(type: Javadoc,
             group: 'Documentation',
             description: 'Generates Javadoc API documentation for the main source code.') {

    destinationDir = project.file("${project.buildDir}/site/apidocs")
    publishedJavaProjects.each { source it.sourceSets.main.java.srcDirs }
    classpath = publishedJavaProjects.inject(project.files()) { result, project ->
        result.from(project.sourceSets.main.runtimeClasspath)
    }

    options {
        def title = "Armeria ${project.version} API reference"
        docTitle = title
        windowTitle = title
        bottom = project.ext.copyrightFooter +
                 '<script>' + // Open an external link in a new tab/window.
                 'for(var i in document.links) {' +
                 '  var l = document.links[i];' +
                 '  if (l.href.indexOf("http") === 0) {' +
                 '    l.target = "_blank";' +
                 '  }' +
                 '}' +
                 '</script>'

        encoding = 'UTF-8'
        docEncoding = 'UTF-8'
        breakIterator = true
        version = false
        author = false
        keyWords = false
        quiet()
        stylesheetFile = project.file("${project.projectDir}/src/apidocs/stylesheet.css")

        // Enable all lints except the missing tag warnings
        addBooleanOption('Xdoclint:all').value = true
        addBooleanOption('Xdoclint:-missing').value = true

        // Exclude the machine-generate or internal-only classes
        exclude '**/Tomcat*ProtocolHandler.java'
        exclude '**/internal/**'
        exclude '**/thrift/v1/**'

        // Groups
        group 'Server', 'com.linecorp.armeria.server*'
        group 'Client', 'com.linecorp.armeria.client*'
        group 'Common', 'com.linecorp.armeria.common*'

        // External Javadoc links
        links 'http://www.slf4j.org/api/',
              'https://netty.io/4.1/api/',
              'https://developers.google.com/protocol-buffers/docs/reference/java/',
              'https://people.apache.org/~thejas/thrift-0.9/javadoc/',
              'http://logback.qos.ch/apidocs/'
    }
}

task xref(group: 'Documentation',
          description: 'Generates the source cross-reference.') {

    def outputDir = "${project.buildDir}/site/xref"
    def sourceDirs = publishedJavaProjects.inject([]) { srcDirs, project ->
        project.sourceSets.main.java.srcDirs.each { srcDirs << it.path }
        return srcDirs
    }

    inputs.dir sourceDirs
    outputs.dir outputDir

    doLast {
        JXR jxr = new JXR()
        jxr.dest = outputDir
        jxr.inputEncoding = 'UTF-8'
        jxr.outputEncoding = 'UTF-8'
        jxr.log = new JxrLog(logger: logger)

        def title = "Armeria ${project.version} cross-reference"
        jxr.xref(sourceDirs, 'templates', title, title, project.ext.copyrightFooter)
        ant.copy(file: "${project.projectDir}/src/xref/stylesheet.css", todir: jxr.dest)
    }
}

tasks.site {
    group = 'Documentation'
    description = 'Generates the project web site.'
    dependsOn xref
    dependsOn javadoc
}

tasks.build.dependsOn(tasks.site)
