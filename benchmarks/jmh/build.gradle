plugins {
    alias libs.plugins.jmh
}

dependencies {
    implementation project(':grpc')
    implementation project(':grpc-protocol')
    implementation project(':retrofit2')
    if (project.ext.targetJavaVersion >= 11) {
        implementation project(':thrift0.18')
    } else {
        implementation project(':thrift0.17')
    }
    implementation project(':kotlin')

    implementation libs.retrofit2.converter.jackson
    implementation libs.protobuf.java.util
    implementation libs.grpc.okhttp
    implementation libs.grpc.netty.shaded
    implementation libs.awaitility
    implementation libs.kotlin.coroutines.core

    jmh libs.jmh.extras

    implementation project(':testing-internal')
}

tasks.sourcesJar.dependsOn(tasks.compileJmhThrift)

jmh {
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
    jmhVersion = libs.versions.jmh.core.get()

    def jmhIncludes = rootProject.findProperty('jmh.includes')
    if (jmhIncludes) {
        includes = jmhIncludes.split(',') as List
    }

    if (rootProject.hasProperty('jmh.fork')) {
        fork = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.fork')))
    } else {
        fork = 1
    }

    if (rootProject.hasProperty('jmh.iterations')) {
        iterations = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.iterations')))
    }

    if (rootProject.hasProperty('jmh.warmupIterations')) {
        warmupIterations = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.warmupIterations')))
    } else {
        warmupIterations = iterations
    }

    if (rootProject.hasProperty('jmh.profilers')) {
        profilers = String.valueOf(rootProject.findProperty('jmh.profilers')).split(',').toList()
    }

    if (rootProject.hasProperty('jmh.threads')) {
        threads = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.threads')))
    }

    if (rootProject.hasProperty('jmh.verbose')) {
        verbosity = 'EXTRA'
    }

    if (rootProject.hasProperty('jmh.jvmargs')) {
        jvmArgsAppend = String.valueOf(rootProject.findProperty('jmh.jvmargs')).split(' ').toList()
    }

    if (rootProject.hasProperty('jmh.forceGC')) {
        forceGC = 'true'.equals(rootProject.findProperty('jmh.forceGC'))
    } else {
        forceGC = true
    }

    if (rootProject.hasProperty('jmh.params')) {
        def parameters = [:]
        rootProject.findProperty('jmh.params').split(';').each {
            def parts = it.split('=')
            parameters[parts[0]] = rootProject.objects.listProperty(String).value(parts[1].tokenize(','))
        }
        benchmarkParameters = parameters
    }
}

// Workaround a bug where the conflict of output path between 'benchmarks.jmh' and 'benchmarks.test' in IDEA
project.afterEvaluate {
    idea {
        module {
            testSourceDirs = []
        }
    }
}
