/**
 * Autogenerated by Thrift Compiler (0.9.1-LINE)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.armeria.service.test.thrift.main;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FooService {

  public interface Iface {

    public void bar1() throws FooServiceException, org.apache.thrift.TException;

    public String bar2() throws FooServiceException, org.apache.thrift.TException;

    public FooStruct bar3(int intVal, FooStruct foo) throws FooServiceException, org.apache.thrift.TException;

    public List<FooStruct> bar4(List<FooStruct> foos) throws FooServiceException, org.apache.thrift.TException;

    public Map<String,FooStruct> bar5(Map<String,FooStruct> foos) throws FooServiceException, org.apache.thrift.TException;

    public void bar6(String foo1, FooStruct foo2, FooEnum foo3, Map<String,String> foo4, List<String> foo5, Set<String> foo6, List<List<FooStruct>> foo7, List<List<FooStruct>> foo8) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bar1(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bar2(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bar3(int intVal, FooStruct foo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bar4(List<FooStruct> foos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bar5(Map<String,FooStruct> foos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bar6(String foo1, FooStruct foo2, FooEnum foo3, Map<String,String> foo4, List<String> foo5, Set<String> foo6, List<List<FooStruct>> foo7, List<List<FooStruct>> foo8, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void bar1() throws FooServiceException, org.apache.thrift.TException
    {
      send_bar1();
      recv_bar1();
    }

    public void send_bar1() throws org.apache.thrift.TException
    {
      bar1_args args = new bar1_args();
      sendBase("bar1", args);
    }

    public void recv_bar1() throws FooServiceException, org.apache.thrift.TException
    {
      bar1_result result = new bar1_result();
      receiveBase(result, "bar1");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String bar2() throws FooServiceException, org.apache.thrift.TException
    {
      send_bar2();
      return recv_bar2();
    }

    public void send_bar2() throws org.apache.thrift.TException
    {
      bar2_args args = new bar2_args();
      sendBase("bar2", args);
    }

    public String recv_bar2() throws FooServiceException, org.apache.thrift.TException
    {
      bar2_result result = new bar2_result();
      receiveBase(result, "bar2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bar2 failed: unknown result");
    }

    public FooStruct bar3(int intVal, FooStruct foo) throws FooServiceException, org.apache.thrift.TException
    {
      send_bar3(intVal, foo);
      return recv_bar3();
    }

    public void send_bar3(int intVal, FooStruct foo) throws org.apache.thrift.TException
    {
      bar3_args args = new bar3_args();
      args.setIntVal(intVal);
      args.setFoo(foo);
      sendBase("bar3", args);
    }

    public FooStruct recv_bar3() throws FooServiceException, org.apache.thrift.TException
    {
      bar3_result result = new bar3_result();
      receiveBase(result, "bar3");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bar3 failed: unknown result");
    }

    public List<FooStruct> bar4(List<FooStruct> foos) throws FooServiceException, org.apache.thrift.TException
    {
      send_bar4(foos);
      return recv_bar4();
    }

    public void send_bar4(List<FooStruct> foos) throws org.apache.thrift.TException
    {
      bar4_args args = new bar4_args();
      args.setFoos(foos);
      sendBase("bar4", args);
    }

    public List<FooStruct> recv_bar4() throws FooServiceException, org.apache.thrift.TException
    {
      bar4_result result = new bar4_result();
      receiveBase(result, "bar4");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bar4 failed: unknown result");
    }

    public Map<String,FooStruct> bar5(Map<String,FooStruct> foos) throws FooServiceException, org.apache.thrift.TException
    {
      send_bar5(foos);
      return recv_bar5();
    }

    public void send_bar5(Map<String,FooStruct> foos) throws org.apache.thrift.TException
    {
      bar5_args args = new bar5_args();
      args.setFoos(foos);
      sendBase("bar5", args);
    }

    public Map<String,FooStruct> recv_bar5() throws FooServiceException, org.apache.thrift.TException
    {
      bar5_result result = new bar5_result();
      receiveBase(result, "bar5");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bar5 failed: unknown result");
    }

    public void bar6(String foo1, FooStruct foo2, FooEnum foo3, Map<String,String> foo4, List<String> foo5, Set<String> foo6, List<List<FooStruct>> foo7, List<List<FooStruct>> foo8) throws org.apache.thrift.TException
    {
      send_bar6(foo1, foo2, foo3, foo4, foo5, foo6, foo7, foo8);
      recv_bar6();
    }

    public void send_bar6(String foo1, FooStruct foo2, FooEnum foo3, Map<String,String> foo4, List<String> foo5, Set<String> foo6, List<List<FooStruct>> foo7, List<List<FooStruct>> foo8) throws org.apache.thrift.TException
    {
      bar6_args args = new bar6_args();
      args.setFoo1(foo1);
      args.setFoo2(foo2);
      args.setFoo3(foo3);
      args.setFoo4(foo4);
      args.setFoo5(foo5);
      args.setFoo6(foo6);
      args.setFoo7(foo7);
      args.setFoo8(foo8);
      sendBase("bar6", args);
    }

    public void recv_bar6() throws org.apache.thrift.TException
    {
      bar6_result result = new bar6_result();
      receiveBase(result, "bar6");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bar1(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar1_call method_call = new bar1_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar1_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bar1_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar1", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar1_args args = new bar1_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws FooServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bar1();
      }
    }

    public void bar2(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar2_call method_call = new bar2_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar2_call extends org.apache.thrift.async.TAsyncMethodCall {
      public bar2_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar2_args args = new bar2_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws FooServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bar2();
      }
    }

    public void bar3(int intVal, FooStruct foo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar3_call method_call = new bar3_call(intVal, foo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar3_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int intVal;
      private FooStruct foo;
      public bar3_call(int intVal, FooStruct foo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.intVal = intVal;
        this.foo = foo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar3_args args = new bar3_args();
        args.setIntVal(intVal);
        args.setFoo(foo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FooStruct getResult() throws FooServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bar3();
      }
    }

    public void bar4(List<FooStruct> foos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar4_call method_call = new bar4_call(foos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar4_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<FooStruct> foos;
      public bar4_call(List<FooStruct> foos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foos = foos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar4", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar4_args args = new bar4_args();
        args.setFoos(foos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FooStruct> getResult() throws FooServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bar4();
      }
    }

    public void bar5(Map<String,FooStruct> foos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar5_call method_call = new bar5_call(foos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar5_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,FooStruct> foos;
      public bar5_call(Map<String,FooStruct> foos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foos = foos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar5", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar5_args args = new bar5_args();
        args.setFoos(foos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,FooStruct> getResult() throws FooServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bar5();
      }
    }

    public void bar6(String foo1, FooStruct foo2, FooEnum foo3, Map<String,String> foo4, List<String> foo5, Set<String> foo6, List<List<FooStruct>> foo7, List<List<FooStruct>> foo8, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar6_call method_call = new bar6_call(foo1, foo2, foo3, foo4, foo5, foo6, foo7, foo8, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar6_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String foo1;
      private FooStruct foo2;
      private FooEnum foo3;
      private Map<String,String> foo4;
      private List<String> foo5;
      private Set<String> foo6;
      private List<List<FooStruct>> foo7;
      private List<List<FooStruct>> foo8;
      public bar6_call(String foo1, FooStruct foo2, FooEnum foo3, Map<String,String> foo4, List<String> foo5, Set<String> foo6, List<List<FooStruct>> foo7, List<List<FooStruct>> foo8, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foo1 = foo1;
        this.foo2 = foo2;
        this.foo3 = foo3;
        this.foo4 = foo4;
        this.foo5 = foo5;
        this.foo6 = foo6;
        this.foo7 = foo7;
        this.foo8 = foo8;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar6", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar6_args args = new bar6_args();
        args.setFoo1(foo1);
        args.setFoo2(foo2);
        args.setFoo3(foo3);
        args.setFoo4(foo4);
        args.setFoo5(foo5);
        args.setFoo6(foo6);
        args.setFoo7(foo7);
        args.setFoo8(foo8);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bar6();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bar1", new bar1());
      processMap.put("bar2", new bar2());
      processMap.put("bar3", new bar3());
      processMap.put("bar4", new bar4());
      processMap.put("bar5", new bar5());
      processMap.put("bar6", new bar6());
      return processMap;
    }

    public static class bar1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar1_args> {
      public bar1() {
        super("bar1");
      }

      public bar1_args getEmptyArgsInstance() {
        return new bar1_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bar1_result getResult(I iface, bar1_args args) throws org.apache.thrift.TException {
        bar1_result result = new bar1_result();
        try {
          iface.bar1();
        } catch (FooServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bar2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar2_args> {
      public bar2() {
        super("bar2");
      }

      public bar2_args getEmptyArgsInstance() {
        return new bar2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bar2_result getResult(I iface, bar2_args args) throws org.apache.thrift.TException {
        bar2_result result = new bar2_result();
        try {
          result.success = iface.bar2();
        } catch (FooServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bar3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar3_args> {
      public bar3() {
        super("bar3");
      }

      public bar3_args getEmptyArgsInstance() {
        return new bar3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bar3_result getResult(I iface, bar3_args args) throws org.apache.thrift.TException {
        bar3_result result = new bar3_result();
        try {
          result.success = iface.bar3(args.intVal, args.foo);
        } catch (FooServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bar4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar4_args> {
      public bar4() {
        super("bar4");
      }

      public bar4_args getEmptyArgsInstance() {
        return new bar4_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bar4_result getResult(I iface, bar4_args args) throws org.apache.thrift.TException {
        bar4_result result = new bar4_result();
        try {
          result.success = iface.bar4(args.foos);
        } catch (FooServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bar5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar5_args> {
      public bar5() {
        super("bar5");
      }

      public bar5_args getEmptyArgsInstance() {
        return new bar5_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bar5_result getResult(I iface, bar5_args args) throws org.apache.thrift.TException {
        bar5_result result = new bar5_result();
        try {
          result.success = iface.bar5(args.foos);
        } catch (FooServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class bar6<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar6_args> {
      public bar6() {
        super("bar6");
      }

      public bar6_args getEmptyArgsInstance() {
        return new bar6_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bar6_result getResult(I iface, bar6_args args) throws org.apache.thrift.TException {
        bar6_result result = new bar6_result();
        iface.bar6(args.foo1, args.foo2, args.foo3, args.foo4, args.foo5, args.foo6, args.foo7, args.foo8);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("bar1", new bar1());
      processMap.put("bar2", new bar2());
      processMap.put("bar3", new bar3());
      processMap.put("bar4", new bar4());
      processMap.put("bar5", new bar5());
      processMap.put("bar6", new bar6());
      return processMap;
    }

    public static class bar1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bar1_args, Void> {
      public bar1() {
        super("bar1");
      }

      public bar1_args getEmptyArgsInstance() {
        return new bar1_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bar1_result result = new bar1_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bar1_result result = new bar1_result();
            if (e instanceof FooServiceException) {
                        result.e = (FooServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bar1_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bar1(resultHandler);
      }
    }

    public static class bar2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bar2_args, String> {
      public bar2() {
        super("bar2");
      }

      public bar2_args getEmptyArgsInstance() {
        return new bar2_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            bar2_result result = new bar2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bar2_result result = new bar2_result();
            if (e instanceof FooServiceException) {
                        result.e = (FooServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bar2_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.bar2(resultHandler);
      }
    }

    public static class bar3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bar3_args, FooStruct> {
      public bar3() {
        super("bar3");
      }

      public bar3_args getEmptyArgsInstance() {
        return new bar3_args();
      }

      public AsyncMethodCallback<FooStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FooStruct>() { 
          public void onComplete(FooStruct o) {
            bar3_result result = new bar3_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bar3_result result = new bar3_result();
            if (e instanceof FooServiceException) {
                        result.e = (FooServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bar3_args args, org.apache.thrift.async.AsyncMethodCallback<FooStruct> resultHandler) throws TException {
        iface.bar3(args.intVal, args.foo,resultHandler);
      }
    }

    public static class bar4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bar4_args, List<FooStruct>> {
      public bar4() {
        super("bar4");
      }

      public bar4_args getEmptyArgsInstance() {
        return new bar4_args();
      }

      public AsyncMethodCallback<List<FooStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FooStruct>>() { 
          public void onComplete(List<FooStruct> o) {
            bar4_result result = new bar4_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bar4_result result = new bar4_result();
            if (e instanceof FooServiceException) {
                        result.e = (FooServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bar4_args args, org.apache.thrift.async.AsyncMethodCallback<List<FooStruct>> resultHandler) throws TException {
        iface.bar4(args.foos,resultHandler);
      }
    }

    public static class bar5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bar5_args, Map<String,FooStruct>> {
      public bar5() {
        super("bar5");
      }

      public bar5_args getEmptyArgsInstance() {
        return new bar5_args();
      }

      public AsyncMethodCallback<Map<String,FooStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,FooStruct>>() { 
          public void onComplete(Map<String,FooStruct> o) {
            bar5_result result = new bar5_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bar5_result result = new bar5_result();
            if (e instanceof FooServiceException) {
                        result.e = (FooServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bar5_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,FooStruct>> resultHandler) throws TException {
        iface.bar5(args.foos,resultHandler);
      }
    }

    public static class bar6<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bar6_args, Void> {
      public bar6() {
        super("bar6");
      }

      public bar6_args getEmptyArgsInstance() {
        return new bar6_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            bar6_result result = new bar6_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bar6_result result = new bar6_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bar6_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.bar6(args.foo1, args.foo2, args.foo3, args.foo4, args.foo5, args.foo6, args.foo7, args.foo8,resultHandler);
      }
    }

  }

  public static class bar1_args implements org.apache.thrift.TBase<bar1_args, bar1_args._Fields>, java.io.Serializable, Cloneable, Comparable<bar1_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar1_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar1_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar1_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar1_args.class, metaDataMap);
    }

    public bar1_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar1_args(bar1_args other) {
    }

    public bar1_args deepCopy() {
      return new bar1_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar1_args)
        return this.equals((bar1_args)that);
      return false;
    }

    public boolean equals(bar1_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar1_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar1_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar1_argsStandardSchemeFactory implements SchemeFactory {
      public bar1_argsStandardScheme getScheme() {
        return new bar1_argsStandardScheme();
      }
    }

    private static class bar1_argsStandardScheme extends StandardScheme<bar1_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar1_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar1_argsTupleSchemeFactory implements SchemeFactory {
      public bar1_argsTupleScheme getScheme() {
        return new bar1_argsTupleScheme();
      }
    }

    private static class bar1_argsTupleScheme extends TupleScheme<bar1_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bar1_result implements org.apache.thrift.TBase<bar1_result, bar1_result._Fields>, java.io.Serializable, Cloneable, Comparable<bar1_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar1_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar1_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar1_resultTupleSchemeFactory());
    }

    public FooServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar1_result.class, metaDataMap);
    }

    public bar1_result() {
    }

    public bar1_result(
      FooServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar1_result(bar1_result other) {
      if (other.isSetE()) {
        this.e = new FooServiceException(other.e);
      }
    }

    public bar1_result deepCopy() {
      return new bar1_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public FooServiceException getE() {
      return this.e;
    }

    public bar1_result setE(FooServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((FooServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar1_result)
        return this.equals((bar1_result)that);
      return false;
    }

    public boolean equals(bar1_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar1_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar1_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar1_resultStandardSchemeFactory implements SchemeFactory {
      public bar1_resultStandardScheme getScheme() {
        return new bar1_resultStandardScheme();
      }
    }

    private static class bar1_resultStandardScheme extends StandardScheme<bar1_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new FooServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar1_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar1_resultTupleSchemeFactory implements SchemeFactory {
      public bar1_resultTupleScheme getScheme() {
        return new bar1_resultTupleScheme();
      }
    }

    private static class bar1_resultTupleScheme extends TupleScheme<bar1_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new FooServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class bar2_args implements org.apache.thrift.TBase<bar2_args, bar2_args._Fields>, java.io.Serializable, Cloneable, Comparable<bar2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar2_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar2_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar2_args.class, metaDataMap);
    }

    public bar2_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar2_args(bar2_args other) {
    }

    public bar2_args deepCopy() {
      return new bar2_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar2_args)
        return this.equals((bar2_args)that);
      return false;
    }

    public boolean equals(bar2_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar2_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar2_argsStandardSchemeFactory implements SchemeFactory {
      public bar2_argsStandardScheme getScheme() {
        return new bar2_argsStandardScheme();
      }
    }

    private static class bar2_argsStandardScheme extends StandardScheme<bar2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar2_argsTupleSchemeFactory implements SchemeFactory {
      public bar2_argsTupleScheme getScheme() {
        return new bar2_argsTupleScheme();
      }
    }

    private static class bar2_argsTupleScheme extends TupleScheme<bar2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class bar2_result implements org.apache.thrift.TBase<bar2_result, bar2_result._Fields>, java.io.Serializable, Cloneable, Comparable<bar2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar2_resultTupleSchemeFactory());
    }

    public String success; // required
    public FooServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar2_result.class, metaDataMap);
    }

    public bar2_result() {
    }

    public bar2_result(
      String success,
      FooServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar2_result(bar2_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new FooServiceException(other.e);
      }
    }

    public bar2_result deepCopy() {
      return new bar2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public bar2_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FooServiceException getE() {
      return this.e;
    }

    public bar2_result setE(FooServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((FooServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar2_result)
        return this.equals((bar2_result)that);
      return false;
    }

    public boolean equals(bar2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar2_resultStandardSchemeFactory implements SchemeFactory {
      public bar2_resultStandardScheme getScheme() {
        return new bar2_resultStandardScheme();
      }
    }

    private static class bar2_resultStandardScheme extends StandardScheme<bar2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new FooServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar2_resultTupleSchemeFactory implements SchemeFactory {
      public bar2_resultTupleScheme getScheme() {
        return new bar2_resultTupleScheme();
      }
    }

    private static class bar2_resultTupleScheme extends TupleScheme<bar2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new FooServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class bar3_args implements org.apache.thrift.TBase<bar3_args, bar3_args._Fields>, java.io.Serializable, Cloneable, Comparable<bar3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar3_args");

    private static final org.apache.thrift.protocol.TField INT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("intVal", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FOO_FIELD_DESC = new org.apache.thrift.protocol.TField("foo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar3_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar3_argsTupleSchemeFactory());
    }

    public int intVal; // required
    public FooStruct foo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INT_VAL((short)1, "intVal"),
      FOO((short)2, "foo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INT_VAL
            return INT_VAL;
          case 2: // FOO
            return FOO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INTVAL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INT_VAL, new org.apache.thrift.meta_data.FieldMetaData("intVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FOO, new org.apache.thrift.meta_data.FieldMetaData("foo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar3_args.class, metaDataMap);
    }

    public bar3_args() {
    }

    public bar3_args(
      int intVal,
      FooStruct foo)
    {
      this();
      this.intVal = intVal;
      setIntValIsSet(true);
      this.foo = foo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar3_args(bar3_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.intVal = other.intVal;
      if (other.isSetFoo()) {
        this.foo = new FooStruct(other.foo);
      }
    }

    public bar3_args deepCopy() {
      return new bar3_args(this);
    }

    @Override
    public void clear() {
      setIntValIsSet(false);
      this.intVal = 0;
      this.foo = null;
    }

    public int getIntVal() {
      return this.intVal;
    }

    public bar3_args setIntVal(int intVal) {
      this.intVal = intVal;
      setIntValIsSet(true);
      return this;
    }

    public void unsetIntVal() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTVAL_ISSET_ID);
    }

    /** Returns true if field intVal is set (has been assigned a value) and false otherwise */
    public boolean isSetIntVal() {
      return EncodingUtils.testBit(__isset_bitfield, __INTVAL_ISSET_ID);
    }

    public void setIntValIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTVAL_ISSET_ID, value);
    }

    public FooStruct getFoo() {
      return this.foo;
    }

    public bar3_args setFoo(FooStruct foo) {
      this.foo = foo;
      return this;
    }

    public void unsetFoo() {
      this.foo = null;
    }

    /** Returns true if field foo is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo() {
      return this.foo != null;
    }

    public void setFooIsSet(boolean value) {
      if (!value) {
        this.foo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INT_VAL:
        if (value == null) {
          unsetIntVal();
        } else {
          setIntVal((Integer)value);
        }
        break;

      case FOO:
        if (value == null) {
          unsetFoo();
        } else {
          setFoo((FooStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INT_VAL:
        return Integer.valueOf(getIntVal());

      case FOO:
        return getFoo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INT_VAL:
        return isSetIntVal();
      case FOO:
        return isSetFoo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar3_args)
        return this.equals((bar3_args)that);
      return false;
    }

    public boolean equals(bar3_args that) {
      if (that == null)
        return false;

      boolean this_present_intVal = true;
      boolean that_present_intVal = true;
      if (this_present_intVal || that_present_intVal) {
        if (!(this_present_intVal && that_present_intVal))
          return false;
        if (this.intVal != that.intVal)
          return false;
      }

      boolean this_present_foo = true && this.isSetFoo();
      boolean that_present_foo = true && that.isSetFoo();
      if (this_present_foo || that_present_foo) {
        if (!(this_present_foo && that_present_foo))
          return false;
        if (!this.foo.equals(that.foo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIntVal()).compareTo(other.isSetIntVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIntVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intVal, other.intVal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo()).compareTo(other.isSetFoo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo, other.foo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar3_args(");
      boolean first = true;

      sb.append("intVal:");
      sb.append(this.intVal);
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo:");
      if (this.foo == null) {
        sb.append("null");
      } else {
        sb.append(this.foo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (foo != null) {
        foo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar3_argsStandardSchemeFactory implements SchemeFactory {
      public bar3_argsStandardScheme getScheme() {
        return new bar3_argsStandardScheme();
      }
    }

    private static class bar3_argsStandardScheme extends StandardScheme<bar3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INT_VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.intVal = iprot.readI32();
                struct.setIntValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foo = new FooStruct();
                struct.foo.read(iprot);
                struct.setFooIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INT_VAL_FIELD_DESC);
        oprot.writeI32(struct.intVal);
        oprot.writeFieldEnd();
        if (struct.foo != null) {
          oprot.writeFieldBegin(FOO_FIELD_DESC);
          struct.foo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar3_argsTupleSchemeFactory implements SchemeFactory {
      public bar3_argsTupleScheme getScheme() {
        return new bar3_argsTupleScheme();
      }
    }

    private static class bar3_argsTupleScheme extends TupleScheme<bar3_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIntVal()) {
          optionals.set(0);
        }
        if (struct.isSetFoo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIntVal()) {
          oprot.writeI32(struct.intVal);
        }
        if (struct.isSetFoo()) {
          struct.foo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.intVal = iprot.readI32();
          struct.setIntValIsSet(true);
        }
        if (incoming.get(1)) {
          struct.foo = new FooStruct();
          struct.foo.read(iprot);
          struct.setFooIsSet(true);
        }
      }
    }

  }

  public static class bar3_result implements org.apache.thrift.TBase<bar3_result, bar3_result._Fields>, java.io.Serializable, Cloneable, Comparable<bar3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar3_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar3_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar3_resultTupleSchemeFactory());
    }

    public FooStruct success; // required
    public FooServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooStruct.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar3_result.class, metaDataMap);
    }

    public bar3_result() {
    }

    public bar3_result(
      FooStruct success,
      FooServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar3_result(bar3_result other) {
      if (other.isSetSuccess()) {
        this.success = new FooStruct(other.success);
      }
      if (other.isSetE()) {
        this.e = new FooServiceException(other.e);
      }
    }

    public bar3_result deepCopy() {
      return new bar3_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public FooStruct getSuccess() {
      return this.success;
    }

    public bar3_result setSuccess(FooStruct success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FooServiceException getE() {
      return this.e;
    }

    public bar3_result setE(FooServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FooStruct)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((FooServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar3_result)
        return this.equals((bar3_result)that);
      return false;
    }

    public boolean equals(bar3_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar3_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar3_resultStandardSchemeFactory implements SchemeFactory {
      public bar3_resultStandardScheme getScheme() {
        return new bar3_resultStandardScheme();
      }
    }

    private static class bar3_resultStandardScheme extends StandardScheme<bar3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FooStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new FooServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar3_resultTupleSchemeFactory implements SchemeFactory {
      public bar3_resultTupleScheme getScheme() {
        return new bar3_resultTupleScheme();
      }
    }

    private static class bar3_resultTupleScheme extends TupleScheme<bar3_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FooStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new FooServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class bar4_args implements org.apache.thrift.TBase<bar4_args, bar4_args._Fields>, java.io.Serializable, Cloneable, Comparable<bar4_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar4_args");

    private static final org.apache.thrift.protocol.TField FOOS_FIELD_DESC = new org.apache.thrift.protocol.TField("foos", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar4_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar4_argsTupleSchemeFactory());
    }

    public List<FooStruct> foos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOOS((short)1, "foos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOOS
            return FOOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOOS, new org.apache.thrift.meta_data.FieldMetaData("foos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar4_args.class, metaDataMap);
    }

    public bar4_args() {
    }

    public bar4_args(
      List<FooStruct> foos)
    {
      this();
      this.foos = foos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar4_args(bar4_args other) {
      if (other.isSetFoos()) {
        List<FooStruct> __this__foos = new ArrayList<FooStruct>(other.foos.size());
        for (FooStruct other_element : other.foos) {
          __this__foos.add(new FooStruct(other_element));
        }
        this.foos = __this__foos;
      }
    }

    public bar4_args deepCopy() {
      return new bar4_args(this);
    }

    @Override
    public void clear() {
      this.foos = null;
    }

    public int getFoosSize() {
      return (this.foos == null) ? 0 : this.foos.size();
    }

    public java.util.Iterator<FooStruct> getFoosIterator() {
      return (this.foos == null) ? null : this.foos.iterator();
    }

    public void addToFoos(FooStruct elem) {
      if (this.foos == null) {
        this.foos = new ArrayList<FooStruct>();
      }
      this.foos.add(elem);
    }

    public List<FooStruct> getFoos() {
      return this.foos;
    }

    public bar4_args setFoos(List<FooStruct> foos) {
      this.foos = foos;
      return this;
    }

    public void unsetFoos() {
      this.foos = null;
    }

    /** Returns true if field foos is set (has been assigned a value) and false otherwise */
    public boolean isSetFoos() {
      return this.foos != null;
    }

    public void setFoosIsSet(boolean value) {
      if (!value) {
        this.foos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOOS:
        if (value == null) {
          unsetFoos();
        } else {
          setFoos((List<FooStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOOS:
        return getFoos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOOS:
        return isSetFoos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar4_args)
        return this.equals((bar4_args)that);
      return false;
    }

    public boolean equals(bar4_args that) {
      if (that == null)
        return false;

      boolean this_present_foos = true && this.isSetFoos();
      boolean that_present_foos = true && that.isSetFoos();
      if (this_present_foos || that_present_foos) {
        if (!(this_present_foos && that_present_foos))
          return false;
        if (!this.foos.equals(that.foos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar4_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFoos()).compareTo(other.isSetFoos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foos, other.foos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar4_args(");
      boolean first = true;

      sb.append("foos:");
      if (this.foos == null) {
        sb.append("null");
      } else {
        sb.append(this.foos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar4_argsStandardSchemeFactory implements SchemeFactory {
      public bar4_argsStandardScheme getScheme() {
        return new bar4_argsStandardScheme();
      }
    }

    private static class bar4_argsStandardScheme extends StandardScheme<bar4_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar4_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.foos = new ArrayList<FooStruct>(_list42.size);
                  for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                  {
                    FooStruct _elem44;
                    _elem44 = new FooStruct();
                    _elem44.read(iprot);
                    struct.foos.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setFoosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar4_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foos != null) {
          oprot.writeFieldBegin(FOOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foos.size()));
            for (FooStruct _iter45 : struct.foos)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar4_argsTupleSchemeFactory implements SchemeFactory {
      public bar4_argsTupleScheme getScheme() {
        return new bar4_argsTupleScheme();
      }
    }

    private static class bar4_argsTupleScheme extends TupleScheme<bar4_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar4_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFoos()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFoos()) {
          {
            oprot.writeI32(struct.foos.size());
            for (FooStruct _iter46 : struct.foos)
            {
              _iter46.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar4_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.foos = new ArrayList<FooStruct>(_list47.size);
            for (int _i48 = 0; _i48 < _list47.size; ++_i48)
            {
              FooStruct _elem49;
              _elem49 = new FooStruct();
              _elem49.read(iprot);
              struct.foos.add(_elem49);
            }
          }
          struct.setFoosIsSet(true);
        }
      }
    }

  }

  public static class bar4_result implements org.apache.thrift.TBase<bar4_result, bar4_result._Fields>, java.io.Serializable, Cloneable, Comparable<bar4_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar4_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar4_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar4_resultTupleSchemeFactory());
    }

    public List<FooStruct> success; // required
    public FooServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooStruct.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar4_result.class, metaDataMap);
    }

    public bar4_result() {
    }

    public bar4_result(
      List<FooStruct> success,
      FooServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar4_result(bar4_result other) {
      if (other.isSetSuccess()) {
        List<FooStruct> __this__success = new ArrayList<FooStruct>(other.success.size());
        for (FooStruct other_element : other.success) {
          __this__success.add(new FooStruct(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new FooServiceException(other.e);
      }
    }

    public bar4_result deepCopy() {
      return new bar4_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FooStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FooStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<FooStruct>();
      }
      this.success.add(elem);
    }

    public List<FooStruct> getSuccess() {
      return this.success;
    }

    public bar4_result setSuccess(List<FooStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FooServiceException getE() {
      return this.e;
    }

    public bar4_result setE(FooServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FooStruct>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((FooServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar4_result)
        return this.equals((bar4_result)that);
      return false;
    }

    public boolean equals(bar4_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar4_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar4_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar4_resultStandardSchemeFactory implements SchemeFactory {
      public bar4_resultStandardScheme getScheme() {
        return new bar4_resultStandardScheme();
      }
    }

    private static class bar4_resultStandardScheme extends StandardScheme<bar4_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar4_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new ArrayList<FooStruct>(_list50.size);
                  for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                  {
                    FooStruct _elem52;
                    _elem52 = new FooStruct();
                    _elem52.read(iprot);
                    struct.success.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new FooServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar4_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FooStruct _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar4_resultTupleSchemeFactory implements SchemeFactory {
      public bar4_resultTupleScheme getScheme() {
        return new bar4_resultTupleScheme();
      }
    }

    private static class bar4_resultTupleScheme extends TupleScheme<bar4_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar4_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FooStruct _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar4_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FooStruct>(_list55.size);
            for (int _i56 = 0; _i56 < _list55.size; ++_i56)
            {
              FooStruct _elem57;
              _elem57 = new FooStruct();
              _elem57.read(iprot);
              struct.success.add(_elem57);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new FooServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class bar5_args implements org.apache.thrift.TBase<bar5_args, bar5_args._Fields>, java.io.Serializable, Cloneable, Comparable<bar5_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar5_args");

    private static final org.apache.thrift.protocol.TField FOOS_FIELD_DESC = new org.apache.thrift.protocol.TField("foos", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar5_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar5_argsTupleSchemeFactory());
    }

    public Map<String,FooStruct> foos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOOS((short)1, "foos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOOS
            return FOOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOOS, new org.apache.thrift.meta_data.FieldMetaData("foos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar5_args.class, metaDataMap);
    }

    public bar5_args() {
    }

    public bar5_args(
      Map<String,FooStruct> foos)
    {
      this();
      this.foos = foos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar5_args(bar5_args other) {
      if (other.isSetFoos()) {
        Map<String,FooStruct> __this__foos = new HashMap<String,FooStruct>(other.foos.size());
        for (Map.Entry<String, FooStruct> other_element : other.foos.entrySet()) {

          String other_element_key = other_element.getKey();
          FooStruct other_element_value = other_element.getValue();

          String __this__foos_copy_key = other_element_key;

          FooStruct __this__foos_copy_value = new FooStruct(other_element_value);

          __this__foos.put(__this__foos_copy_key, __this__foos_copy_value);
        }
        this.foos = __this__foos;
      }
    }

    public bar5_args deepCopy() {
      return new bar5_args(this);
    }

    @Override
    public void clear() {
      this.foos = null;
    }

    public int getFoosSize() {
      return (this.foos == null) ? 0 : this.foos.size();
    }

    public void putToFoos(String key, FooStruct val) {
      if (this.foos == null) {
        this.foos = new HashMap<String,FooStruct>();
      }
      this.foos.put(key, val);
    }

    public Map<String,FooStruct> getFoos() {
      return this.foos;
    }

    public bar5_args setFoos(Map<String,FooStruct> foos) {
      this.foos = foos;
      return this;
    }

    public void unsetFoos() {
      this.foos = null;
    }

    /** Returns true if field foos is set (has been assigned a value) and false otherwise */
    public boolean isSetFoos() {
      return this.foos != null;
    }

    public void setFoosIsSet(boolean value) {
      if (!value) {
        this.foos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOOS:
        if (value == null) {
          unsetFoos();
        } else {
          setFoos((Map<String,FooStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOOS:
        return getFoos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOOS:
        return isSetFoos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar5_args)
        return this.equals((bar5_args)that);
      return false;
    }

    public boolean equals(bar5_args that) {
      if (that == null)
        return false;

      boolean this_present_foos = true && this.isSetFoos();
      boolean that_present_foos = true && that.isSetFoos();
      if (this_present_foos || that_present_foos) {
        if (!(this_present_foos && that_present_foos))
          return false;
        if (!this.foos.equals(that.foos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar5_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFoos()).compareTo(other.isSetFoos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foos, other.foos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar5_args(");
      boolean first = true;

      sb.append("foos:");
      if (this.foos == null) {
        sb.append("null");
      } else {
        sb.append(this.foos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar5_argsStandardSchemeFactory implements SchemeFactory {
      public bar5_argsStandardScheme getScheme() {
        return new bar5_argsStandardScheme();
      }
    }

    private static class bar5_argsStandardScheme extends StandardScheme<bar5_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOOS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                  struct.foos = new HashMap<String,FooStruct>(2*_map58.size);
                  for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                  {
                    String _key60;
                    FooStruct _val61;
                    _key60 = iprot.readString();
                    _val61 = new FooStruct();
                    _val61.read(iprot);
                    struct.foos.put(_key60, _val61);
                  }
                  iprot.readMapEnd();
                }
                struct.setFoosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar5_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foos != null) {
          oprot.writeFieldBegin(FOOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.foos.size()));
            for (Map.Entry<String, FooStruct> _iter62 : struct.foos.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              _iter62.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar5_argsTupleSchemeFactory implements SchemeFactory {
      public bar5_argsTupleScheme getScheme() {
        return new bar5_argsTupleScheme();
      }
    }

    private static class bar5_argsTupleScheme extends TupleScheme<bar5_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFoos()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFoos()) {
          {
            oprot.writeI32(struct.foos.size());
            for (Map.Entry<String, FooStruct> _iter63 : struct.foos.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              _iter63.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.foos = new HashMap<String,FooStruct>(2*_map64.size);
            for (int _i65 = 0; _i65 < _map64.size; ++_i65)
            {
              String _key66;
              FooStruct _val67;
              _key66 = iprot.readString();
              _val67 = new FooStruct();
              _val67.read(iprot);
              struct.foos.put(_key66, _val67);
            }
          }
          struct.setFoosIsSet(true);
        }
      }
    }

  }

  public static class bar5_result implements org.apache.thrift.TBase<bar5_result, bar5_result._Fields>, java.io.Serializable, Cloneable, Comparable<bar5_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar5_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar5_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar5_resultTupleSchemeFactory());
    }

    public Map<String,FooStruct> success; // required
    public FooServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooStruct.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar5_result.class, metaDataMap);
    }

    public bar5_result() {
    }

    public bar5_result(
      Map<String,FooStruct> success,
      FooServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar5_result(bar5_result other) {
      if (other.isSetSuccess()) {
        Map<String,FooStruct> __this__success = new HashMap<String,FooStruct>(other.success.size());
        for (Map.Entry<String, FooStruct> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          FooStruct other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          FooStruct __this__success_copy_value = new FooStruct(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new FooServiceException(other.e);
      }
    }

    public bar5_result deepCopy() {
      return new bar5_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, FooStruct val) {
      if (this.success == null) {
        this.success = new HashMap<String,FooStruct>();
      }
      this.success.put(key, val);
    }

    public Map<String,FooStruct> getSuccess() {
      return this.success;
    }

    public bar5_result setSuccess(Map<String,FooStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public FooServiceException getE() {
      return this.e;
    }

    public bar5_result setE(FooServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,FooStruct>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((FooServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar5_result)
        return this.equals((bar5_result)that);
      return false;
    }

    public boolean equals(bar5_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar5_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar5_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar5_resultStandardSchemeFactory implements SchemeFactory {
      public bar5_resultStandardScheme getScheme() {
        return new bar5_resultStandardScheme();
      }
    }

    private static class bar5_resultStandardScheme extends StandardScheme<bar5_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                  struct.success = new HashMap<String,FooStruct>(2*_map68.size);
                  for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                  {
                    String _key70;
                    FooStruct _val71;
                    _key70 = iprot.readString();
                    _val71 = new FooStruct();
                    _val71.read(iprot);
                    struct.success.put(_key70, _val71);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new FooServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar5_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, FooStruct> _iter72 : struct.success.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              _iter72.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar5_resultTupleSchemeFactory implements SchemeFactory {
      public bar5_resultTupleScheme getScheme() {
        return new bar5_resultTupleScheme();
      }
    }

    private static class bar5_resultTupleScheme extends TupleScheme<bar5_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, FooStruct> _iter73 : struct.success.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              _iter73.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,FooStruct>(2*_map74.size);
            for (int _i75 = 0; _i75 < _map74.size; ++_i75)
            {
              String _key76;
              FooStruct _val77;
              _key76 = iprot.readString();
              _val77 = new FooStruct();
              _val77.read(iprot);
              struct.success.put(_key76, _val77);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new FooServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class bar6_args implements org.apache.thrift.TBase<bar6_args, bar6_args._Fields>, java.io.Serializable, Cloneable, Comparable<bar6_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar6_args");

    private static final org.apache.thrift.protocol.TField FOO1_FIELD_DESC = new org.apache.thrift.protocol.TField("foo1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FOO2_FIELD_DESC = new org.apache.thrift.protocol.TField("foo2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FOO3_FIELD_DESC = new org.apache.thrift.protocol.TField("foo3", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FOO4_FIELD_DESC = new org.apache.thrift.protocol.TField("foo4", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField FOO5_FIELD_DESC = new org.apache.thrift.protocol.TField("foo5", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField FOO6_FIELD_DESC = new org.apache.thrift.protocol.TField("foo6", org.apache.thrift.protocol.TType.SET, (short)6);
    private static final org.apache.thrift.protocol.TField FOO7_FIELD_DESC = new org.apache.thrift.protocol.TField("foo7", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField FOO8_FIELD_DESC = new org.apache.thrift.protocol.TField("foo8", org.apache.thrift.protocol.TType.LIST, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar6_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar6_argsTupleSchemeFactory());
    }

    public String foo1; // required
    public FooStruct foo2; // required
    public FooEnum foo3; // required
    public Map<String,String> foo4; // required
    public List<String> foo5; // required
    public Set<String> foo6; // required
    public List<List<FooStruct>> foo7; // required
    public List<List<FooStruct>> foo8; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOO1((short)1, "foo1"),
      FOO2((short)2, "foo2"),
      FOO3((short)3, "foo3"),
      FOO4((short)4, "foo4"),
      FOO5((short)5, "foo5"),
      FOO6((short)6, "foo6"),
      FOO7((short)7, "foo7"),
      FOO8((short)8, "foo8");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOO1
            return FOO1;
          case 2: // FOO2
            return FOO2;
          case 3: // FOO3
            return FOO3;
          case 4: // FOO4
            return FOO4;
          case 5: // FOO5
            return FOO5;
          case 6: // FOO6
            return FOO6;
          case 7: // FOO7
            return FOO7;
          case 8: // FOO8
            return FOO8;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOO1, new org.apache.thrift.meta_data.FieldMetaData("foo1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TypedefedString")));
      tmpMap.put(_Fields.FOO2, new org.apache.thrift.meta_data.FieldMetaData("foo2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "TypedefedStruct")));
      tmpMap.put(_Fields.FOO3, new org.apache.thrift.meta_data.FieldMetaData("foo3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM          , "TypedefedEnum")));
      tmpMap.put(_Fields.FOO4, new org.apache.thrift.meta_data.FieldMetaData("foo4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "TypedefedMap")));
      tmpMap.put(_Fields.FOO5, new org.apache.thrift.meta_data.FieldMetaData("foo5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TypedefedList")));
      tmpMap.put(_Fields.FOO6, new org.apache.thrift.meta_data.FieldMetaData("foo6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.SET          , "TypedefedSet")));
      tmpMap.put(_Fields.FOO7, new org.apache.thrift.meta_data.FieldMetaData("foo7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "NestedTypedefedStructs")));
      tmpMap.put(_Fields.FOO8, new org.apache.thrift.meta_data.FieldMetaData("foo8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT                  , "TypedefedStruct")))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar6_args.class, metaDataMap);
    }

    public bar6_args() {
    }

    public bar6_args(
      String foo1,
      FooStruct foo2,
      FooEnum foo3,
      Map<String,String> foo4,
      List<String> foo5,
      Set<String> foo6,
      List<List<FooStruct>> foo7,
      List<List<FooStruct>> foo8)
    {
      this();
      this.foo1 = foo1;
      this.foo2 = foo2;
      this.foo3 = foo3;
      this.foo4 = foo4;
      this.foo5 = foo5;
      this.foo6 = foo6;
      this.foo7 = foo7;
      this.foo8 = foo8;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar6_args(bar6_args other) {
      if (other.isSetFoo1()) {
        this.foo1 = other.foo1;
      }
      if (other.isSetFoo2()) {
        this.foo2 = other.foo2;
      }
      if (other.isSetFoo3()) {
        this.foo3 = other.foo3;
      }
      if (other.isSetFoo4()) {
        this.foo4 = other.foo4;
      }
      if (other.isSetFoo5()) {
        this.foo5 = other.foo5;
      }
      if (other.isSetFoo6()) {
        this.foo6 = other.foo6;
      }
      if (other.isSetFoo7()) {
        this.foo7 = other.foo7;
      }
      if (other.isSetFoo8()) {
        List<List<FooStruct>> __this__foo8 = new ArrayList<List<FooStruct>>(other.foo8.size());
        for (List<FooStruct> other_element : other.foo8) {
          List<FooStruct> __this__foo8_copy = new ArrayList<FooStruct>(other_element.size());
          for (FooStruct other_element_element : other_element) {
            __this__foo8_copy.add(other_element_element);
          }
          __this__foo8.add(__this__foo8_copy);
        }
        this.foo8 = __this__foo8;
      }
    }

    public bar6_args deepCopy() {
      return new bar6_args(this);
    }

    @Override
    public void clear() {
      this.foo1 = null;
      this.foo2 = null;
      this.foo3 = null;
      this.foo4 = null;
      this.foo5 = null;
      this.foo6 = null;
      this.foo7 = null;
      this.foo8 = null;
    }

    public String getFoo1() {
      return this.foo1;
    }

    public bar6_args setFoo1(String foo1) {
      this.foo1 = foo1;
      return this;
    }

    public void unsetFoo1() {
      this.foo1 = null;
    }

    /** Returns true if field foo1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo1() {
      return this.foo1 != null;
    }

    public void setFoo1IsSet(boolean value) {
      if (!value) {
        this.foo1 = null;
      }
    }

    public FooStruct getFoo2() {
      return this.foo2;
    }

    public bar6_args setFoo2(FooStruct foo2) {
      this.foo2 = foo2;
      return this;
    }

    public void unsetFoo2() {
      this.foo2 = null;
    }

    /** Returns true if field foo2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo2() {
      return this.foo2 != null;
    }

    public void setFoo2IsSet(boolean value) {
      if (!value) {
        this.foo2 = null;
      }
    }

    public FooEnum getFoo3() {
      return this.foo3;
    }

    public bar6_args setFoo3(FooEnum foo3) {
      this.foo3 = foo3;
      return this;
    }

    public void unsetFoo3() {
      this.foo3 = null;
    }

    /** Returns true if field foo3 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo3() {
      return this.foo3 != null;
    }

    public void setFoo3IsSet(boolean value) {
      if (!value) {
        this.foo3 = null;
      }
    }

    public int getFoo4Size() {
      return (this.foo4 == null) ? 0 : this.foo4.size();
    }

    public void putToFoo4(String key, String val) {
      if (this.foo4 == null) {
        this.foo4 = new HashMap<String,String>();
      }
      this.foo4.put(key, val);
    }

    public Map<String,String> getFoo4() {
      return this.foo4;
    }

    public bar6_args setFoo4(Map<String,String> foo4) {
      this.foo4 = foo4;
      return this;
    }

    public void unsetFoo4() {
      this.foo4 = null;
    }

    /** Returns true if field foo4 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo4() {
      return this.foo4 != null;
    }

    public void setFoo4IsSet(boolean value) {
      if (!value) {
        this.foo4 = null;
      }
    }

    public int getFoo5Size() {
      return (this.foo5 == null) ? 0 : this.foo5.size();
    }

    public java.util.Iterator<String> getFoo5Iterator() {
      return (this.foo5 == null) ? null : this.foo5.iterator();
    }

    public void addToFoo5(String elem) {
      if (this.foo5 == null) {
        this.foo5 = new ArrayList<String>();
      }
      this.foo5.add(elem);
    }

    public List<String> getFoo5() {
      return this.foo5;
    }

    public bar6_args setFoo5(List<String> foo5) {
      this.foo5 = foo5;
      return this;
    }

    public void unsetFoo5() {
      this.foo5 = null;
    }

    /** Returns true if field foo5 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo5() {
      return this.foo5 != null;
    }

    public void setFoo5IsSet(boolean value) {
      if (!value) {
        this.foo5 = null;
      }
    }

    public int getFoo6Size() {
      return (this.foo6 == null) ? 0 : this.foo6.size();
    }

    public java.util.Iterator<String> getFoo6Iterator() {
      return (this.foo6 == null) ? null : this.foo6.iterator();
    }

    public void addToFoo6(String elem) {
      if (this.foo6 == null) {
        this.foo6 = new HashSet<String>();
      }
      this.foo6.add(elem);
    }

    public Set<String> getFoo6() {
      return this.foo6;
    }

    public bar6_args setFoo6(Set<String> foo6) {
      this.foo6 = foo6;
      return this;
    }

    public void unsetFoo6() {
      this.foo6 = null;
    }

    /** Returns true if field foo6 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo6() {
      return this.foo6 != null;
    }

    public void setFoo6IsSet(boolean value) {
      if (!value) {
        this.foo6 = null;
      }
    }

    public int getFoo7Size() {
      return (this.foo7 == null) ? 0 : this.foo7.size();
    }

    public java.util.Iterator<List<FooStruct>> getFoo7Iterator() {
      return (this.foo7 == null) ? null : this.foo7.iterator();
    }

    public void addToFoo7(List<FooStruct> elem) {
      if (this.foo7 == null) {
        this.foo7 = new ArrayList<List<FooStruct>>();
      }
      this.foo7.add(elem);
    }

    public List<List<FooStruct>> getFoo7() {
      return this.foo7;
    }

    public bar6_args setFoo7(List<List<FooStruct>> foo7) {
      this.foo7 = foo7;
      return this;
    }

    public void unsetFoo7() {
      this.foo7 = null;
    }

    /** Returns true if field foo7 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo7() {
      return this.foo7 != null;
    }

    public void setFoo7IsSet(boolean value) {
      if (!value) {
        this.foo7 = null;
      }
    }

    public int getFoo8Size() {
      return (this.foo8 == null) ? 0 : this.foo8.size();
    }

    public java.util.Iterator<List<FooStruct>> getFoo8Iterator() {
      return (this.foo8 == null) ? null : this.foo8.iterator();
    }

    public void addToFoo8(List<FooStruct> elem) {
      if (this.foo8 == null) {
        this.foo8 = new ArrayList<List<FooStruct>>();
      }
      this.foo8.add(elem);
    }

    public List<List<FooStruct>> getFoo8() {
      return this.foo8;
    }

    public bar6_args setFoo8(List<List<FooStruct>> foo8) {
      this.foo8 = foo8;
      return this;
    }

    public void unsetFoo8() {
      this.foo8 = null;
    }

    /** Returns true if field foo8 is set (has been assigned a value) and false otherwise */
    public boolean isSetFoo8() {
      return this.foo8 != null;
    }

    public void setFoo8IsSet(boolean value) {
      if (!value) {
        this.foo8 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOO1:
        if (value == null) {
          unsetFoo1();
        } else {
          setFoo1((String)value);
        }
        break;

      case FOO2:
        if (value == null) {
          unsetFoo2();
        } else {
          setFoo2((FooStruct)value);
        }
        break;

      case FOO3:
        if (value == null) {
          unsetFoo3();
        } else {
          setFoo3((FooEnum)value);
        }
        break;

      case FOO4:
        if (value == null) {
          unsetFoo4();
        } else {
          setFoo4((Map<String,String>)value);
        }
        break;

      case FOO5:
        if (value == null) {
          unsetFoo5();
        } else {
          setFoo5((List<String>)value);
        }
        break;

      case FOO6:
        if (value == null) {
          unsetFoo6();
        } else {
          setFoo6((Set<String>)value);
        }
        break;

      case FOO7:
        if (value == null) {
          unsetFoo7();
        } else {
          setFoo7((List<List<FooStruct>>)value);
        }
        break;

      case FOO8:
        if (value == null) {
          unsetFoo8();
        } else {
          setFoo8((List<List<FooStruct>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOO1:
        return getFoo1();

      case FOO2:
        return getFoo2();

      case FOO3:
        return getFoo3();

      case FOO4:
        return getFoo4();

      case FOO5:
        return getFoo5();

      case FOO6:
        return getFoo6();

      case FOO7:
        return getFoo7();

      case FOO8:
        return getFoo8();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOO1:
        return isSetFoo1();
      case FOO2:
        return isSetFoo2();
      case FOO3:
        return isSetFoo3();
      case FOO4:
        return isSetFoo4();
      case FOO5:
        return isSetFoo5();
      case FOO6:
        return isSetFoo6();
      case FOO7:
        return isSetFoo7();
      case FOO8:
        return isSetFoo8();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar6_args)
        return this.equals((bar6_args)that);
      return false;
    }

    public boolean equals(bar6_args that) {
      if (that == null)
        return false;

      boolean this_present_foo1 = true && this.isSetFoo1();
      boolean that_present_foo1 = true && that.isSetFoo1();
      if (this_present_foo1 || that_present_foo1) {
        if (!(this_present_foo1 && that_present_foo1))
          return false;
        if (!this.foo1.equals(that.foo1))
          return false;
      }

      boolean this_present_foo2 = true && this.isSetFoo2();
      boolean that_present_foo2 = true && that.isSetFoo2();
      if (this_present_foo2 || that_present_foo2) {
        if (!(this_present_foo2 && that_present_foo2))
          return false;
        if (!this.foo2.equals(that.foo2))
          return false;
      }

      boolean this_present_foo3 = true && this.isSetFoo3();
      boolean that_present_foo3 = true && that.isSetFoo3();
      if (this_present_foo3 || that_present_foo3) {
        if (!(this_present_foo3 && that_present_foo3))
          return false;
        if (!this.foo3.equals(that.foo3))
          return false;
      }

      boolean this_present_foo4 = true && this.isSetFoo4();
      boolean that_present_foo4 = true && that.isSetFoo4();
      if (this_present_foo4 || that_present_foo4) {
        if (!(this_present_foo4 && that_present_foo4))
          return false;
        if (!this.foo4.equals(that.foo4))
          return false;
      }

      boolean this_present_foo5 = true && this.isSetFoo5();
      boolean that_present_foo5 = true && that.isSetFoo5();
      if (this_present_foo5 || that_present_foo5) {
        if (!(this_present_foo5 && that_present_foo5))
          return false;
        if (!this.foo5.equals(that.foo5))
          return false;
      }

      boolean this_present_foo6 = true && this.isSetFoo6();
      boolean that_present_foo6 = true && that.isSetFoo6();
      if (this_present_foo6 || that_present_foo6) {
        if (!(this_present_foo6 && that_present_foo6))
          return false;
        if (!this.foo6.equals(that.foo6))
          return false;
      }

      boolean this_present_foo7 = true && this.isSetFoo7();
      boolean that_present_foo7 = true && that.isSetFoo7();
      if (this_present_foo7 || that_present_foo7) {
        if (!(this_present_foo7 && that_present_foo7))
          return false;
        if (!this.foo7.equals(that.foo7))
          return false;
      }

      boolean this_present_foo8 = true && this.isSetFoo8();
      boolean that_present_foo8 = true && that.isSetFoo8();
      if (this_present_foo8 || that_present_foo8) {
        if (!(this_present_foo8 && that_present_foo8))
          return false;
        if (!this.foo8.equals(that.foo8))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar6_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFoo1()).compareTo(other.isSetFoo1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo1, other.foo1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo2()).compareTo(other.isSetFoo2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo2, other.foo2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo3()).compareTo(other.isSetFoo3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo3, other.foo3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo4()).compareTo(other.isSetFoo4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo4, other.foo4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo5()).compareTo(other.isSetFoo5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo5, other.foo5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo6()).compareTo(other.isSetFoo6());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo6()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo6, other.foo6);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo7()).compareTo(other.isSetFoo7());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo7()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo7, other.foo7);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoo8()).compareTo(other.isSetFoo8());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoo8()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foo8, other.foo8);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar6_args(");
      boolean first = true;

      sb.append("foo1:");
      if (this.foo1 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo2:");
      if (this.foo2 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo3:");
      if (this.foo3 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo4:");
      if (this.foo4 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo4);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo5:");
      if (this.foo5 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo6:");
      if (this.foo6 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo6);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo7:");
      if (this.foo7 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo7);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foo8:");
      if (this.foo8 == null) {
        sb.append("null");
      } else {
        sb.append(this.foo8);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar6_argsStandardSchemeFactory implements SchemeFactory {
      public bar6_argsStandardScheme getScheme() {
        return new bar6_argsStandardScheme();
      }
    }

    private static class bar6_argsStandardScheme extends StandardScheme<bar6_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar6_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOO1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.foo1 = iprot.readString();
                struct.setFoo1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOO2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foo2 = new FooStruct();
                struct.foo2.read(iprot);
                struct.setFoo2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FOO3
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.foo3 = FooEnum.findByValue(iprot.readI32());
                struct.setFoo3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FOO4
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map78 = iprot.readMapBegin();
                  struct.foo4 = new HashMap<String,String>(2*_map78.size);
                  for (int _i79 = 0; _i79 < _map78.size; ++_i79)
                  {
                    String _key80;
                    String _val81;
                    _key80 = iprot.readString();
                    _val81 = iprot.readString();
                    struct.foo4.put(_key80, _val81);
                  }
                  iprot.readMapEnd();
                }
                struct.setFoo4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FOO5
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.foo5 = new ArrayList<String>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    String _elem84;
                    _elem84 = iprot.readString();
                    struct.foo5.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setFoo5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FOO6
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set85 = iprot.readSetBegin();
                  struct.foo6 = new HashSet<String>(2*_set85.size);
                  for (int _i86 = 0; _i86 < _set85.size; ++_i86)
                  {
                    String _elem87;
                    _elem87 = iprot.readString();
                    struct.foo6.add(_elem87);
                  }
                  iprot.readSetEnd();
                }
                struct.setFoo6IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FOO7
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.foo7 = new ArrayList<List<FooStruct>>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    List<FooStruct> _elem90;
                    {
                      org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                      _elem90 = new ArrayList<FooStruct>(_list91.size);
                      for (int _i92 = 0; _i92 < _list91.size; ++_i92)
                      {
                        FooStruct _elem93;
                        _elem93 = new FooStruct();
                        _elem93.read(iprot);
                        _elem90.add(_elem93);
                      }
                      iprot.readListEnd();
                    }
                    struct.foo7.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setFoo7IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // FOO8
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.foo8 = new ArrayList<List<FooStruct>>(_list94.size);
                  for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                  {
                    List<FooStruct> _elem96;
                    {
                      org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                      _elem96 = new ArrayList<FooStruct>(_list97.size);
                      for (int _i98 = 0; _i98 < _list97.size; ++_i98)
                      {
                        FooStruct _elem99;
                        _elem99 = new FooStruct();
                        _elem99.read(iprot);
                        _elem96.add(_elem99);
                      }
                      iprot.readListEnd();
                    }
                    struct.foo8.add(_elem96);
                  }
                  iprot.readListEnd();
                }
                struct.setFoo8IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar6_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foo1 != null) {
          oprot.writeFieldBegin(FOO1_FIELD_DESC);
          oprot.writeString(struct.foo1);
          oprot.writeFieldEnd();
        }
        if (struct.foo2 != null) {
          oprot.writeFieldBegin(FOO2_FIELD_DESC);
          struct.foo2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.foo3 != null) {
          oprot.writeFieldBegin(FOO3_FIELD_DESC);
          oprot.writeI32(struct.foo3.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.foo4 != null) {
          oprot.writeFieldBegin(FOO4_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.foo4.size()));
            for (Map.Entry<String, String> _iter100 : struct.foo4.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              oprot.writeString(_iter100.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.foo5 != null) {
          oprot.writeFieldBegin(FOO5_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.foo5.size()));
            for (String _iter101 : struct.foo5)
            {
              oprot.writeString(_iter101);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.foo6 != null) {
          oprot.writeFieldBegin(FOO6_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.foo6.size()));
            for (String _iter102 : struct.foo6)
            {
              oprot.writeString(_iter102);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.foo7 != null) {
          oprot.writeFieldBegin(FOO7_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.foo7.size()));
            for (List<FooStruct> _iter103 : struct.foo7)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter103.size()));
                for (FooStruct _iter104 : _iter103)
                {
                  _iter104.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.foo8 != null) {
          oprot.writeFieldBegin(FOO8_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.foo8.size()));
            for (List<FooStruct> _iter105 : struct.foo8)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter105.size()));
                for (FooStruct _iter106 : _iter105)
                {
                  _iter106.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar6_argsTupleSchemeFactory implements SchemeFactory {
      public bar6_argsTupleScheme getScheme() {
        return new bar6_argsTupleScheme();
      }
    }

    private static class bar6_argsTupleScheme extends TupleScheme<bar6_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar6_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFoo1()) {
          optionals.set(0);
        }
        if (struct.isSetFoo2()) {
          optionals.set(1);
        }
        if (struct.isSetFoo3()) {
          optionals.set(2);
        }
        if (struct.isSetFoo4()) {
          optionals.set(3);
        }
        if (struct.isSetFoo5()) {
          optionals.set(4);
        }
        if (struct.isSetFoo6()) {
          optionals.set(5);
        }
        if (struct.isSetFoo7()) {
          optionals.set(6);
        }
        if (struct.isSetFoo8()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetFoo1()) {
          oprot.writeString(struct.foo1);
        }
        if (struct.isSetFoo2()) {
          struct.foo2.write(oprot);
        }
        if (struct.isSetFoo3()) {
          oprot.writeI32(struct.foo3.getValue());
        }
        if (struct.isSetFoo4()) {
          {
            oprot.writeI32(struct.foo4.size());
            for (Map.Entry<String, String> _iter107 : struct.foo4.entrySet())
            {
              oprot.writeString(_iter107.getKey());
              oprot.writeString(_iter107.getValue());
            }
          }
        }
        if (struct.isSetFoo5()) {
          {
            oprot.writeI32(struct.foo5.size());
            for (String _iter108 : struct.foo5)
            {
              oprot.writeString(_iter108);
            }
          }
        }
        if (struct.isSetFoo6()) {
          {
            oprot.writeI32(struct.foo6.size());
            for (String _iter109 : struct.foo6)
            {
              oprot.writeString(_iter109);
            }
          }
        }
        if (struct.isSetFoo7()) {
          {
            oprot.writeI32(struct.foo7.size());
            for (List<FooStruct> _iter110 : struct.foo7)
            {
              {
                oprot.writeI32(_iter110.size());
                for (FooStruct _iter111 : _iter110)
                {
                  _iter111.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetFoo8()) {
          {
            oprot.writeI32(struct.foo8.size());
            for (List<FooStruct> _iter112 : struct.foo8)
            {
              {
                oprot.writeI32(_iter112.size());
                for (FooStruct _iter113 : _iter112)
                {
                  _iter113.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar6_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.foo1 = iprot.readString();
          struct.setFoo1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.foo2 = new FooStruct();
          struct.foo2.read(iprot);
          struct.setFoo2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.foo3 = FooEnum.findByValue(iprot.readI32());
          struct.setFoo3IsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map114 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.foo4 = new HashMap<String,String>(2*_map114.size);
            for (int _i115 = 0; _i115 < _map114.size; ++_i115)
            {
              String _key116;
              String _val117;
              _key116 = iprot.readString();
              _val117 = iprot.readString();
              struct.foo4.put(_key116, _val117);
            }
          }
          struct.setFoo4IsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list118 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.foo5 = new ArrayList<String>(_list118.size);
            for (int _i119 = 0; _i119 < _list118.size; ++_i119)
            {
              String _elem120;
              _elem120 = iprot.readString();
              struct.foo5.add(_elem120);
            }
          }
          struct.setFoo5IsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TSet _set121 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.foo6 = new HashSet<String>(2*_set121.size);
            for (int _i122 = 0; _i122 < _set121.size; ++_i122)
            {
              String _elem123;
              _elem123 = iprot.readString();
              struct.foo6.add(_elem123);
            }
          }
          struct.setFoo6IsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.foo7 = new ArrayList<List<FooStruct>>(_list124.size);
            for (int _i125 = 0; _i125 < _list124.size; ++_i125)
            {
              List<FooStruct> _elem126;
              {
                org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem126 = new ArrayList<FooStruct>(_list127.size);
                for (int _i128 = 0; _i128 < _list127.size; ++_i128)
                {
                  FooStruct _elem129;
                  _elem129 = new FooStruct();
                  _elem129.read(iprot);
                  _elem126.add(_elem129);
                }
              }
              struct.foo7.add(_elem126);
            }
          }
          struct.setFoo7IsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.foo8 = new ArrayList<List<FooStruct>>(_list130.size);
            for (int _i131 = 0; _i131 < _list130.size; ++_i131)
            {
              List<FooStruct> _elem132;
              {
                org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem132 = new ArrayList<FooStruct>(_list133.size);
                for (int _i134 = 0; _i134 < _list133.size; ++_i134)
                {
                  FooStruct _elem135;
                  _elem135 = new FooStruct();
                  _elem135.read(iprot);
                  _elem132.add(_elem135);
                }
              }
              struct.foo8.add(_elem132);
            }
          }
          struct.setFoo8IsSet(true);
        }
      }
    }

  }

  public static class bar6_result implements org.apache.thrift.TBase<bar6_result, bar6_result._Fields>, java.io.Serializable, Cloneable, Comparable<bar6_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar6_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar6_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar6_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar6_result.class, metaDataMap);
    }

    public bar6_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar6_result(bar6_result other) {
    }

    public bar6_result deepCopy() {
      return new bar6_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar6_result)
        return this.equals((bar6_result)that);
      return false;
    }

    public boolean equals(bar6_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(bar6_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar6_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar6_resultStandardSchemeFactory implements SchemeFactory {
      public bar6_resultStandardScheme getScheme() {
        return new bar6_resultStandardScheme();
      }
    }

    private static class bar6_resultStandardScheme extends StandardScheme<bar6_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar6_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar6_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar6_resultTupleSchemeFactory implements SchemeFactory {
      public bar6_resultTupleScheme getScheme() {
        return new bar6_resultTupleScheme();
      }
    }

    private static class bar6_resultTupleScheme extends TupleScheme<bar6_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar6_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar6_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
