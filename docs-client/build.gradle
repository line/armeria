import static org.gradle.internal.os.OperatingSystem.current

plugins {
    id 'base'
    alias(libs.plugins.node.gradle)
}

// Do not build if 'noWeb' property exists.
if (rootProject.hasProperty('noWeb')) {
    return
}

node {
    version = '22.3.0'
    npmVersion = '10.8.1'
    download = true
    npmInstallCommand = "ci"
}

// Add the option that works around the dependency conflicts.
tasks.npmInstall.args.add('--legacy-peer-deps')

task buildWeb(type: NpmTask) {
    dependsOn tasks.npmInstall

    args = ['run', 'build']

    // note that node_modules isn't cached due to potential cache misses per architecture
    inputs.property("node.version", node.version)
    // build per OS type to preserve behavior of packaging jar from linux
    inputs.property("os.familyName", current().getFamilyName())
    inputs.dir('src').withPathSensitivity(PathSensitivity.RELATIVE)
          .withPropertyName("sources files")
    inputs.files('package.json', 'package-lock.json', 'tsconfig.json', 'tsconfig-webpack.json',
                 'webpack.config.ts')
          .withPathSensitivity(PathSensitivity.RELATIVE)
          .withPropertyName("npm configuration files")

    outputs.dir('build/web')

    // TODO: consider disabling cacheability once arm actions runners are available
    outputs.cacheIf { true }
}

task copyWeb(type: Copy) {
    dependsOn buildWeb

    from 'build/web'
    into 'build/javaweb/com/linecorp/armeria/server/docs'
}

tasks.assemble.dependsOn tasks.copyWeb

if (!rootProject.hasProperty('noLint')) {
    task eslint(type: NpmTask) {
        dependsOn tasks.npmInstall

        args = ['run', 'lint']

        inputs.dir('src')
                .withPropertyName("sources files")
        inputs.files('package.json', 'package-lock.json', '.prettierrc.js', '.eslintrc.js')
                .withPropertyName("configuration files")
        inputs.dir('../settings/')
                .withPropertyName("settings files")

        outputs.upToDateWhen { true }
    }

    Task lintTask = project.ext.getLintTask()
    lintTask.dependsOn(tasks.eslint)
    tasks.buildWeb.dependsOn(lintTask)
}
