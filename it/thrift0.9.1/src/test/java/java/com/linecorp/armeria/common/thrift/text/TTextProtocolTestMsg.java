/**
 * Autogenerated by Thrift Compiler (0.9.1-LINE)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.armeria.common.thrift.text;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TTextProtocolTestMsg implements org.apache.thrift.TBase<TTextProtocolTestMsg, TTextProtocolTestMsg._Fields>, java.io.Serializable, Cloneable, Comparable<TTextProtocolTestMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTextProtocolTestMsg");

  private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField N_FIELD_DESC = new org.apache.thrift.protocol.TField("n", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField H_FIELD_DESC = new org.apache.thrift.protocol.TField("h", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField J_FIELD_DESC = new org.apache.thrift.protocol.TField("j", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("k", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField L_FIELD_DESC = new org.apache.thrift.protocol.TField("l", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField M_FIELD_DESC = new org.apache.thrift.protocol.TField("m", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField Q_FIELD_DESC = new org.apache.thrift.protocol.TField("q", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.MAP, (short)16);
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField T_FIELD_DESC = new org.apache.thrift.protocol.TField("t", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField U_FIELD_DESC = new org.apache.thrift.protocol.TField("u", org.apache.thrift.protocol.TType.MAP, (short)19);
  private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField("v", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField W_FIELD_DESC = new org.apache.thrift.protocol.TField("w", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField AA_FIELD_DESC = new org.apache.thrift.protocol.TField("aa", org.apache.thrift.protocol.TType.MAP, (short)27);
  private static final org.apache.thrift.protocol.TField AB_FIELD_DESC = new org.apache.thrift.protocol.TField("ab", org.apache.thrift.protocol.TType.MAP, (short)28);
  private static final org.apache.thrift.protocol.TField AC_FIELD_DESC = new org.apache.thrift.protocol.TField("ac", org.apache.thrift.protocol.TType.MAP, (short)29);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTextProtocolTestMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTextProtocolTestMsgTupleSchemeFactory());
  }

  public long a; // required
  public int b; // required
  public short n; // required
  public Sub c; // required
  public List<Integer> d; // required
  public List<Sub> e; // required
  public boolean f; // required
  public byte g; // required
  public Map<Integer,Long> h; // required
  public Map<Short,List<Boolean>> j; // required
  public Set<Boolean> k; // required
  public ByteBuffer l; // required
  public String m; // required
  /**
   * 
   * @see Letter
   */
  public Letter p; // required
  public Set<Letter> q; // required
  public Map<Sub,Long> r; // required
  public Map<Map<Map<Long,Long>,Long>,Long> s; // required
  public List<Letter> t; // required
  public Map<String,Letter> u; // required
  /**
   * 
   * @see Letter
   */
  public Letter v; // required
  public TestUnion w; // required
  public List<TestUnion> x; // required
  public Letter y; // required
  public Map<Letter,Integer> aa; // required
  public Map<Letter,Number> ab; // required
  public Map<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>> ac; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A((short)1, "a"),
    B((short)2, "b"),
    N((short)13, "n"),
    C((short)3, "c"),
    D((short)4, "d"),
    E((short)5, "e"),
    F((short)6, "f"),
    G((short)7, "g"),
    H((short)8, "h"),
    J((short)9, "j"),
    K((short)10, "k"),
    L((short)11, "l"),
    M((short)12, "m"),
    /**
     * 
     * @see Letter
     */
    P((short)14, "p"),
    Q((short)15, "q"),
    R((short)16, "r"),
    S((short)17, "s"),
    T((short)18, "t"),
    U((short)19, "u"),
    /**
     * 
     * @see Letter
     */
    V((short)20, "v"),
    W((short)21, "w"),
    X((short)22, "x"),
    Y((short)23, "y"),
    AA((short)27, "aa"),
    AB((short)28, "ab"),
    AC((short)29, "ac");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A
          return A;
        case 2: // B
          return B;
        case 13: // N
          return N;
        case 3: // C
          return C;
        case 4: // D
          return D;
        case 5: // E
          return E;
        case 6: // F
          return F;
        case 7: // G
          return G;
        case 8: // H
          return H;
        case 9: // J
          return J;
        case 10: // K
          return K;
        case 11: // L
          return L;
        case 12: // M
          return M;
        case 14: // P
          return P;
        case 15: // Q
          return Q;
        case 16: // R
          return R;
        case 17: // S
          return S;
        case 18: // T
          return T;
        case 19: // U
          return U;
        case 20: // V
          return V;
        case 21: // W
          return W;
        case 22: // X
          return X;
        case 23: // Y
          return Y;
        case 27: // AA
          return AA;
        case 28: // AB
          return AB;
        case 29: // AC
          return AC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A_ISSET_ID = 0;
  private static final int __B_ISSET_ID = 1;
  private static final int __N_ISSET_ID = 2;
  private static final int __F_ISSET_ID = 3;
  private static final int __G_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N, new org.apache.thrift.meta_data.FieldMetaData("n", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sub.class)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sub.class))));
    tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.H, new org.apache.thrift.meta_data.FieldMetaData("h", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.J, new org.apache.thrift.meta_data.FieldMetaData("j", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)))));
    tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("k", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.L, new org.apache.thrift.meta_data.FieldMetaData("l", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.M, new org.apache.thrift.meta_data.FieldMetaData("m", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class)));
    tmpMap.put(_Fields.Q, new org.apache.thrift.meta_data.FieldMetaData("q", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class))));
    tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sub.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.T, new org.apache.thrift.meta_data.FieldMetaData("t", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class))));
    tmpMap.put(_Fields.U, new org.apache.thrift.meta_data.FieldMetaData("u", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class))));
    tmpMap.put(_Fields.V, new org.apache.thrift.meta_data.FieldMetaData("v", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class)));
    tmpMap.put(_Fields.W, new org.apache.thrift.meta_data.FieldMetaData("w", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestUnion.class)));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestUnion.class))));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "Moji")));
    tmpMap.put(_Fields.AA, new org.apache.thrift.meta_data.FieldMetaData("aa", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.AB, new org.apache.thrift.meta_data.FieldMetaData("ab", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Number.class))));
    tmpMap.put(_Fields.AC, new org.apache.thrift.meta_data.FieldMetaData("ac", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Number.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NumberSub.class), 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Letter.class)))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTextProtocolTestMsg.class, metaDataMap);
  }

  public TTextProtocolTestMsg() {
  }

  public TTextProtocolTestMsg(
    long a,
    int b,
    short n,
    Sub c,
    List<Integer> d,
    List<Sub> e,
    boolean f,
    byte g,
    Map<Integer,Long> h,
    Map<Short,List<Boolean>> j,
    Set<Boolean> k,
    ByteBuffer l,
    String m,
    Letter p,
    Set<Letter> q,
    Map<Sub,Long> r,
    Map<Map<Map<Long,Long>,Long>,Long> s,
    List<Letter> t,
    Map<String,Letter> u,
    Letter v,
    TestUnion w,
    List<TestUnion> x,
    Letter y,
    Map<Letter,Integer> aa,
    Map<Letter,Number> ab,
    Map<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>> ac)
  {
    this();
    this.a = a;
    setAIsSet(true);
    this.b = b;
    setBIsSet(true);
    this.n = n;
    setNIsSet(true);
    this.c = c;
    this.d = d;
    this.e = e;
    this.f = f;
    setFIsSet(true);
    this.g = g;
    setGIsSet(true);
    this.h = h;
    this.j = j;
    this.k = k;
    this.l = l;
    this.m = m;
    this.p = p;
    this.q = q;
    this.r = r;
    this.s = s;
    this.t = t;
    this.u = u;
    this.v = v;
    this.w = w;
    this.x = x;
    this.y = y;
    this.aa = aa;
    this.ab = ab;
    this.ac = ac;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTextProtocolTestMsg(TTextProtocolTestMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a = other.a;
    this.b = other.b;
    this.n = other.n;
    if (other.isSetC()) {
      this.c = new Sub(other.c);
    }
    if (other.isSetD()) {
      List<Integer> __this__d = new ArrayList<Integer>(other.d);
      this.d = __this__d;
    }
    if (other.isSetE()) {
      List<Sub> __this__e = new ArrayList<Sub>(other.e.size());
      for (Sub other_element : other.e) {
        __this__e.add(new Sub(other_element));
      }
      this.e = __this__e;
    }
    this.f = other.f;
    this.g = other.g;
    if (other.isSetH()) {
      Map<Integer,Long> __this__h = new HashMap<Integer,Long>(other.h);
      this.h = __this__h;
    }
    if (other.isSetJ()) {
      Map<Short,List<Boolean>> __this__j = new HashMap<Short,List<Boolean>>(other.j.size());
      for (Map.Entry<Short, List<Boolean>> other_element : other.j.entrySet()) {

        Short other_element_key = other_element.getKey();
        List<Boolean> other_element_value = other_element.getValue();

        Short __this__j_copy_key = other_element_key;

        List<Boolean> __this__j_copy_value = new ArrayList<Boolean>(other_element_value);

        __this__j.put(__this__j_copy_key, __this__j_copy_value);
      }
      this.j = __this__j;
    }
    if (other.isSetK()) {
      Set<Boolean> __this__k = new HashSet<Boolean>(other.k);
      this.k = __this__k;
    }
    if (other.isSetL()) {
      this.l = org.apache.thrift.TBaseHelper.copyBinary(other.l);
;
    }
    if (other.isSetM()) {
      this.m = other.m;
    }
    if (other.isSetP()) {
      this.p = other.p;
    }
    if (other.isSetQ()) {
      Set<Letter> __this__q = new HashSet<Letter>(other.q.size());
      for (Letter other_element : other.q) {
        __this__q.add(other_element);
      }
      this.q = __this__q;
    }
    if (other.isSetR()) {
      Map<Sub,Long> __this__r = new HashMap<Sub,Long>(other.r.size());
      for (Map.Entry<Sub, Long> other_element : other.r.entrySet()) {

        Sub other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Sub __this__r_copy_key = new Sub(other_element_key);

        Long __this__r_copy_value = other_element_value;

        __this__r.put(__this__r_copy_key, __this__r_copy_value);
      }
      this.r = __this__r;
    }
    if (other.isSetS()) {
      Map<Map<Map<Long,Long>,Long>,Long> __this__s = new HashMap<Map<Map<Long,Long>,Long>,Long>(other.s.size());
      for (Map.Entry<Map<Map<Long,Long>,Long>, Long> other_element : other.s.entrySet()) {

        Map<Map<Long,Long>,Long> other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Map<Map<Long,Long>,Long> __this__s_copy_key = new HashMap<Map<Long,Long>,Long>(other_element_key.size());
        for (Map.Entry<Map<Long,Long>, Long> other_element_key_element : other_element_key.entrySet()) {

          Map<Long,Long> other_element_key_element_key = other_element_key_element.getKey();
          Long other_element_key_element_value = other_element_key_element.getValue();

          Map<Long,Long> __this__s_copy_key_copy_key = new HashMap<Long,Long>(other_element_key_element_key);

          Long __this__s_copy_key_copy_value = other_element_key_element_value;

          __this__s_copy_key.put(__this__s_copy_key_copy_key, __this__s_copy_key_copy_value);
        }

        Long __this__s_copy_value = other_element_value;

        __this__s.put(__this__s_copy_key, __this__s_copy_value);
      }
      this.s = __this__s;
    }
    if (other.isSetT()) {
      List<Letter> __this__t = new ArrayList<Letter>(other.t.size());
      for (Letter other_element : other.t) {
        __this__t.add(other_element);
      }
      this.t = __this__t;
    }
    if (other.isSetU()) {
      Map<String,Letter> __this__u = new HashMap<String,Letter>(other.u.size());
      for (Map.Entry<String, Letter> other_element : other.u.entrySet()) {

        String other_element_key = other_element.getKey();
        Letter other_element_value = other_element.getValue();

        String __this__u_copy_key = other_element_key;

        Letter __this__u_copy_value = other_element_value;

        __this__u.put(__this__u_copy_key, __this__u_copy_value);
      }
      this.u = __this__u;
    }
    if (other.isSetV()) {
      this.v = other.v;
    }
    if (other.isSetW()) {
      this.w = new TestUnion(other.w);
    }
    if (other.isSetX()) {
      List<TestUnion> __this__x = new ArrayList<TestUnion>(other.x.size());
      for (TestUnion other_element : other.x) {
        __this__x.add(new TestUnion(other_element));
      }
      this.x = __this__x;
    }
    if (other.isSetY()) {
      this.y = other.y;
    }
    if (other.isSetAa()) {
      Map<Letter,Integer> __this__aa = new HashMap<Letter,Integer>(other.aa.size());
      for (Map.Entry<Letter, Integer> other_element : other.aa.entrySet()) {

        Letter other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Letter __this__aa_copy_key = other_element_key;

        Integer __this__aa_copy_value = other_element_value;

        __this__aa.put(__this__aa_copy_key, __this__aa_copy_value);
      }
      this.aa = __this__aa;
    }
    if (other.isSetAb()) {
      Map<Letter,Number> __this__ab = new HashMap<Letter,Number>(other.ab.size());
      for (Map.Entry<Letter, Number> other_element : other.ab.entrySet()) {

        Letter other_element_key = other_element.getKey();
        Number other_element_value = other_element.getValue();

        Letter __this__ab_copy_key = other_element_key;

        Number __this__ab_copy_value = other_element_value;

        __this__ab.put(__this__ab_copy_key, __this__ab_copy_value);
      }
      this.ab = __this__ab;
    }
    if (other.isSetAc()) {
      Map<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>> __this__ac = new HashMap<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>>(other.ac.size());
      for (Map.Entry<Map<Number,Integer>, Map<NumberSub,Map<String,List<Letter>>>> other_element : other.ac.entrySet()) {

        Map<Number,Integer> other_element_key = other_element.getKey();
        Map<NumberSub,Map<String,List<Letter>>> other_element_value = other_element.getValue();

        Map<Number,Integer> __this__ac_copy_key = new HashMap<Number,Integer>(other_element_key.size());
        for (Map.Entry<Number, Integer> other_element_key_element : other_element_key.entrySet()) {

          Number other_element_key_element_key = other_element_key_element.getKey();
          Integer other_element_key_element_value = other_element_key_element.getValue();

          Number __this__ac_copy_key_copy_key = other_element_key_element_key;

          Integer __this__ac_copy_key_copy_value = other_element_key_element_value;

          __this__ac_copy_key.put(__this__ac_copy_key_copy_key, __this__ac_copy_key_copy_value);
        }

        Map<NumberSub,Map<String,List<Letter>>> __this__ac_copy_value = new HashMap<NumberSub,Map<String,List<Letter>>>(other_element_value.size());
        for (Map.Entry<NumberSub, Map<String,List<Letter>>> other_element_value_element : other_element_value.entrySet()) {

          NumberSub other_element_value_element_key = other_element_value_element.getKey();
          Map<String,List<Letter>> other_element_value_element_value = other_element_value_element.getValue();

          NumberSub __this__ac_copy_value_copy_key = new NumberSub(other_element_value_element_key);

          Map<String,List<Letter>> __this__ac_copy_value_copy_value = new HashMap<String,List<Letter>>(other_element_value_element_value.size());
          for (Map.Entry<String, List<Letter>> other_element_value_element_value_element : other_element_value_element_value.entrySet()) {

            String other_element_value_element_value_element_key = other_element_value_element_value_element.getKey();
            List<Letter> other_element_value_element_value_element_value = other_element_value_element_value_element.getValue();

            String __this__ac_copy_value_copy_value_copy_key = other_element_value_element_value_element_key;

            List<Letter> __this__ac_copy_value_copy_value_copy_value = new ArrayList<Letter>(other_element_value_element_value_element_value.size());
            for (Letter other_element_value_element_value_element_value_element : other_element_value_element_value_element_value) {
              __this__ac_copy_value_copy_value_copy_value.add(other_element_value_element_value_element_value_element);
            }

            __this__ac_copy_value_copy_value.put(__this__ac_copy_value_copy_value_copy_key, __this__ac_copy_value_copy_value_copy_value);
          }

          __this__ac_copy_value.put(__this__ac_copy_value_copy_key, __this__ac_copy_value_copy_value);
        }

        __this__ac.put(__this__ac_copy_key, __this__ac_copy_value);
      }
      this.ac = __this__ac;
    }
  }

  public TTextProtocolTestMsg deepCopy() {
    return new TTextProtocolTestMsg(this);
  }

  @Override
  public void clear() {
    setAIsSet(false);
    this.a = 0;
    setBIsSet(false);
    this.b = 0;
    setNIsSet(false);
    this.n = 0;
    this.c = null;
    this.d = null;
    this.e = null;
    setFIsSet(false);
    this.f = false;
    setGIsSet(false);
    this.g = 0;
    this.h = null;
    this.j = null;
    this.k = null;
    this.l = null;
    this.m = null;
    this.p = null;
    this.q = null;
    this.r = null;
    this.s = null;
    this.t = null;
    this.u = null;
    this.v = null;
    this.w = null;
    this.x = null;
    this.y = null;
    this.aa = null;
    this.ab = null;
    this.ac = null;
  }

  public long getA() {
    return this.a;
  }

  public TTextProtocolTestMsg setA(long a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __A_ISSET_ID);
  }

  /** Returns true if field a is set (has been assigned a value) and false otherwise */
  public boolean isSetA() {
    return EncodingUtils.testBit(__isset_bitfield, __A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __A_ISSET_ID, value);
  }

  public int getB() {
    return this.b;
  }

  public TTextProtocolTestMsg setB(int b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public short getN() {
    return this.n;
  }

  public TTextProtocolTestMsg setN(short n) {
    this.n = n;
    setNIsSet(true);
    return this;
  }

  public void unsetN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __N_ISSET_ID);
  }

  /** Returns true if field n is set (has been assigned a value) and false otherwise */
  public boolean isSetN() {
    return EncodingUtils.testBit(__isset_bitfield, __N_ISSET_ID);
  }

  public void setNIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __N_ISSET_ID, value);
  }

  public Sub getC() {
    return this.c;
  }

  public TTextProtocolTestMsg setC(Sub c) {
    this.c = c;
    return this;
  }

  public void unsetC() {
    this.c = null;
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return this.c != null;
  }

  public void setCIsSet(boolean value) {
    if (!value) {
      this.c = null;
    }
  }

  public int getDSize() {
    return (this.d == null) ? 0 : this.d.size();
  }

  public java.util.Iterator<Integer> getDIterator() {
    return (this.d == null) ? null : this.d.iterator();
  }

  public void addToD(int elem) {
    if (this.d == null) {
      this.d = new ArrayList<Integer>();
    }
    this.d.add(elem);
  }

  public List<Integer> getD() {
    return this.d;
  }

  public TTextProtocolTestMsg setD(List<Integer> d) {
    this.d = d;
    return this;
  }

  public void unsetD() {
    this.d = null;
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean isSetD() {
    return this.d != null;
  }

  public void setDIsSet(boolean value) {
    if (!value) {
      this.d = null;
    }
  }

  public int getESize() {
    return (this.e == null) ? 0 : this.e.size();
  }

  public java.util.Iterator<Sub> getEIterator() {
    return (this.e == null) ? null : this.e.iterator();
  }

  public void addToE(Sub elem) {
    if (this.e == null) {
      this.e = new ArrayList<Sub>();
    }
    this.e.add(elem);
  }

  public List<Sub> getE() {
    return this.e;
  }

  public TTextProtocolTestMsg setE(List<Sub> e) {
    this.e = e;
    return this;
  }

  public void unsetE() {
    this.e = null;
  }

  /** Returns true if field e is set (has been assigned a value) and false otherwise */
  public boolean isSetE() {
    return this.e != null;
  }

  public void setEIsSet(boolean value) {
    if (!value) {
      this.e = null;
    }
  }

  public boolean isF() {
    return this.f;
  }

  public TTextProtocolTestMsg setF(boolean f) {
    this.f = f;
    setFIsSet(true);
    return this;
  }

  public void unsetF() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __F_ISSET_ID);
  }

  /** Returns true if field f is set (has been assigned a value) and false otherwise */
  public boolean isSetF() {
    return EncodingUtils.testBit(__isset_bitfield, __F_ISSET_ID);
  }

  public void setFIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __F_ISSET_ID, value);
  }

  public byte getG() {
    return this.g;
  }

  public TTextProtocolTestMsg setG(byte g) {
    this.g = g;
    setGIsSet(true);
    return this;
  }

  public void unsetG() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __G_ISSET_ID);
  }

  /** Returns true if field g is set (has been assigned a value) and false otherwise */
  public boolean isSetG() {
    return EncodingUtils.testBit(__isset_bitfield, __G_ISSET_ID);
  }

  public void setGIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __G_ISSET_ID, value);
  }

  public int getHSize() {
    return (this.h == null) ? 0 : this.h.size();
  }

  public void putToH(int key, long val) {
    if (this.h == null) {
      this.h = new HashMap<Integer,Long>();
    }
    this.h.put(key, val);
  }

  public Map<Integer,Long> getH() {
    return this.h;
  }

  public TTextProtocolTestMsg setH(Map<Integer,Long> h) {
    this.h = h;
    return this;
  }

  public void unsetH() {
    this.h = null;
  }

  /** Returns true if field h is set (has been assigned a value) and false otherwise */
  public boolean isSetH() {
    return this.h != null;
  }

  public void setHIsSet(boolean value) {
    if (!value) {
      this.h = null;
    }
  }

  public int getJSize() {
    return (this.j == null) ? 0 : this.j.size();
  }

  public void putToJ(short key, List<Boolean> val) {
    if (this.j == null) {
      this.j = new HashMap<Short,List<Boolean>>();
    }
    this.j.put(key, val);
  }

  public Map<Short,List<Boolean>> getJ() {
    return this.j;
  }

  public TTextProtocolTestMsg setJ(Map<Short,List<Boolean>> j) {
    this.j = j;
    return this;
  }

  public void unsetJ() {
    this.j = null;
  }

  /** Returns true if field j is set (has been assigned a value) and false otherwise */
  public boolean isSetJ() {
    return this.j != null;
  }

  public void setJIsSet(boolean value) {
    if (!value) {
      this.j = null;
    }
  }

  public int getKSize() {
    return (this.k == null) ? 0 : this.k.size();
  }

  public java.util.Iterator<Boolean> getKIterator() {
    return (this.k == null) ? null : this.k.iterator();
  }

  public void addToK(boolean elem) {
    if (this.k == null) {
      this.k = new HashSet<Boolean>();
    }
    this.k.add(elem);
  }

  public Set<Boolean> getK() {
    return this.k;
  }

  public TTextProtocolTestMsg setK(Set<Boolean> k) {
    this.k = k;
    return this;
  }

  public void unsetK() {
    this.k = null;
  }

  /** Returns true if field k is set (has been assigned a value) and false otherwise */
  public boolean isSetK() {
    return this.k != null;
  }

  public void setKIsSet(boolean value) {
    if (!value) {
      this.k = null;
    }
  }

  public byte[] getL() {
    setL(org.apache.thrift.TBaseHelper.rightSize(l));
    return l == null ? null : l.array();
  }

  public ByteBuffer bufferForL() {
    return l;
  }

  public TTextProtocolTestMsg setL(byte[] l) {
    setL(l == null ? (ByteBuffer)null : ByteBuffer.wrap(l));
    return this;
  }

  public TTextProtocolTestMsg setL(ByteBuffer l) {
    this.l = l;
    return this;
  }

  public void unsetL() {
    this.l = null;
  }

  /** Returns true if field l is set (has been assigned a value) and false otherwise */
  public boolean isSetL() {
    return this.l != null;
  }

  public void setLIsSet(boolean value) {
    if (!value) {
      this.l = null;
    }
  }

  public String getM() {
    return this.m;
  }

  public TTextProtocolTestMsg setM(String m) {
    this.m = m;
    return this;
  }

  public void unsetM() {
    this.m = null;
  }

  /** Returns true if field m is set (has been assigned a value) and false otherwise */
  public boolean isSetM() {
    return this.m != null;
  }

  public void setMIsSet(boolean value) {
    if (!value) {
      this.m = null;
    }
  }

  /**
   * 
   * @see Letter
   */
  public Letter getP() {
    return this.p;
  }

  /**
   * 
   * @see Letter
   */
  public TTextProtocolTestMsg setP(Letter p) {
    this.p = p;
    return this;
  }

  public void unsetP() {
    this.p = null;
  }

  /** Returns true if field p is set (has been assigned a value) and false otherwise */
  public boolean isSetP() {
    return this.p != null;
  }

  public void setPIsSet(boolean value) {
    if (!value) {
      this.p = null;
    }
  }

  public int getQSize() {
    return (this.q == null) ? 0 : this.q.size();
  }

  public java.util.Iterator<Letter> getQIterator() {
    return (this.q == null) ? null : this.q.iterator();
  }

  public void addToQ(Letter elem) {
    if (this.q == null) {
      this.q = new HashSet<Letter>();
    }
    this.q.add(elem);
  }

  public Set<Letter> getQ() {
    return this.q;
  }

  public TTextProtocolTestMsg setQ(Set<Letter> q) {
    this.q = q;
    return this;
  }

  public void unsetQ() {
    this.q = null;
  }

  /** Returns true if field q is set (has been assigned a value) and false otherwise */
  public boolean isSetQ() {
    return this.q != null;
  }

  public void setQIsSet(boolean value) {
    if (!value) {
      this.q = null;
    }
  }

  public int getRSize() {
    return (this.r == null) ? 0 : this.r.size();
  }

  public void putToR(Sub key, long val) {
    if (this.r == null) {
      this.r = new HashMap<Sub,Long>();
    }
    this.r.put(key, val);
  }

  public Map<Sub,Long> getR() {
    return this.r;
  }

  public TTextProtocolTestMsg setR(Map<Sub,Long> r) {
    this.r = r;
    return this;
  }

  public void unsetR() {
    this.r = null;
  }

  /** Returns true if field r is set (has been assigned a value) and false otherwise */
  public boolean isSetR() {
    return this.r != null;
  }

  public void setRIsSet(boolean value) {
    if (!value) {
      this.r = null;
    }
  }

  public int getSSize() {
    return (this.s == null) ? 0 : this.s.size();
  }

  public void putToS(Map<Map<Long,Long>,Long> key, long val) {
    if (this.s == null) {
      this.s = new HashMap<Map<Map<Long,Long>,Long>,Long>();
    }
    this.s.put(key, val);
  }

  public Map<Map<Map<Long,Long>,Long>,Long> getS() {
    return this.s;
  }

  public TTextProtocolTestMsg setS(Map<Map<Map<Long,Long>,Long>,Long> s) {
    this.s = s;
    return this;
  }

  public void unsetS() {
    this.s = null;
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean isSetS() {
    return this.s != null;
  }

  public void setSIsSet(boolean value) {
    if (!value) {
      this.s = null;
    }
  }

  public int getTSize() {
    return (this.t == null) ? 0 : this.t.size();
  }

  public java.util.Iterator<Letter> getTIterator() {
    return (this.t == null) ? null : this.t.iterator();
  }

  public void addToT(Letter elem) {
    if (this.t == null) {
      this.t = new ArrayList<Letter>();
    }
    this.t.add(elem);
  }

  public List<Letter> getT() {
    return this.t;
  }

  public TTextProtocolTestMsg setT(List<Letter> t) {
    this.t = t;
    return this;
  }

  public void unsetT() {
    this.t = null;
  }

  /** Returns true if field t is set (has been assigned a value) and false otherwise */
  public boolean isSetT() {
    return this.t != null;
  }

  public void setTIsSet(boolean value) {
    if (!value) {
      this.t = null;
    }
  }

  public int getUSize() {
    return (this.u == null) ? 0 : this.u.size();
  }

  public void putToU(String key, Letter val) {
    if (this.u == null) {
      this.u = new HashMap<String,Letter>();
    }
    this.u.put(key, val);
  }

  public Map<String,Letter> getU() {
    return this.u;
  }

  public TTextProtocolTestMsg setU(Map<String,Letter> u) {
    this.u = u;
    return this;
  }

  public void unsetU() {
    this.u = null;
  }

  /** Returns true if field u is set (has been assigned a value) and false otherwise */
  public boolean isSetU() {
    return this.u != null;
  }

  public void setUIsSet(boolean value) {
    if (!value) {
      this.u = null;
    }
  }

  /**
   * 
   * @see Letter
   */
  public Letter getV() {
    return this.v;
  }

  /**
   * 
   * @see Letter
   */
  public TTextProtocolTestMsg setV(Letter v) {
    this.v = v;
    return this;
  }

  public void unsetV() {
    this.v = null;
  }

  /** Returns true if field v is set (has been assigned a value) and false otherwise */
  public boolean isSetV() {
    return this.v != null;
  }

  public void setVIsSet(boolean value) {
    if (!value) {
      this.v = null;
    }
  }

  public TestUnion getW() {
    return this.w;
  }

  public TTextProtocolTestMsg setW(TestUnion w) {
    this.w = w;
    return this;
  }

  public void unsetW() {
    this.w = null;
  }

  /** Returns true if field w is set (has been assigned a value) and false otherwise */
  public boolean isSetW() {
    return this.w != null;
  }

  public void setWIsSet(boolean value) {
    if (!value) {
      this.w = null;
    }
  }

  public int getXSize() {
    return (this.x == null) ? 0 : this.x.size();
  }

  public java.util.Iterator<TestUnion> getXIterator() {
    return (this.x == null) ? null : this.x.iterator();
  }

  public void addToX(TestUnion elem) {
    if (this.x == null) {
      this.x = new ArrayList<TestUnion>();
    }
    this.x.add(elem);
  }

  public List<TestUnion> getX() {
    return this.x;
  }

  public TTextProtocolTestMsg setX(List<TestUnion> x) {
    this.x = x;
    return this;
  }

  public void unsetX() {
    this.x = null;
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return this.x != null;
  }

  public void setXIsSet(boolean value) {
    if (!value) {
      this.x = null;
    }
  }

  public Letter getY() {
    return this.y;
  }

  public TTextProtocolTestMsg setY(Letter y) {
    this.y = y;
    return this;
  }

  public void unsetY() {
    this.y = null;
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return this.y != null;
  }

  public void setYIsSet(boolean value) {
    if (!value) {
      this.y = null;
    }
  }

  public int getAaSize() {
    return (this.aa == null) ? 0 : this.aa.size();
  }

  public void putToAa(Letter key, int val) {
    if (this.aa == null) {
      this.aa = new HashMap<Letter,Integer>();
    }
    this.aa.put(key, val);
  }

  public Map<Letter,Integer> getAa() {
    return this.aa;
  }

  public TTextProtocolTestMsg setAa(Map<Letter,Integer> aa) {
    this.aa = aa;
    return this;
  }

  public void unsetAa() {
    this.aa = null;
  }

  /** Returns true if field aa is set (has been assigned a value) and false otherwise */
  public boolean isSetAa() {
    return this.aa != null;
  }

  public void setAaIsSet(boolean value) {
    if (!value) {
      this.aa = null;
    }
  }

  public int getAbSize() {
    return (this.ab == null) ? 0 : this.ab.size();
  }

  public void putToAb(Letter key, Number val) {
    if (this.ab == null) {
      this.ab = new HashMap<Letter,Number>();
    }
    this.ab.put(key, val);
  }

  public Map<Letter,Number> getAb() {
    return this.ab;
  }

  public TTextProtocolTestMsg setAb(Map<Letter,Number> ab) {
    this.ab = ab;
    return this;
  }

  public void unsetAb() {
    this.ab = null;
  }

  /** Returns true if field ab is set (has been assigned a value) and false otherwise */
  public boolean isSetAb() {
    return this.ab != null;
  }

  public void setAbIsSet(boolean value) {
    if (!value) {
      this.ab = null;
    }
  }

  public int getAcSize() {
    return (this.ac == null) ? 0 : this.ac.size();
  }

  public void putToAc(Map<Number,Integer> key, Map<NumberSub,Map<String,List<Letter>>> val) {
    if (this.ac == null) {
      this.ac = new HashMap<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>>();
    }
    this.ac.put(key, val);
  }

  public Map<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>> getAc() {
    return this.ac;
  }

  public TTextProtocolTestMsg setAc(Map<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>> ac) {
    this.ac = ac;
    return this;
  }

  public void unsetAc() {
    this.ac = null;
  }

  /** Returns true if field ac is set (has been assigned a value) and false otherwise */
  public boolean isSetAc() {
    return this.ac != null;
  }

  public void setAcIsSet(boolean value) {
    if (!value) {
      this.ac = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((Long)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((Integer)value);
      }
      break;

    case N:
      if (value == null) {
        unsetN();
      } else {
        setN((Short)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((Sub)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        setD((List<Integer>)value);
      }
      break;

    case E:
      if (value == null) {
        unsetE();
      } else {
        setE((List<Sub>)value);
      }
      break;

    case F:
      if (value == null) {
        unsetF();
      } else {
        setF((Boolean)value);
      }
      break;

    case G:
      if (value == null) {
        unsetG();
      } else {
        setG((Byte)value);
      }
      break;

    case H:
      if (value == null) {
        unsetH();
      } else {
        setH((Map<Integer,Long>)value);
      }
      break;

    case J:
      if (value == null) {
        unsetJ();
      } else {
        setJ((Map<Short,List<Boolean>>)value);
      }
      break;

    case K:
      if (value == null) {
        unsetK();
      } else {
        setK((Set<Boolean>)value);
      }
      break;

    case L:
      if (value == null) {
        unsetL();
      } else {
        setL((ByteBuffer)value);
      }
      break;

    case M:
      if (value == null) {
        unsetM();
      } else {
        setM((String)value);
      }
      break;

    case P:
      if (value == null) {
        unsetP();
      } else {
        setP((Letter)value);
      }
      break;

    case Q:
      if (value == null) {
        unsetQ();
      } else {
        setQ((Set<Letter>)value);
      }
      break;

    case R:
      if (value == null) {
        unsetR();
      } else {
        setR((Map<Sub,Long>)value);
      }
      break;

    case S:
      if (value == null) {
        unsetS();
      } else {
        setS((Map<Map<Map<Long,Long>,Long>,Long>)value);
      }
      break;

    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((List<Letter>)value);
      }
      break;

    case U:
      if (value == null) {
        unsetU();
      } else {
        setU((Map<String,Letter>)value);
      }
      break;

    case V:
      if (value == null) {
        unsetV();
      } else {
        setV((Letter)value);
      }
      break;

    case W:
      if (value == null) {
        unsetW();
      } else {
        setW((TestUnion)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((List<TestUnion>)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Letter)value);
      }
      break;

    case AA:
      if (value == null) {
        unsetAa();
      } else {
        setAa((Map<Letter,Integer>)value);
      }
      break;

    case AB:
      if (value == null) {
        unsetAb();
      } else {
        setAb((Map<Letter,Number>)value);
      }
      break;

    case AC:
      if (value == null) {
        unsetAc();
      } else {
        setAc((Map<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A:
      return Long.valueOf(getA());

    case B:
      return Integer.valueOf(getB());

    case N:
      return Short.valueOf(getN());

    case C:
      return getC();

    case D:
      return getD();

    case E:
      return getE();

    case F:
      return Boolean.valueOf(isF());

    case G:
      return Byte.valueOf(getG());

    case H:
      return getH();

    case J:
      return getJ();

    case K:
      return getK();

    case L:
      return getL();

    case M:
      return getM();

    case P:
      return getP();

    case Q:
      return getQ();

    case R:
      return getR();

    case S:
      return getS();

    case T:
      return getT();

    case U:
      return getU();

    case V:
      return getV();

    case W:
      return getW();

    case X:
      return getX();

    case Y:
      return getY();

    case AA:
      return getAa();

    case AB:
      return getAb();

    case AC:
      return getAc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case A:
      return isSetA();
    case B:
      return isSetB();
    case N:
      return isSetN();
    case C:
      return isSetC();
    case D:
      return isSetD();
    case E:
      return isSetE();
    case F:
      return isSetF();
    case G:
      return isSetG();
    case H:
      return isSetH();
    case J:
      return isSetJ();
    case K:
      return isSetK();
    case L:
      return isSetL();
    case M:
      return isSetM();
    case P:
      return isSetP();
    case Q:
      return isSetQ();
    case R:
      return isSetR();
    case S:
      return isSetS();
    case T:
      return isSetT();
    case U:
      return isSetU();
    case V:
      return isSetV();
    case W:
      return isSetW();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case AA:
      return isSetAa();
    case AB:
      return isSetAb();
    case AC:
      return isSetAc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTextProtocolTestMsg)
      return this.equals((TTextProtocolTestMsg)that);
    return false;
  }

  public boolean equals(TTextProtocolTestMsg that) {
    if (that == null)
      return false;

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (this.a != that.a)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_n = true;
    boolean that_present_n = true;
    if (this_present_n || that_present_n) {
      if (!(this_present_n && that_present_n))
        return false;
      if (this.n != that.n)
        return false;
    }

    boolean this_present_c = true && this.isSetC();
    boolean that_present_c = true && that.isSetC();
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (!this.c.equals(that.c))
        return false;
    }

    boolean this_present_d = true && this.isSetD();
    boolean that_present_d = true && that.isSetD();
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (!this.d.equals(that.d))
        return false;
    }

    boolean this_present_e = true && this.isSetE();
    boolean that_present_e = true && that.isSetE();
    if (this_present_e || that_present_e) {
      if (!(this_present_e && that_present_e))
        return false;
      if (!this.e.equals(that.e))
        return false;
    }

    boolean this_present_f = true;
    boolean that_present_f = true;
    if (this_present_f || that_present_f) {
      if (!(this_present_f && that_present_f))
        return false;
      if (this.f != that.f)
        return false;
    }

    boolean this_present_g = true;
    boolean that_present_g = true;
    if (this_present_g || that_present_g) {
      if (!(this_present_g && that_present_g))
        return false;
      if (this.g != that.g)
        return false;
    }

    boolean this_present_h = true && this.isSetH();
    boolean that_present_h = true && that.isSetH();
    if (this_present_h || that_present_h) {
      if (!(this_present_h && that_present_h))
        return false;
      if (!this.h.equals(that.h))
        return false;
    }

    boolean this_present_j = true && this.isSetJ();
    boolean that_present_j = true && that.isSetJ();
    if (this_present_j || that_present_j) {
      if (!(this_present_j && that_present_j))
        return false;
      if (!this.j.equals(that.j))
        return false;
    }

    boolean this_present_k = true && this.isSetK();
    boolean that_present_k = true && that.isSetK();
    if (this_present_k || that_present_k) {
      if (!(this_present_k && that_present_k))
        return false;
      if (!this.k.equals(that.k))
        return false;
    }

    boolean this_present_l = true && this.isSetL();
    boolean that_present_l = true && that.isSetL();
    if (this_present_l || that_present_l) {
      if (!(this_present_l && that_present_l))
        return false;
      if (!this.l.equals(that.l))
        return false;
    }

    boolean this_present_m = true && this.isSetM();
    boolean that_present_m = true && that.isSetM();
    if (this_present_m || that_present_m) {
      if (!(this_present_m && that_present_m))
        return false;
      if (!this.m.equals(that.m))
        return false;
    }

    boolean this_present_p = true && this.isSetP();
    boolean that_present_p = true && that.isSetP();
    if (this_present_p || that_present_p) {
      if (!(this_present_p && that_present_p))
        return false;
      if (!this.p.equals(that.p))
        return false;
    }

    boolean this_present_q = true && this.isSetQ();
    boolean that_present_q = true && that.isSetQ();
    if (this_present_q || that_present_q) {
      if (!(this_present_q && that_present_q))
        return false;
      if (!this.q.equals(that.q))
        return false;
    }

    boolean this_present_r = true && this.isSetR();
    boolean that_present_r = true && that.isSetR();
    if (this_present_r || that_present_r) {
      if (!(this_present_r && that_present_r))
        return false;
      if (!this.r.equals(that.r))
        return false;
    }

    boolean this_present_s = true && this.isSetS();
    boolean that_present_s = true && that.isSetS();
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (!this.s.equals(that.s))
        return false;
    }

    boolean this_present_t = true && this.isSetT();
    boolean that_present_t = true && that.isSetT();
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (!this.t.equals(that.t))
        return false;
    }

    boolean this_present_u = true && this.isSetU();
    boolean that_present_u = true && that.isSetU();
    if (this_present_u || that_present_u) {
      if (!(this_present_u && that_present_u))
        return false;
      if (!this.u.equals(that.u))
        return false;
    }

    boolean this_present_v = true && this.isSetV();
    boolean that_present_v = true && that.isSetV();
    if (this_present_v || that_present_v) {
      if (!(this_present_v && that_present_v))
        return false;
      if (!this.v.equals(that.v))
        return false;
    }

    boolean this_present_w = true && this.isSetW();
    boolean that_present_w = true && that.isSetW();
    if (this_present_w || that_present_w) {
      if (!(this_present_w && that_present_w))
        return false;
      if (!this.w.equals(that.w))
        return false;
    }

    boolean this_present_x = true && this.isSetX();
    boolean that_present_x = true && that.isSetX();
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (!this.x.equals(that.x))
        return false;
    }

    boolean this_present_y = true && this.isSetY();
    boolean that_present_y = true && that.isSetY();
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (!this.y.equals(that.y))
        return false;
    }

    boolean this_present_aa = true && this.isSetAa();
    boolean that_present_aa = true && that.isSetAa();
    if (this_present_aa || that_present_aa) {
      if (!(this_present_aa && that_present_aa))
        return false;
      if (!this.aa.equals(that.aa))
        return false;
    }

    boolean this_present_ab = true && this.isSetAb();
    boolean that_present_ab = true && that.isSetAb();
    if (this_present_ab || that_present_ab) {
      if (!(this_present_ab && that_present_ab))
        return false;
      if (!this.ab.equals(that.ab))
        return false;
    }

    boolean this_present_ac = true && this.isSetAc();
    boolean that_present_ac = true && that.isSetAc();
    if (this_present_ac || that_present_ac) {
      if (!(this_present_ac && that_present_ac))
        return false;
      if (!this.ac.equals(that.ac))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TTextProtocolTestMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN()).compareTo(other.isSetN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n, other.n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF()).compareTo(other.isSetF());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetG()).compareTo(other.isSetG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetH()).compareTo(other.isSetH());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetH()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.h, other.h);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJ()).compareTo(other.isSetJ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.j, other.j);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetK()).compareTo(other.isSetK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.k, other.k);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetL()).compareTo(other.isSetL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.l, other.l);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetM()).compareTo(other.isSetM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.m, other.m);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQ()).compareTo(other.isSetQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.q, other.q);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetR()).compareTo(other.isSetR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS()).compareTo(other.isSetS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetT()).compareTo(other.isSetT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t, other.t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetU()).compareTo(other.isSetU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.u, other.u);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetV()).compareTo(other.isSetV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v, other.v);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetW()).compareTo(other.isSetW());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetW()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.w, other.w);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAa()).compareTo(other.isSetAa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aa, other.aa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAb()).compareTo(other.isSetAb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ab, other.ab);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAc()).compareTo(other.isSetAc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ac, other.ac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTextProtocolTestMsg(");
    boolean first = true;

    sb.append("a:");
    sb.append(this.a);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n:");
    sb.append(this.n);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c:");
    if (this.c == null) {
      sb.append("null");
    } else {
      sb.append(this.c);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("d:");
    if (this.d == null) {
      sb.append("null");
    } else {
      sb.append(this.d);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("e:");
    if (this.e == null) {
      sb.append("null");
    } else {
      sb.append(this.e);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("f:");
    sb.append(this.f);
    first = false;
    if (!first) sb.append(", ");
    sb.append("g:");
    sb.append(this.g);
    first = false;
    if (!first) sb.append(", ");
    sb.append("h:");
    if (this.h == null) {
      sb.append("null");
    } else {
      sb.append(this.h);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("j:");
    if (this.j == null) {
      sb.append("null");
    } else {
      sb.append(this.j);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("k:");
    if (this.k == null) {
      sb.append("null");
    } else {
      sb.append(this.k);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("l:");
    if (this.l == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.l, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("m:");
    if (this.m == null) {
      sb.append("null");
    } else {
      sb.append(this.m);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p:");
    if (this.p == null) {
      sb.append("null");
    } else {
      sb.append(this.p);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("q:");
    if (this.q == null) {
      sb.append("null");
    } else {
      sb.append(this.q);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("r:");
    if (this.r == null) {
      sb.append("null");
    } else {
      sb.append(this.r);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s:");
    if (this.s == null) {
      sb.append("null");
    } else {
      sb.append(this.s);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("t:");
    if (this.t == null) {
      sb.append("null");
    } else {
      sb.append(this.t);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("u:");
    if (this.u == null) {
      sb.append("null");
    } else {
      sb.append(this.u);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("v:");
    if (this.v == null) {
      sb.append("null");
    } else {
      sb.append(this.v);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("w:");
    if (this.w == null) {
      sb.append("null");
    } else {
      sb.append(this.w);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("x:");
    if (this.x == null) {
      sb.append("null");
    } else {
      sb.append(this.x);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    if (this.y == null) {
      sb.append("null");
    } else {
      sb.append(this.y);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aa:");
    if (this.aa == null) {
      sb.append("null");
    } else {
      sb.append(this.aa);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ab:");
    if (this.ab == null) {
      sb.append("null");
    } else {
      sb.append(this.ab);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ac:");
    if (this.ac == null) {
      sb.append("null");
    } else {
      sb.append(this.ac);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'a' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'b' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'n' because it's a primitive and you chose the non-beans generator.
    if (c == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'c' was not present! Struct: " + toString());
    }
    if (d == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'd' was not present! Struct: " + toString());
    }
    if (e == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'e' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'f' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'g' because it's a primitive and you chose the non-beans generator.
    if (h == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'h' was not present! Struct: " + toString());
    }
    if (j == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'j' was not present! Struct: " + toString());
    }
    if (k == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'k' was not present! Struct: " + toString());
    }
    if (l == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'l' was not present! Struct: " + toString());
    }
    if (m == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'm' was not present! Struct: " + toString());
    }
    if (p == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'p' was not present! Struct: " + toString());
    }
    if (q == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'q' was not present! Struct: " + toString());
    }
    if (r == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'r' was not present! Struct: " + toString());
    }
    if (s == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 's' was not present! Struct: " + toString());
    }
    if (t == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 't' was not present! Struct: " + toString());
    }
    if (u == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'u' was not present! Struct: " + toString());
    }
    if (v == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'v' was not present! Struct: " + toString());
    }
    if (w == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'w' was not present! Struct: " + toString());
    }
    if (x == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'x' was not present! Struct: " + toString());
    }
    if (aa == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aa' was not present! Struct: " + toString());
    }
    if (ab == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ab' was not present! Struct: " + toString());
    }
    if (ac == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ac' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (c != null) {
      c.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTextProtocolTestMsgStandardSchemeFactory implements SchemeFactory {
    public TTextProtocolTestMsgStandardScheme getScheme() {
      return new TTextProtocolTestMsgStandardScheme();
    }
  }

  private static class TTextProtocolTestMsgStandardScheme extends StandardScheme<TTextProtocolTestMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTextProtocolTestMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.a = iprot.readI64();
              struct.setAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.b = iprot.readI32();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // N
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.n = iprot.readI16();
              struct.setNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.c = new Sub();
              struct.c.read(iprot);
              struct.setCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.d = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.d.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // E
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.e = new ArrayList<Sub>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Sub _elem5;
                  _elem5 = new Sub();
                  _elem5.read(iprot);
                  struct.e.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // F
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.f = iprot.readBool();
              struct.setFIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // G
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.g = iprot.readByte();
              struct.setGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // H
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.h = new HashMap<Integer,Long>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  int _key8;
                  long _val9;
                  _key8 = iprot.readI32();
                  _val9 = iprot.readI64();
                  struct.h.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.setHIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // J
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.j = new HashMap<Short,List<Boolean>>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  short _key12;
                  List<Boolean> _val13;
                  _key12 = iprot.readI16();
                  {
                    org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                    _val13 = new ArrayList<Boolean>(_list14.size);
                    for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                    {
                      boolean _elem16;
                      _elem16 = iprot.readBool();
                      _val13.add(_elem16);
                    }
                    iprot.readListEnd();
                  }
                  struct.j.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setJIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // K
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set17 = iprot.readSetBegin();
                struct.k = new HashSet<Boolean>(2*_set17.size);
                for (int _i18 = 0; _i18 < _set17.size; ++_i18)
                {
                  boolean _elem19;
                  _elem19 = iprot.readBool();
                  struct.k.add(_elem19);
                }
                iprot.readSetEnd();
              }
              struct.setKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // L
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.l = iprot.readBinary();
              struct.setLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // M
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.m = iprot.readString();
              struct.setMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // P
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.p = Letter.findByValue(iprot.readI32());
              struct.setPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // Q
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set20 = iprot.readSetBegin();
                struct.q = new HashSet<Letter>(2*_set20.size);
                for (int _i21 = 0; _i21 < _set20.size; ++_i21)
                {
                  Letter _elem22;
                  _elem22 = Letter.findByValue(iprot.readI32());
                  struct.q.add(_elem22);
                }
                iprot.readSetEnd();
              }
              struct.setQIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // R
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                struct.r = new HashMap<Sub,Long>(2*_map23.size);
                for (int _i24 = 0; _i24 < _map23.size; ++_i24)
                {
                  Sub _key25;
                  long _val26;
                  _key25 = new Sub();
                  _key25.read(iprot);
                  _val26 = iprot.readI64();
                  struct.r.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.s = new HashMap<Map<Map<Long,Long>,Long>,Long>(2*_map27.size);
                for (int _i28 = 0; _i28 < _map27.size; ++_i28)
                {
                  Map<Map<Long,Long>,Long> _key29;
                  long _val30;
                  {
                    org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                    _key29 = new HashMap<Map<Long,Long>,Long>(2*_map31.size);
                    for (int _i32 = 0; _i32 < _map31.size; ++_i32)
                    {
                      Map<Long,Long> _key33;
                      long _val34;
                      {
                        org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                        _key33 = new HashMap<Long,Long>(2*_map35.size);
                        for (int _i36 = 0; _i36 < _map35.size; ++_i36)
                        {
                          long _key37;
                          long _val38;
                          _key37 = iprot.readI64();
                          _val38 = iprot.readI64();
                          _key33.put(_key37, _val38);
                        }
                        iprot.readMapEnd();
                      }
                      _val34 = iprot.readI64();
                      _key29.put(_key33, _val34);
                    }
                    iprot.readMapEnd();
                  }
                  _val30 = iprot.readI64();
                  struct.s.put(_key29, _val30);
                }
                iprot.readMapEnd();
              }
              struct.setSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // T
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.t = new ArrayList<Letter>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40)
                {
                  Letter _elem41;
                  _elem41 = Letter.findByValue(iprot.readI32());
                  struct.t.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // U
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                struct.u = new HashMap<String,Letter>(2*_map42.size);
                for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                {
                  String _key44;
                  Letter _val45;
                  _key44 = iprot.readString();
                  _val45 = Letter.findByValue(iprot.readI32());
                  struct.u.put(_key44, _val45);
                }
                iprot.readMapEnd();
              }
              struct.setUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // V
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.v = Letter.findByValue(iprot.readI32());
              struct.setVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // W
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.w = new TestUnion();
              struct.w.read(iprot);
              struct.setWIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.x = new ArrayList<TestUnion>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  TestUnion _elem48;
                  _elem48 = new TestUnion();
                  _elem48.read(iprot);
                  struct.x.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = Letter.findByValue(iprot.readI32());
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // AA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map49 = iprot.readMapBegin();
                struct.aa = new HashMap<Letter,Integer>(2*_map49.size);
                for (int _i50 = 0; _i50 < _map49.size; ++_i50)
                {
                  Letter _key51;
                  int _val52;
                  _key51 = Letter.findByValue(iprot.readI32());
                  _val52 = iprot.readI32();
                  struct.aa.put(_key51, _val52);
                }
                iprot.readMapEnd();
              }
              struct.setAaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // AB
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map53 = iprot.readMapBegin();
                struct.ab = new HashMap<Letter,Number>(2*_map53.size);
                for (int _i54 = 0; _i54 < _map53.size; ++_i54)
                {
                  Letter _key55;
                  Number _val56;
                  _key55 = Letter.findByValue(iprot.readI32());
                  _val56 = Number.findByValue(iprot.readI32());
                  struct.ab.put(_key55, _val56);
                }
                iprot.readMapEnd();
              }
              struct.setAbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // AC
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map57 = iprot.readMapBegin();
                struct.ac = new HashMap<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>>(2*_map57.size);
                for (int _i58 = 0; _i58 < _map57.size; ++_i58)
                {
                  Map<Number,Integer> _key59;
                  Map<NumberSub,Map<String,List<Letter>>> _val60;
                  {
                    org.apache.thrift.protocol.TMap _map61 = iprot.readMapBegin();
                    _key59 = new HashMap<Number,Integer>(2*_map61.size);
                    for (int _i62 = 0; _i62 < _map61.size; ++_i62)
                    {
                      Number _key63;
                      int _val64;
                      _key63 = Number.findByValue(iprot.readI32());
                      _val64 = iprot.readI32();
                      _key59.put(_key63, _val64);
                    }
                    iprot.readMapEnd();
                  }
                  {
                    org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                    _val60 = new HashMap<NumberSub,Map<String,List<Letter>>>(2*_map65.size);
                    for (int _i66 = 0; _i66 < _map65.size; ++_i66)
                    {
                      NumberSub _key67;
                      Map<String,List<Letter>> _val68;
                      _key67 = new NumberSub();
                      _key67.read(iprot);
                      {
                        org.apache.thrift.protocol.TMap _map69 = iprot.readMapBegin();
                        _val68 = new HashMap<String,List<Letter>>(2*_map69.size);
                        for (int _i70 = 0; _i70 < _map69.size; ++_i70)
                        {
                          String _key71;
                          List<Letter> _val72;
                          _key71 = iprot.readString();
                          {
                            org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                            _val72 = new ArrayList<Letter>(_list73.size);
                            for (int _i74 = 0; _i74 < _list73.size; ++_i74)
                            {
                              Letter _elem75;
                              _elem75 = Letter.findByValue(iprot.readI32());
                              _val72.add(_elem75);
                            }
                            iprot.readListEnd();
                          }
                          _val68.put(_key71, _val72);
                        }
                        iprot.readMapEnd();
                      }
                      _val60.put(_key67, _val68);
                    }
                    iprot.readMapEnd();
                  }
                  struct.ac.put(_key59, _val60);
                }
                iprot.readMapEnd();
              }
              struct.setAcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetA()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetB()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'b' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetN()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'n' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetF()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'f' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetG()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'g' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTextProtocolTestMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(A_FIELD_DESC);
      oprot.writeI64(struct.a);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeI32(struct.b);
      oprot.writeFieldEnd();
      if (struct.c != null) {
        oprot.writeFieldBegin(C_FIELD_DESC);
        struct.c.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.d != null) {
        oprot.writeFieldBegin(D_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.d.size()));
          for (int _iter76 : struct.d)
          {
            oprot.writeI32(_iter76);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.e != null) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.e.size()));
          for (Sub _iter77 : struct.e)
          {
            _iter77.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(F_FIELD_DESC);
      oprot.writeBool(struct.f);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(G_FIELD_DESC);
      oprot.writeByte(struct.g);
      oprot.writeFieldEnd();
      if (struct.h != null) {
        oprot.writeFieldBegin(H_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.h.size()));
          for (Map.Entry<Integer, Long> _iter78 : struct.h.entrySet())
          {
            oprot.writeI32(_iter78.getKey());
            oprot.writeI64(_iter78.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.j != null) {
        oprot.writeFieldBegin(J_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.LIST, struct.j.size()));
          for (Map.Entry<Short, List<Boolean>> _iter79 : struct.j.entrySet())
          {
            oprot.writeI16(_iter79.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, _iter79.getValue().size()));
              for (boolean _iter80 : _iter79.getValue())
              {
                oprot.writeBool(_iter80);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.k != null) {
        oprot.writeFieldBegin(K_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, struct.k.size()));
          for (boolean _iter81 : struct.k)
          {
            oprot.writeBool(_iter81);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.l != null) {
        oprot.writeFieldBegin(L_FIELD_DESC);
        oprot.writeBinary(struct.l);
        oprot.writeFieldEnd();
      }
      if (struct.m != null) {
        oprot.writeFieldBegin(M_FIELD_DESC);
        oprot.writeString(struct.m);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(N_FIELD_DESC);
      oprot.writeI16(struct.n);
      oprot.writeFieldEnd();
      if (struct.p != null) {
        oprot.writeFieldBegin(P_FIELD_DESC);
        oprot.writeI32(struct.p.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.q != null) {
        oprot.writeFieldBegin(Q_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.q.size()));
          for (Letter _iter82 : struct.q)
          {
            oprot.writeI32(_iter82.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.r != null) {
        oprot.writeFieldBegin(R_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, struct.r.size()));
          for (Map.Entry<Sub, Long> _iter83 : struct.r.entrySet())
          {
            _iter83.getKey().write(oprot);
            oprot.writeI64(_iter83.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.s != null) {
        oprot.writeFieldBegin(S_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.I64, struct.s.size()));
          for (Map.Entry<Map<Map<Long,Long>,Long>, Long> _iter84 : struct.s.entrySet())
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.I64, _iter84.getKey().size()));
              for (Map.Entry<Map<Long,Long>, Long> _iter85 : _iter84.getKey().entrySet())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, _iter85.getKey().size()));
                  for (Map.Entry<Long, Long> _iter86 : _iter85.getKey().entrySet())
                  {
                    oprot.writeI64(_iter86.getKey());
                    oprot.writeI64(_iter86.getValue());
                  }
                  oprot.writeMapEnd();
                }
                oprot.writeI64(_iter85.getValue());
              }
              oprot.writeMapEnd();
            }
            oprot.writeI64(_iter84.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.t != null) {
        oprot.writeFieldBegin(T_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.t.size()));
          for (Letter _iter87 : struct.t)
          {
            oprot.writeI32(_iter87.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.u != null) {
        oprot.writeFieldBegin(U_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.u.size()));
          for (Map.Entry<String, Letter> _iter88 : struct.u.entrySet())
          {
            oprot.writeString(_iter88.getKey());
            oprot.writeI32(_iter88.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.v != null) {
        oprot.writeFieldBegin(V_FIELD_DESC);
        oprot.writeI32(struct.v.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.w != null) {
        oprot.writeFieldBegin(W_FIELD_DESC);
        struct.w.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.x != null) {
        oprot.writeFieldBegin(X_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.x.size()));
          for (TestUnion _iter89 : struct.x)
          {
            _iter89.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.y != null) {
        oprot.writeFieldBegin(Y_FIELD_DESC);
        oprot.writeI32(struct.y.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.aa != null) {
        oprot.writeFieldBegin(AA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.aa.size()));
          for (Map.Entry<Letter, Integer> _iter90 : struct.aa.entrySet())
          {
            oprot.writeI32(_iter90.getKey().getValue());
            oprot.writeI32(_iter90.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ab != null) {
        oprot.writeFieldBegin(AB_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.ab.size()));
          for (Map.Entry<Letter, Number> _iter91 : struct.ab.entrySet())
          {
            oprot.writeI32(_iter91.getKey().getValue());
            oprot.writeI32(_iter91.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ac != null) {
        oprot.writeFieldBegin(AC_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.MAP, struct.ac.size()));
          for (Map.Entry<Map<Number,Integer>, Map<NumberSub,Map<String,List<Letter>>>> _iter92 : struct.ac.entrySet())
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter92.getKey().size()));
              for (Map.Entry<Number, Integer> _iter93 : _iter92.getKey().entrySet())
              {
                oprot.writeI32(_iter93.getKey().getValue());
                oprot.writeI32(_iter93.getValue());
              }
              oprot.writeMapEnd();
            }
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP, _iter92.getValue().size()));
              for (Map.Entry<NumberSub, Map<String,List<Letter>>> _iter94 : _iter92.getValue().entrySet())
              {
                _iter94.getKey().write(oprot);
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter94.getValue().size()));
                  for (Map.Entry<String, List<Letter>> _iter95 : _iter94.getValue().entrySet())
                  {
                    oprot.writeString(_iter95.getKey());
                    {
                      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter95.getValue().size()));
                      for (Letter _iter96 : _iter95.getValue())
                      {
                        oprot.writeI32(_iter96.getValue());
                      }
                      oprot.writeListEnd();
                    }
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTextProtocolTestMsgTupleSchemeFactory implements SchemeFactory {
    public TTextProtocolTestMsgTupleScheme getScheme() {
      return new TTextProtocolTestMsgTupleScheme();
    }
  }

  private static class TTextProtocolTestMsgTupleScheme extends TupleScheme<TTextProtocolTestMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTextProtocolTestMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.a);
      oprot.writeI32(struct.b);
      oprot.writeI16(struct.n);
      struct.c.write(oprot);
      {
        oprot.writeI32(struct.d.size());
        for (int _iter97 : struct.d)
        {
          oprot.writeI32(_iter97);
        }
      }
      {
        oprot.writeI32(struct.e.size());
        for (Sub _iter98 : struct.e)
        {
          _iter98.write(oprot);
        }
      }
      oprot.writeBool(struct.f);
      oprot.writeByte(struct.g);
      {
        oprot.writeI32(struct.h.size());
        for (Map.Entry<Integer, Long> _iter99 : struct.h.entrySet())
        {
          oprot.writeI32(_iter99.getKey());
          oprot.writeI64(_iter99.getValue());
        }
      }
      {
        oprot.writeI32(struct.j.size());
        for (Map.Entry<Short, List<Boolean>> _iter100 : struct.j.entrySet())
        {
          oprot.writeI16(_iter100.getKey());
          {
            oprot.writeI32(_iter100.getValue().size());
            for (boolean _iter101 : _iter100.getValue())
            {
              oprot.writeBool(_iter101);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.k.size());
        for (boolean _iter102 : struct.k)
        {
          oprot.writeBool(_iter102);
        }
      }
      oprot.writeBinary(struct.l);
      oprot.writeString(struct.m);
      oprot.writeI32(struct.p.getValue());
      {
        oprot.writeI32(struct.q.size());
        for (Letter _iter103 : struct.q)
        {
          oprot.writeI32(_iter103.getValue());
        }
      }
      {
        oprot.writeI32(struct.r.size());
        for (Map.Entry<Sub, Long> _iter104 : struct.r.entrySet())
        {
          _iter104.getKey().write(oprot);
          oprot.writeI64(_iter104.getValue());
        }
      }
      {
        oprot.writeI32(struct.s.size());
        for (Map.Entry<Map<Map<Long,Long>,Long>, Long> _iter105 : struct.s.entrySet())
        {
          {
            oprot.writeI32(_iter105.getKey().size());
            for (Map.Entry<Map<Long,Long>, Long> _iter106 : _iter105.getKey().entrySet())
            {
              {
                oprot.writeI32(_iter106.getKey().size());
                for (Map.Entry<Long, Long> _iter107 : _iter106.getKey().entrySet())
                {
                  oprot.writeI64(_iter107.getKey());
                  oprot.writeI64(_iter107.getValue());
                }
              }
              oprot.writeI64(_iter106.getValue());
            }
          }
          oprot.writeI64(_iter105.getValue());
        }
      }
      {
        oprot.writeI32(struct.t.size());
        for (Letter _iter108 : struct.t)
        {
          oprot.writeI32(_iter108.getValue());
        }
      }
      {
        oprot.writeI32(struct.u.size());
        for (Map.Entry<String, Letter> _iter109 : struct.u.entrySet())
        {
          oprot.writeString(_iter109.getKey());
          oprot.writeI32(_iter109.getValue().getValue());
        }
      }
      oprot.writeI32(struct.v.getValue());
      struct.w.write(oprot);
      {
        oprot.writeI32(struct.x.size());
        for (TestUnion _iter110 : struct.x)
        {
          _iter110.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.aa.size());
        for (Map.Entry<Letter, Integer> _iter111 : struct.aa.entrySet())
        {
          oprot.writeI32(_iter111.getKey().getValue());
          oprot.writeI32(_iter111.getValue());
        }
      }
      {
        oprot.writeI32(struct.ab.size());
        for (Map.Entry<Letter, Number> _iter112 : struct.ab.entrySet())
        {
          oprot.writeI32(_iter112.getKey().getValue());
          oprot.writeI32(_iter112.getValue().getValue());
        }
      }
      {
        oprot.writeI32(struct.ac.size());
        for (Map.Entry<Map<Number,Integer>, Map<NumberSub,Map<String,List<Letter>>>> _iter113 : struct.ac.entrySet())
        {
          {
            oprot.writeI32(_iter113.getKey().size());
            for (Map.Entry<Number, Integer> _iter114 : _iter113.getKey().entrySet())
            {
              oprot.writeI32(_iter114.getKey().getValue());
              oprot.writeI32(_iter114.getValue());
            }
          }
          {
            oprot.writeI32(_iter113.getValue().size());
            for (Map.Entry<NumberSub, Map<String,List<Letter>>> _iter115 : _iter113.getValue().entrySet())
            {
              _iter115.getKey().write(oprot);
              {
                oprot.writeI32(_iter115.getValue().size());
                for (Map.Entry<String, List<Letter>> _iter116 : _iter115.getValue().entrySet())
                {
                  oprot.writeString(_iter116.getKey());
                  {
                    oprot.writeI32(_iter116.getValue().size());
                    for (Letter _iter117 : _iter116.getValue())
                    {
                      oprot.writeI32(_iter117.getValue());
                    }
                  }
                }
              }
            }
          }
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetY()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetY()) {
        oprot.writeI32(struct.y.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTextProtocolTestMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.a = iprot.readI64();
      struct.setAIsSet(true);
      struct.b = iprot.readI32();
      struct.setBIsSet(true);
      struct.n = iprot.readI16();
      struct.setNIsSet(true);
      struct.c = new Sub();
      struct.c.read(iprot);
      struct.setCIsSet(true);
      {
        org.apache.thrift.protocol.TList _list118 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.d = new ArrayList<Integer>(_list118.size);
        for (int _i119 = 0; _i119 < _list118.size; ++_i119)
        {
          int _elem120;
          _elem120 = iprot.readI32();
          struct.d.add(_elem120);
        }
      }
      struct.setDIsSet(true);
      {
        org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.e = new ArrayList<Sub>(_list121.size);
        for (int _i122 = 0; _i122 < _list121.size; ++_i122)
        {
          Sub _elem123;
          _elem123 = new Sub();
          _elem123.read(iprot);
          struct.e.add(_elem123);
        }
      }
      struct.setEIsSet(true);
      struct.f = iprot.readBool();
      struct.setFIsSet(true);
      struct.g = iprot.readByte();
      struct.setGIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.h = new HashMap<Integer,Long>(2*_map124.size);
        for (int _i125 = 0; _i125 < _map124.size; ++_i125)
        {
          int _key126;
          long _val127;
          _key126 = iprot.readI32();
          _val127 = iprot.readI64();
          struct.h.put(_key126, _val127);
        }
      }
      struct.setHIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.j = new HashMap<Short,List<Boolean>>(2*_map128.size);
        for (int _i129 = 0; _i129 < _map128.size; ++_i129)
        {
          short _key130;
          List<Boolean> _val131;
          _key130 = iprot.readI16();
          {
            org.apache.thrift.protocol.TList _list132 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            _val131 = new ArrayList<Boolean>(_list132.size);
            for (int _i133 = 0; _i133 < _list132.size; ++_i133)
            {
              boolean _elem134;
              _elem134 = iprot.readBool();
              _val131.add(_elem134);
            }
          }
          struct.j.put(_key130, _val131);
        }
      }
      struct.setJIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set135 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.k = new HashSet<Boolean>(2*_set135.size);
        for (int _i136 = 0; _i136 < _set135.size; ++_i136)
        {
          boolean _elem137;
          _elem137 = iprot.readBool();
          struct.k.add(_elem137);
        }
      }
      struct.setKIsSet(true);
      struct.l = iprot.readBinary();
      struct.setLIsSet(true);
      struct.m = iprot.readString();
      struct.setMIsSet(true);
      struct.p = Letter.findByValue(iprot.readI32());
      struct.setPIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set138 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.q = new HashSet<Letter>(2*_set138.size);
        for (int _i139 = 0; _i139 < _set138.size; ++_i139)
        {
          Letter _elem140;
          _elem140 = Letter.findByValue(iprot.readI32());
          struct.q.add(_elem140);
        }
      }
      struct.setQIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map141 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.r = new HashMap<Sub,Long>(2*_map141.size);
        for (int _i142 = 0; _i142 < _map141.size; ++_i142)
        {
          Sub _key143;
          long _val144;
          _key143 = new Sub();
          _key143.read(iprot);
          _val144 = iprot.readI64();
          struct.r.put(_key143, _val144);
        }
      }
      struct.setRIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map145 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.s = new HashMap<Map<Map<Long,Long>,Long>,Long>(2*_map145.size);
        for (int _i146 = 0; _i146 < _map145.size; ++_i146)
        {
          Map<Map<Long,Long>,Long> _key147;
          long _val148;
          {
            org.apache.thrift.protocol.TMap _map149 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _key147 = new HashMap<Map<Long,Long>,Long>(2*_map149.size);
            for (int _i150 = 0; _i150 < _map149.size; ++_i150)
            {
              Map<Long,Long> _key151;
              long _val152;
              {
                org.apache.thrift.protocol.TMap _map153 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _key151 = new HashMap<Long,Long>(2*_map153.size);
                for (int _i154 = 0; _i154 < _map153.size; ++_i154)
                {
                  long _key155;
                  long _val156;
                  _key155 = iprot.readI64();
                  _val156 = iprot.readI64();
                  _key151.put(_key155, _val156);
                }
              }
              _val152 = iprot.readI64();
              _key147.put(_key151, _val152);
            }
          }
          _val148 = iprot.readI64();
          struct.s.put(_key147, _val148);
        }
      }
      struct.setSIsSet(true);
      {
        org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.t = new ArrayList<Letter>(_list157.size);
        for (int _i158 = 0; _i158 < _list157.size; ++_i158)
        {
          Letter _elem159;
          _elem159 = Letter.findByValue(iprot.readI32());
          struct.t.add(_elem159);
        }
      }
      struct.setTIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map160 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.u = new HashMap<String,Letter>(2*_map160.size);
        for (int _i161 = 0; _i161 < _map160.size; ++_i161)
        {
          String _key162;
          Letter _val163;
          _key162 = iprot.readString();
          _val163 = Letter.findByValue(iprot.readI32());
          struct.u.put(_key162, _val163);
        }
      }
      struct.setUIsSet(true);
      struct.v = Letter.findByValue(iprot.readI32());
      struct.setVIsSet(true);
      struct.w = new TestUnion();
      struct.w.read(iprot);
      struct.setWIsSet(true);
      {
        org.apache.thrift.protocol.TList _list164 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.x = new ArrayList<TestUnion>(_list164.size);
        for (int _i165 = 0; _i165 < _list164.size; ++_i165)
        {
          TestUnion _elem166;
          _elem166 = new TestUnion();
          _elem166.read(iprot);
          struct.x.add(_elem166);
        }
      }
      struct.setXIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map167 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.aa = new HashMap<Letter,Integer>(2*_map167.size);
        for (int _i168 = 0; _i168 < _map167.size; ++_i168)
        {
          Letter _key169;
          int _val170;
          _key169 = Letter.findByValue(iprot.readI32());
          _val170 = iprot.readI32();
          struct.aa.put(_key169, _val170);
        }
      }
      struct.setAaIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map171 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.ab = new HashMap<Letter,Number>(2*_map171.size);
        for (int _i172 = 0; _i172 < _map171.size; ++_i172)
        {
          Letter _key173;
          Number _val174;
          _key173 = Letter.findByValue(iprot.readI32());
          _val174 = Number.findByValue(iprot.readI32());
          struct.ab.put(_key173, _val174);
        }
      }
      struct.setAbIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map175 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.MAP, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.ac = new HashMap<Map<Number,Integer>,Map<NumberSub,Map<String,List<Letter>>>>(2*_map175.size);
        for (int _i176 = 0; _i176 < _map175.size; ++_i176)
        {
          Map<Number,Integer> _key177;
          Map<NumberSub,Map<String,List<Letter>>> _val178;
          {
            org.apache.thrift.protocol.TMap _map179 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            _key177 = new HashMap<Number,Integer>(2*_map179.size);
            for (int _i180 = 0; _i180 < _map179.size; ++_i180)
            {
              Number _key181;
              int _val182;
              _key181 = Number.findByValue(iprot.readI32());
              _val182 = iprot.readI32();
              _key177.put(_key181, _val182);
            }
          }
          {
            org.apache.thrift.protocol.TMap _map183 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            _val178 = new HashMap<NumberSub,Map<String,List<Letter>>>(2*_map183.size);
            for (int _i184 = 0; _i184 < _map183.size; ++_i184)
            {
              NumberSub _key185;
              Map<String,List<Letter>> _val186;
              _key185 = new NumberSub();
              _key185.read(iprot);
              {
                org.apache.thrift.protocol.TMap _map187 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _val186 = new HashMap<String,List<Letter>>(2*_map187.size);
                for (int _i188 = 0; _i188 < _map187.size; ++_i188)
                {
                  String _key189;
                  List<Letter> _val190;
                  _key189 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                    _val190 = new ArrayList<Letter>(_list191.size);
                    for (int _i192 = 0; _i192 < _list191.size; ++_i192)
                    {
                      Letter _elem193;
                      _elem193 = Letter.findByValue(iprot.readI32());
                      _val190.add(_elem193);
                    }
                  }
                  _val186.put(_key189, _val190);
                }
              }
              _val178.put(_key185, _val186);
            }
          }
          struct.ac.put(_key177, _val178);
        }
      }
      struct.setAcIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.y = Letter.findByValue(iprot.readI32());
        struct.setYIsSet(true);
      }
    }
  }

}

