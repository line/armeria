import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.security.MessageDigest

def offlineJavadoc = rootProject.hasProperty('offlineJavadoc')
def cacheDirName = 'caches/package-lists'
def javadocCacheMapFileName = 'javadocCacheMapFile'

Map<String, String> javadocLinkMap = [:]
if (JavaVersion.current() >= JavaVersion.VERSION_11) {
    // Javadoc in Java 11+ has more strict checks related with module system,
    // so we have to use Java 11+ API docs.
    javadocLinkMap.put('java11', 'https://docs.oracle.com/en/java/javase/11/docs/api/')
} else {
    // Javadoc in pre-Java 11 generates a broken link for Java 11+ API docs,
    // so we have to use Java 10 (or less) API docs.
    javadocLinkMap.put('java10', 'https://docs.oracle.com/javase/10/docs/api/')
}

allprojects {
    project.ext.javadocLinks.each {
        javadocLinkMap.put(
                "${it['groupId']}/${it['artifactId']}".toString(),
                normalizeJavadocUrl(it['url'].toString())
        )
    }
}

def cacheDir = rootProject.layout.buildDirectory.dir(cacheDirName)
def offlineDownloadTask =
        rootProject.tasks.register("downloadJavadocPackageList", DownloadJavadocPackageListTask.class,
                cacheDir, javadocLinkMap, offlineJavadoc, javadocCacheMapFileName)

// Configure the Javadoc tasks of all projects.
allprojects {
    tasks.withType(Javadoc) {
        it.dependsOn(offlineDownloadTask)
        options {
            def title = "${project.ext.projectName} ${project.version} API reference"
            docTitle = title
            windowTitle = title

            def scriptParts = []
            // Fixes
            scriptParts.add('''
            <script>
            // Open an external link in a new tab/window.
            for (var i in document.links) {
              var l = document.links[i];
              if (l.href && l.href.indexOf("?is-external=true") >= 0) {
                l.target = "_blank";
                l.rel = "noopener";
              }
            }
            // Fix the 404 errors caused by getURLPrefix() returning undefined in search.js.
            // See: https://stackoverflow.com/a/57284322/55808
            if (typeof useModuleDirectories !== 'undefined') {
              useModuleDirectories = false;
            }
            </script>''')

            // Google Analytics
            if (rootProject.ext.googleAnalyticsId != null) {
                scriptParts.add('''
                <script>
                (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
                ga('create', ''' + "'${rootProject.ext.googleAnalyticsId}'" + ''', 'auto');
                ga('send', 'pageview');
                </script>
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.1/cookieconsent.min.css">
                <script src="https://cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.1/cookieconsent.min.js"></script>
                <script>
                window.cookieconsent.initialise({
                  "palette": {
                    "popup": {
                      "background": "rgba(58,58,58,0.75)",
                      "text": "#F8F8F8"
                    },
                    "button": {
                      "background": "transparent",
                        "text": "#F8F8F8",
                        "border": "#F8F8F8"
                      }
                    },
                  "content": {
                    "message": "This website uses anonymous cookies to ensure we provide you the best experience. ",
                    "link": "Opt out!",
                    "href": "https://tools.google.com/dlpage/gaoptout/",
                    "target": '_blank'
                  }
                });
                </script>''')
            }

            // Highlight.js
            scriptParts.add('''
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/darcula.min.css">
            <style>
            .hljs-ln-numbers {
              user-select: none;
              text-align: right;
              color: #777;
              border-right: 1px solid #555;
              vertical-align: top;
              padding-right: 5px !important;
            }
            .hljs-ln-code {
              padding-left: 10px !important;
            }
            </style>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/languages/gradle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/languages/protobuf.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/languages/thrift.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/languages/yaml.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js"></script>
            <script>
            // Trim and syntax-highlight the code snippets.
            function trimLines(lines) {
              var leadingSpaces = 65536;
              for (var j in lines) {
                lines[j] = lines[j].trimRight();
                if (lines[j].length == 0) {
                  continue;
                }

                leadingSpaces = Math.min(leadingSpaces, Math.max(0, lines[j].search(/[^ ]/)));
              }

              for (var j in lines) {
                lines[j] = lines[j].substring(leadingSpaces);
              }

              while (lines.length > 0 && lines[0].length == 0) {
                lines.shift();
              }

              while (lines.length > 0 && lines[lines.length - 1].length == 0) {
                lines.pop();
              }
            }

            var hasHljs = typeof hljs !== "undefined";
            var allPres = document.getElementsByTagName("PRE");
            for (var i in allPres) {
              if (typeof allPres[i].children === "undefined") {
                continue;
              }

              var children = allPres[i].children;
              if (children.length !== 1) {
                continue;
              }

              var child = children[0];
              if (child.tagName.toUpperCase() !== "CODE") {
                continue;
              }

              var lines = child.textContent.split("\\n");
              trimLines(lines);
              for (var j in lines) {
                lines[j] = lines[j].replace(/^> ?/, "");
              }
              trimLines(lines);
              child.textContent = lines.join("\\n");

              if (hasHljs) {
                hljs.highlightBlock(child);
                hljs.lineNumbersBlock(child);
              }
            }
            </script>''')

            // Make the content narrower when not printing for readability.
            scriptParts.add('''
            <style>
            body > .flex-box > .flex-content > main {
              width: 100%;
              max-width: 1024px;
              margin-left: auto;
              margin-right: auto;
            }
            </style>
            ''')

            // Replace fonts:
            // - DejaVu Sans -> Lato
            // - DejaVu Serif -> Lato
            // - DejaVu Sans Mono -> Hack
            ['DejaVu Sans', 'DejaVu Serif'].each { fontName ->
                scriptParts.add("""
                <style>
                /* latin (normal)*/
                @font-face {
                  font-family: '${fontName}';
                  font-style: normal;
                  font-weight: 400;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjx4wXg.woff2) format('woff2');
                  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
                }
                /* latin-ext (normal)*/
                @font-face {
                  font-family: '${fontName}';
                  font-style: normal;
                  font-weight: 400;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6uyw4BMUTPHjxAwXjeu.woff2) format('woff2');
                  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
                }
                /* latin (bold) */
                @font-face {
                  font-family: '${fontName}';
                  font-style: normal;
                  font-weight: 700;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6u9w4BMUTPHh6UVSwiPGQ.woff2) format('woff2');
                  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
                }
                /* latin-ext (bold) */
                @font-face {
                  font-family: '${fontName}';
                  font-style: normal;
                  font-weight: 700;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6u9w4BMUTPHh6UVSwaPGR_p.woff2) format('woff2');
                  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
                }
                /* latin (italic) */
                @font-face {
                  font-family: '${fontName}';
                  font-style: italic;
                  font-weight: 400;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6u8w4BMUTPHjxsAXC-q.woff2) format('woff2');
                  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
                }
                /* latin-ext (italic) */
                @font-face {
                  font-family: '${fontName}';
                  font-style: italic;
                  font-weight: 400;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6u8w4BMUTPHjxsAUi-qJCY.woff2) format('woff2');
                  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
                }
                /* latin (bold italic) */
                @font-face {
                  font-family: '${fontName}';
                  font-style: italic;
                  font-weight: 700;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6u_w4BMUTPHjxsI5wq_Gwft.woff2) format('woff2');
                  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
                }
                /* latin-ext (bold italic) */
                @font-face {
                  font-family: '${fontName}';
                  font-style: italic;
                  font-weight: 700;
                  font-display: swap;
                  src: url(https://fonts.gstatic.com/s/lato/v17/S6u_w4BMUTPHjxsI5wq_FQft1dw.woff2) format('woff2');
                  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
                }
                </style>
                """)
            }
            ['DejaVu Sans Mono'].each { fontName ->
                scriptParts.add("""
                <style>
                @font-face {
                  font-family: '${fontName}';
                  font-style: normal;
                  font-weight: 400;
                  font-display: swap;
                  src: url('fonts/hack-regular-subset.woff2?sha=3114f1256') format('woff2'), url('fonts/hack-regular-subset.woff?sha=3114f1256') format('woff');
                }
                @font-face {
                  font-family: '${fontName}';
                  font-style: normal;
                  font-weight: 700;
                  font-display: swap;
                  src: url('fonts/hack-bold-subset.woff2?sha=3114f1256') format('woff2'), url('fonts/hack-bold-subset.woff?sha=3114f1256') format('woff');
                }
                @font-face {
                  font-family: '${fontName}';
                  font-style: italic;
                  font-weight: 400;
                  font-display: swap;
                  src: url('fonts/hack-italic-subset.woff2?sha=3114f1256') format('woff2'), url('fonts/hack-italic-webfont.woff?sha=3114f1256') format('woff');
                }
                @font-face {
                  font-family: '${fontName}';
                  font-style: italic;
                  font-weight: 700;
                  font-display: swap;
                  src: url('fonts/hack-bolditalic-subset.woff2?sha=3114f1256') format('woff2'), url('fonts/hack-bolditalic-subset.woff?sha=3114f1256') format('woff');
                }
                </style>
                """)
            }

            bottom = project.ext.copyrightFooter +
                    scriptParts.join('').readLines().stream()
                            .map({ line -> line.trim() })
                            .filter({ line -> !line.isEmpty() && !line.startsWith('//') })
                            .collect().join('')

            encoding = 'UTF-8'
            docEncoding = 'UTF-8'
            breakIterator = true
            version = false
            author = false
            keyWords = false
            quiet()

            // Enable all lints except the missing tag warnings
            addBooleanOption('Xdoclint:accessibility').value = true
            addBooleanOption('Xdoclint:html').value = true
            addBooleanOption('Xdoclint:reference').value = true
            addBooleanOption('Xdoclint:syntax').value = true

            // Enable HTML5 if possible.
            if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                addBooleanOption('html5').value = true
            }

            // Add --allow-script-in-comments if available (since 1.8.0_121)
            try {
                if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                    addBooleanOption('-allow-script-in-comments').value = true
                } else {
                    if (Class.forName('com.sun.tools.doclets.formats.html.ConfigurationImpl')
                            .newInstance().optionLength('--allow-script-in-comments') > 0) {
                        addBooleanOption('-allow-script-in-comments').value = true
                    }
                }
            } catch (ignored) {}
        }

        doFirst {
            def javadocCacheMapFile = cacheDir.get().file(javadocCacheMapFileName).asFile
            if (javadocCacheMapFile.exists()) {
                def url2File = new JsonSlurper().parseText(javadocCacheMapFile.text)
                url2File.entrySet().forEach { e ->
                    options {
                        linksOffline(e.key, "${projectDir.relativePath(rootProject.projectDir)}/${e.value}")
                    }
                }
            }
        }
    }
}

static def normalizeJavadocUrl(String javadocUrl) {
    if (!javadocUrl.endsWith('/')) {
        javadocUrl += '/'
    }
    return javadocUrl
}

@CacheableTask
class DownloadJavadocPackageListTask extends DefaultTask {

    @Input
    Map<String, String> links = [:]

    @Input
    JavaVersion javaVersion = JavaVersion.current()

    @OutputDirectory
    Provider<Directory> javadocCacheDir

    @Internal
    def visitedUrls = new HashSet<>()

    @OutputFile
    Provider<RegularFile> javadocCacheMapFile

    @Input
    boolean offlineJavadoc

    @Inject
    DownloadJavadocPackageListTask(Provider<Directory> javadocCacheDir, Map<String, String> links,
                                   boolean offlineJavadoc, String javadocCacheMapFileName) {
        this.links = links
        this.javadocCacheDir = javadocCacheDir
        this.offlineJavadoc = offlineJavadoc
        this.javadocCacheMapFile = javadocCacheDir.map {it -> it.file(javadocCacheMapFileName)}
    }

    @TaskAction
    def run() {
        if (offlineJavadoc) {
            return
        }

        def url2File = [:]
        links.entrySet().forEach {
            def (success, url, file) = addOfflineLink(it.key, it.value)
            if (success) {
                url2File[url] = project.getRootDir().relativePath(file).toString()
            }
        }

        def file = javadocCacheMapFile.get().asFile
        file.createNewFile()
        file.withPrintWriter('UTF-8') { out ->
            out.println(new JsonBuilder(url2File).toPrettyString())
        }
    }

    def addOfflineLink(String name, String javadocUrl) {
        def javadocUrlSha1 = MessageDigest.getInstance('SHA1').digest(javadocUrl.getBytes('UTF-8')).encodeHex()
        def listFileDir = javadocCacheDir.get().dir("${name}/${javadocUrlSha1}")
        def packageListFile = listFileDir.file('package-list').asFile
        def elementListFile = listFileDir.file('element-list').asFile

        def success = packageListFile.exists() ||
                JavaVersion.current() >= JavaVersion.VERSION_1_10 && elementListFile.exists()
        if (!success) {
            if (downloadListFile(packageListFile, new URL("${javadocUrl}package-list"))) {
                // Succeeded to download package-list.
                success = true
            } else {
                // Failed to download package-list, try element-list.
                if (!downloadListFile(elementListFile, new URL("${javadocUrl}element-list"))) {
                    // Failed to download both package-list and element-list.
                    success = false
                } else {
                    // package-list does not exist, but element-list exists.
                    if (JavaVersion.current() >= JavaVersion.VERSION_1_10) {
                        // Java 10+ supports element-list. Use it as-is.
                        success = true
                    } else {
                        // Java older than 10 does not support element-list.
                        // No problem. We can generate package-list from element-list.
                        def tmpPackageListFile = new File("${packageListFile}.tmp")
                        tmpPackageListFile.withWriter('utf-8') { out ->
                            // Find only the lines with a package name.
                            elementListFile.filterLine(out, 'utf-8') { line ->
                                def packageNamePattern = /^\p{javaJavaIdentifierStart}\p{javaJavaIdentifierPart}*(?:\.\p{javaJavaIdentifierStart}\p{javaJavaIdentifierPart}*)*$/
                                return line.matches(packageNamePattern)
                            }
                        }
                        success = tmpPackageListFile.renameTo(packageListFile)
                    }
                }
            }
        }

        return [success, javadocUrl, listFileDir.asFile]
    }

    private def downloadListFile(File listFile, URL listUrl) {
        // Do not attempt to download more than once.
        if (!visitedUrls.add(listUrl.toString())) {
            return
        }

        def success = false
        def tmpListFile = new File("${listFile}.tmp")

        listFile.parentFile.mkdirs()
        listFile.delete()

        logger.lifecycle("Download ${listUrl}")

        try {
            // Set some fake headers for the web sites who blocks a URLConnection.
            def conn = listUrl.openConnection() as HttpURLConnection
            conn.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            conn.setRequestProperty('Accept-Encoding', 'identity')
            conn.setRequestProperty("Accept-Language", 'en-US,en;q=0.5')
            conn.setRequestProperty("Cache-Control", 'no-cache')
            conn.setRequestProperty('Pragma', 'no-cache')
            conn.setRequestProperty('User-Agent', "Gradle/${project.gradle.gradleVersion} (${project.group}:${project.ext.artifactId})")
            conn.setUseCaches(false)

            if (conn.responseCode == 200) {
                tmpListFile.withOutputStream { it << conn.inputStream }
                if (tmpListFile.length() == 0) {
                    tmpListFile.delete()
                } else {
                    success = tmpListFile.renameTo(listFile);
                }
            } else {
                logger.log(LogLevel.WARN, "Download failed: ${conn.responseCode} ${conn.responseMessage}")
            }

            conn.disconnect()
        } catch (e) {
            tmpListFile.delete()
            if (project.gradle.startParameter.showStacktrace == ShowStacktrace.ALWAYS_FULL) {
                logger.log(LogLevel.WARN, "Download failed: ${e}", e)
            } else {
                logger.log(LogLevel.WARN, "Download failed: ${e}")
            }
        }

        return success
    }
}
