/**
 * Autogenerated by Thrift Compiler (0.9.1-LINE)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linecorp.armeria.service.test.thrift.main;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FooStruct implements org.apache.thrift.TBase<FooStruct, FooStruct._Fields>, java.io.Serializable, Cloneable, Comparable<FooStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FooStruct");

  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVal", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("byteVal", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField I16_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Val", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField I32_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Val", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField I64_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Val", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVal", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryVal", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ENUM_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("enumVal", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UNION_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("unionVal", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField MAP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("mapVal", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField SET_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("setVal", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField LIST_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("listVal", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FooStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FooStructTupleSchemeFactory());
  }

  public boolean boolVal; // required
  public byte byteVal; // required
  public short i16Val; // required
  public int i32Val; // required
  public long i64Val; // required
  public double doubleVal; // required
  public String stringVal; // required
  public ByteBuffer binaryVal; // required
  /**
   * 
   * @see FooEnum
   */
  public FooEnum enumVal; // required
  public FooUnion unionVal; // required
  public Map<String,FooEnum> mapVal; // required
  public Set<FooUnion> setVal; // required
  public List<String> listVal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VAL((short)1, "boolVal"),
    BYTE_VAL((short)2, "byteVal"),
    I16_VAL((short)3, "i16Val"),
    I32_VAL((short)4, "i32Val"),
    I64_VAL((short)5, "i64Val"),
    DOUBLE_VAL((short)6, "doubleVal"),
    STRING_VAL((short)7, "stringVal"),
    BINARY_VAL((short)8, "binaryVal"),
    /**
     * 
     * @see FooEnum
     */
    ENUM_VAL((short)10, "enumVal"),
    UNION_VAL((short)11, "unionVal"),
    MAP_VAL((short)12, "mapVal"),
    SET_VAL((short)13, "setVal"),
    LIST_VAL((short)14, "listVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VAL
          return BOOL_VAL;
        case 2: // BYTE_VAL
          return BYTE_VAL;
        case 3: // I16_VAL
          return I16_VAL;
        case 4: // I32_VAL
          return I32_VAL;
        case 5: // I64_VAL
          return I64_VAL;
        case 6: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 7: // STRING_VAL
          return STRING_VAL;
        case 8: // BINARY_VAL
          return BINARY_VAL;
        case 10: // ENUM_VAL
          return ENUM_VAL;
        case 11: // UNION_VAL
          return UNION_VAL;
        case 12: // MAP_VAL
          return MAP_VAL;
        case 13: // SET_VAL
          return SET_VAL;
        case 14: // LIST_VAL
          return LIST_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLVAL_ISSET_ID = 0;
  private static final int __BYTEVAL_ISSET_ID = 1;
  private static final int __I16VAL_ISSET_ID = 2;
  private static final int __I32VAL_ISSET_ID = 3;
  private static final int __I64VAL_ISSET_ID = 4;
  private static final int __DOUBLEVAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("boolVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VAL, new org.apache.thrift.meta_data.FieldMetaData("byteVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16_VAL, new org.apache.thrift.meta_data.FieldMetaData("i16Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32_VAL, new org.apache.thrift.meta_data.FieldMetaData("i32Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_VAL, new org.apache.thrift.meta_data.FieldMetaData("i64Val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("doubleVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("stringVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_VAL, new org.apache.thrift.meta_data.FieldMetaData("binaryVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENUM_VAL, new org.apache.thrift.meta_data.FieldMetaData("enumVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FooEnum.class)));
    tmpMap.put(_Fields.UNION_VAL, new org.apache.thrift.meta_data.FieldMetaData("unionVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooUnion.class)));
    tmpMap.put(_Fields.MAP_VAL, new org.apache.thrift.meta_data.FieldMetaData("mapVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FooEnum.class))));
    tmpMap.put(_Fields.SET_VAL, new org.apache.thrift.meta_data.FieldMetaData("setVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FooUnion.class))));
    tmpMap.put(_Fields.LIST_VAL, new org.apache.thrift.meta_data.FieldMetaData("listVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FooStruct.class, metaDataMap);
  }

  public FooStruct() {
  }

  public FooStruct(
    boolean boolVal,
    byte byteVal,
    short i16Val,
    int i32Val,
    long i64Val,
    double doubleVal,
    String stringVal,
    ByteBuffer binaryVal,
    FooEnum enumVal,
    FooUnion unionVal,
    Map<String,FooEnum> mapVal,
    Set<FooUnion> setVal,
    List<String> listVal)
  {
    this();
    this.boolVal = boolVal;
    setBoolValIsSet(true);
    this.byteVal = byteVal;
    setByteValIsSet(true);
    this.i16Val = i16Val;
    setI16ValIsSet(true);
    this.i32Val = i32Val;
    setI32ValIsSet(true);
    this.i64Val = i64Val;
    setI64ValIsSet(true);
    this.doubleVal = doubleVal;
    setDoubleValIsSet(true);
    this.stringVal = stringVal;
    this.binaryVal = binaryVal;
    this.enumVal = enumVal;
    this.unionVal = unionVal;
    this.mapVal = mapVal;
    this.setVal = setVal;
    this.listVal = listVal;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FooStruct(FooStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolVal = other.boolVal;
    this.byteVal = other.byteVal;
    this.i16Val = other.i16Val;
    this.i32Val = other.i32Val;
    this.i64Val = other.i64Val;
    this.doubleVal = other.doubleVal;
    if (other.isSetStringVal()) {
      this.stringVal = other.stringVal;
    }
    if (other.isSetBinaryVal()) {
      this.binaryVal = org.apache.thrift.TBaseHelper.copyBinary(other.binaryVal);
;
    }
    if (other.isSetEnumVal()) {
      this.enumVal = other.enumVal;
    }
    if (other.isSetUnionVal()) {
      this.unionVal = new FooUnion(other.unionVal);
    }
    if (other.isSetMapVal()) {
      Map<String,FooEnum> __this__mapVal = new HashMap<String,FooEnum>(other.mapVal.size());
      for (Map.Entry<String, FooEnum> other_element : other.mapVal.entrySet()) {

        String other_element_key = other_element.getKey();
        FooEnum other_element_value = other_element.getValue();

        String __this__mapVal_copy_key = other_element_key;

        FooEnum __this__mapVal_copy_value = other_element_value;

        __this__mapVal.put(__this__mapVal_copy_key, __this__mapVal_copy_value);
      }
      this.mapVal = __this__mapVal;
    }
    if (other.isSetSetVal()) {
      Set<FooUnion> __this__setVal = new HashSet<FooUnion>(other.setVal.size());
      for (FooUnion other_element : other.setVal) {
        __this__setVal.add(new FooUnion(other_element));
      }
      this.setVal = __this__setVal;
    }
    if (other.isSetListVal()) {
      List<String> __this__listVal = new ArrayList<String>(other.listVal);
      this.listVal = __this__listVal;
    }
  }

  public FooStruct deepCopy() {
    return new FooStruct(this);
  }

  @Override
  public void clear() {
    setBoolValIsSet(false);
    this.boolVal = false;
    setByteValIsSet(false);
    this.byteVal = 0;
    setI16ValIsSet(false);
    this.i16Val = 0;
    setI32ValIsSet(false);
    this.i32Val = 0;
    setI64ValIsSet(false);
    this.i64Val = 0;
    setDoubleValIsSet(false);
    this.doubleVal = 0.0;
    this.stringVal = null;
    this.binaryVal = null;
    this.enumVal = null;
    this.unionVal = null;
    this.mapVal = null;
    this.setVal = null;
    this.listVal = null;
  }

  public boolean isBoolVal() {
    return this.boolVal;
  }

  public FooStruct setBoolVal(boolean boolVal) {
    this.boolVal = boolVal;
    setBoolValIsSet(true);
    return this;
  }

  public void unsetBoolVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLVAL_ISSET_ID);
  }

  /** Returns true if field boolVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLVAL_ISSET_ID);
  }

  public void setBoolValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLVAL_ISSET_ID, value);
  }

  public byte getByteVal() {
    return this.byteVal;
  }

  public FooStruct setByteVal(byte byteVal) {
    this.byteVal = byteVal;
    setByteValIsSet(true);
    return this;
  }

  public void unsetByteVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEVAL_ISSET_ID);
  }

  /** Returns true if field byteVal is set (has been assigned a value) and false otherwise */
  public boolean isSetByteVal() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEVAL_ISSET_ID);
  }

  public void setByteValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEVAL_ISSET_ID, value);
  }

  public short getI16Val() {
    return this.i16Val;
  }

  public FooStruct setI16Val(short i16Val) {
    this.i16Val = i16Val;
    setI16ValIsSet(true);
    return this;
  }

  public void unsetI16Val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16VAL_ISSET_ID);
  }

  /** Returns true if field i16Val is set (has been assigned a value) and false otherwise */
  public boolean isSetI16Val() {
    return EncodingUtils.testBit(__isset_bitfield, __I16VAL_ISSET_ID);
  }

  public void setI16ValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16VAL_ISSET_ID, value);
  }

  public int getI32Val() {
    return this.i32Val;
  }

  public FooStruct setI32Val(int i32Val) {
    this.i32Val = i32Val;
    setI32ValIsSet(true);
    return this;
  }

  public void unsetI32Val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32VAL_ISSET_ID);
  }

  /** Returns true if field i32Val is set (has been assigned a value) and false otherwise */
  public boolean isSetI32Val() {
    return EncodingUtils.testBit(__isset_bitfield, __I32VAL_ISSET_ID);
  }

  public void setI32ValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32VAL_ISSET_ID, value);
  }

  public long getI64Val() {
    return this.i64Val;
  }

  public FooStruct setI64Val(long i64Val) {
    this.i64Val = i64Val;
    setI64ValIsSet(true);
    return this;
  }

  public void unsetI64Val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64VAL_ISSET_ID);
  }

  /** Returns true if field i64Val is set (has been assigned a value) and false otherwise */
  public boolean isSetI64Val() {
    return EncodingUtils.testBit(__isset_bitfield, __I64VAL_ISSET_ID);
  }

  public void setI64ValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64VAL_ISSET_ID, value);
  }

  public double getDoubleVal() {
    return this.doubleVal;
  }

  public FooStruct setDoubleVal(double doubleVal) {
    this.doubleVal = doubleVal;
    setDoubleValIsSet(true);
    return this;
  }

  public void unsetDoubleVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVAL_ISSET_ID);
  }

  /** Returns true if field doubleVal is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleVal() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEVAL_ISSET_ID);
  }

  public void setDoubleValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEVAL_ISSET_ID, value);
  }

  public String getStringVal() {
    return this.stringVal;
  }

  public FooStruct setStringVal(String stringVal) {
    this.stringVal = stringVal;
    return this;
  }

  public void unsetStringVal() {
    this.stringVal = null;
  }

  /** Returns true if field stringVal is set (has been assigned a value) and false otherwise */
  public boolean isSetStringVal() {
    return this.stringVal != null;
  }

  public void setStringValIsSet(boolean value) {
    if (!value) {
      this.stringVal = null;
    }
  }

  public byte[] getBinaryVal() {
    setBinaryVal(org.apache.thrift.TBaseHelper.rightSize(binaryVal));
    return binaryVal == null ? null : binaryVal.array();
  }

  public ByteBuffer bufferForBinaryVal() {
    return binaryVal;
  }

  public FooStruct setBinaryVal(byte[] binaryVal) {
    setBinaryVal(binaryVal == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryVal));
    return this;
  }

  public FooStruct setBinaryVal(ByteBuffer binaryVal) {
    this.binaryVal = binaryVal;
    return this;
  }

  public void unsetBinaryVal() {
    this.binaryVal = null;
  }

  /** Returns true if field binaryVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryVal() {
    return this.binaryVal != null;
  }

  public void setBinaryValIsSet(boolean value) {
    if (!value) {
      this.binaryVal = null;
    }
  }

  /**
   * 
   * @see FooEnum
   */
  public FooEnum getEnumVal() {
    return this.enumVal;
  }

  /**
   * 
   * @see FooEnum
   */
  public FooStruct setEnumVal(FooEnum enumVal) {
    this.enumVal = enumVal;
    return this;
  }

  public void unsetEnumVal() {
    this.enumVal = null;
  }

  /** Returns true if field enumVal is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumVal() {
    return this.enumVal != null;
  }

  public void setEnumValIsSet(boolean value) {
    if (!value) {
      this.enumVal = null;
    }
  }

  public FooUnion getUnionVal() {
    return this.unionVal;
  }

  public FooStruct setUnionVal(FooUnion unionVal) {
    this.unionVal = unionVal;
    return this;
  }

  public void unsetUnionVal() {
    this.unionVal = null;
  }

  /** Returns true if field unionVal is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionVal() {
    return this.unionVal != null;
  }

  public void setUnionValIsSet(boolean value) {
    if (!value) {
      this.unionVal = null;
    }
  }

  public int getMapValSize() {
    return (this.mapVal == null) ? 0 : this.mapVal.size();
  }

  public void putToMapVal(String key, FooEnum val) {
    if (this.mapVal == null) {
      this.mapVal = new HashMap<String,FooEnum>();
    }
    this.mapVal.put(key, val);
  }

  public Map<String,FooEnum> getMapVal() {
    return this.mapVal;
  }

  public FooStruct setMapVal(Map<String,FooEnum> mapVal) {
    this.mapVal = mapVal;
    return this;
  }

  public void unsetMapVal() {
    this.mapVal = null;
  }

  /** Returns true if field mapVal is set (has been assigned a value) and false otherwise */
  public boolean isSetMapVal() {
    return this.mapVal != null;
  }

  public void setMapValIsSet(boolean value) {
    if (!value) {
      this.mapVal = null;
    }
  }

  public int getSetValSize() {
    return (this.setVal == null) ? 0 : this.setVal.size();
  }

  public java.util.Iterator<FooUnion> getSetValIterator() {
    return (this.setVal == null) ? null : this.setVal.iterator();
  }

  public void addToSetVal(FooUnion elem) {
    if (this.setVal == null) {
      this.setVal = new HashSet<FooUnion>();
    }
    this.setVal.add(elem);
  }

  public Set<FooUnion> getSetVal() {
    return this.setVal;
  }

  public FooStruct setSetVal(Set<FooUnion> setVal) {
    this.setVal = setVal;
    return this;
  }

  public void unsetSetVal() {
    this.setVal = null;
  }

  /** Returns true if field setVal is set (has been assigned a value) and false otherwise */
  public boolean isSetSetVal() {
    return this.setVal != null;
  }

  public void setSetValIsSet(boolean value) {
    if (!value) {
      this.setVal = null;
    }
  }

  public int getListValSize() {
    return (this.listVal == null) ? 0 : this.listVal.size();
  }

  public java.util.Iterator<String> getListValIterator() {
    return (this.listVal == null) ? null : this.listVal.iterator();
  }

  public void addToListVal(String elem) {
    if (this.listVal == null) {
      this.listVal = new ArrayList<String>();
    }
    this.listVal.add(elem);
  }

  public List<String> getListVal() {
    return this.listVal;
  }

  public FooStruct setListVal(List<String> listVal) {
    this.listVal = listVal;
    return this;
  }

  public void unsetListVal() {
    this.listVal = null;
  }

  /** Returns true if field listVal is set (has been assigned a value) and false otherwise */
  public boolean isSetListVal() {
    return this.listVal != null;
  }

  public void setListValIsSet(boolean value) {
    if (!value) {
      this.listVal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_VAL:
      if (value == null) {
        unsetBoolVal();
      } else {
        setBoolVal((Boolean)value);
      }
      break;

    case BYTE_VAL:
      if (value == null) {
        unsetByteVal();
      } else {
        setByteVal((Byte)value);
      }
      break;

    case I16_VAL:
      if (value == null) {
        unsetI16Val();
      } else {
        setI16Val((Short)value);
      }
      break;

    case I32_VAL:
      if (value == null) {
        unsetI32Val();
      } else {
        setI32Val((Integer)value);
      }
      break;

    case I64_VAL:
      if (value == null) {
        unsetI64Val();
      } else {
        setI64Val((Long)value);
      }
      break;

    case DOUBLE_VAL:
      if (value == null) {
        unsetDoubleVal();
      } else {
        setDoubleVal((Double)value);
      }
      break;

    case STRING_VAL:
      if (value == null) {
        unsetStringVal();
      } else {
        setStringVal((String)value);
      }
      break;

    case BINARY_VAL:
      if (value == null) {
        unsetBinaryVal();
      } else {
        setBinaryVal((ByteBuffer)value);
      }
      break;

    case ENUM_VAL:
      if (value == null) {
        unsetEnumVal();
      } else {
        setEnumVal((FooEnum)value);
      }
      break;

    case UNION_VAL:
      if (value == null) {
        unsetUnionVal();
      } else {
        setUnionVal((FooUnion)value);
      }
      break;

    case MAP_VAL:
      if (value == null) {
        unsetMapVal();
      } else {
        setMapVal((Map<String,FooEnum>)value);
      }
      break;

    case SET_VAL:
      if (value == null) {
        unsetSetVal();
      } else {
        setSetVal((Set<FooUnion>)value);
      }
      break;

    case LIST_VAL:
      if (value == null) {
        unsetListVal();
      } else {
        setListVal((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_VAL:
      return Boolean.valueOf(isBoolVal());

    case BYTE_VAL:
      return Byte.valueOf(getByteVal());

    case I16_VAL:
      return Short.valueOf(getI16Val());

    case I32_VAL:
      return Integer.valueOf(getI32Val());

    case I64_VAL:
      return Long.valueOf(getI64Val());

    case DOUBLE_VAL:
      return Double.valueOf(getDoubleVal());

    case STRING_VAL:
      return getStringVal();

    case BINARY_VAL:
      return getBinaryVal();

    case ENUM_VAL:
      return getEnumVal();

    case UNION_VAL:
      return getUnionVal();

    case MAP_VAL:
      return getMapVal();

    case SET_VAL:
      return getSetVal();

    case LIST_VAL:
      return getListVal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_VAL:
      return isSetBoolVal();
    case BYTE_VAL:
      return isSetByteVal();
    case I16_VAL:
      return isSetI16Val();
    case I32_VAL:
      return isSetI32Val();
    case I64_VAL:
      return isSetI64Val();
    case DOUBLE_VAL:
      return isSetDoubleVal();
    case STRING_VAL:
      return isSetStringVal();
    case BINARY_VAL:
      return isSetBinaryVal();
    case ENUM_VAL:
      return isSetEnumVal();
    case UNION_VAL:
      return isSetUnionVal();
    case MAP_VAL:
      return isSetMapVal();
    case SET_VAL:
      return isSetSetVal();
    case LIST_VAL:
      return isSetListVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FooStruct)
      return this.equals((FooStruct)that);
    return false;
  }

  public boolean equals(FooStruct that) {
    if (that == null)
      return false;

    boolean this_present_boolVal = true;
    boolean that_present_boolVal = true;
    if (this_present_boolVal || that_present_boolVal) {
      if (!(this_present_boolVal && that_present_boolVal))
        return false;
      if (this.boolVal != that.boolVal)
        return false;
    }

    boolean this_present_byteVal = true;
    boolean that_present_byteVal = true;
    if (this_present_byteVal || that_present_byteVal) {
      if (!(this_present_byteVal && that_present_byteVal))
        return false;
      if (this.byteVal != that.byteVal)
        return false;
    }

    boolean this_present_i16Val = true;
    boolean that_present_i16Val = true;
    if (this_present_i16Val || that_present_i16Val) {
      if (!(this_present_i16Val && that_present_i16Val))
        return false;
      if (this.i16Val != that.i16Val)
        return false;
    }

    boolean this_present_i32Val = true;
    boolean that_present_i32Val = true;
    if (this_present_i32Val || that_present_i32Val) {
      if (!(this_present_i32Val && that_present_i32Val))
        return false;
      if (this.i32Val != that.i32Val)
        return false;
    }

    boolean this_present_i64Val = true;
    boolean that_present_i64Val = true;
    if (this_present_i64Val || that_present_i64Val) {
      if (!(this_present_i64Val && that_present_i64Val))
        return false;
      if (this.i64Val != that.i64Val)
        return false;
    }

    boolean this_present_doubleVal = true;
    boolean that_present_doubleVal = true;
    if (this_present_doubleVal || that_present_doubleVal) {
      if (!(this_present_doubleVal && that_present_doubleVal))
        return false;
      if (this.doubleVal != that.doubleVal)
        return false;
    }

    boolean this_present_stringVal = true && this.isSetStringVal();
    boolean that_present_stringVal = true && that.isSetStringVal();
    if (this_present_stringVal || that_present_stringVal) {
      if (!(this_present_stringVal && that_present_stringVal))
        return false;
      if (!this.stringVal.equals(that.stringVal))
        return false;
    }

    boolean this_present_binaryVal = true && this.isSetBinaryVal();
    boolean that_present_binaryVal = true && that.isSetBinaryVal();
    if (this_present_binaryVal || that_present_binaryVal) {
      if (!(this_present_binaryVal && that_present_binaryVal))
        return false;
      if (!this.binaryVal.equals(that.binaryVal))
        return false;
    }

    boolean this_present_enumVal = true && this.isSetEnumVal();
    boolean that_present_enumVal = true && that.isSetEnumVal();
    if (this_present_enumVal || that_present_enumVal) {
      if (!(this_present_enumVal && that_present_enumVal))
        return false;
      if (!this.enumVal.equals(that.enumVal))
        return false;
    }

    boolean this_present_unionVal = true && this.isSetUnionVal();
    boolean that_present_unionVal = true && that.isSetUnionVal();
    if (this_present_unionVal || that_present_unionVal) {
      if (!(this_present_unionVal && that_present_unionVal))
        return false;
      if (!this.unionVal.equals(that.unionVal))
        return false;
    }

    boolean this_present_mapVal = true && this.isSetMapVal();
    boolean that_present_mapVal = true && that.isSetMapVal();
    if (this_present_mapVal || that_present_mapVal) {
      if (!(this_present_mapVal && that_present_mapVal))
        return false;
      if (!this.mapVal.equals(that.mapVal))
        return false;
    }

    boolean this_present_setVal = true && this.isSetSetVal();
    boolean that_present_setVal = true && that.isSetSetVal();
    if (this_present_setVal || that_present_setVal) {
      if (!(this_present_setVal && that_present_setVal))
        return false;
      if (!this.setVal.equals(that.setVal))
        return false;
    }

    boolean this_present_listVal = true && this.isSetListVal();
    boolean that_present_listVal = true && that.isSetListVal();
    if (this_present_listVal || that_present_listVal) {
      if (!(this_present_listVal && that_present_listVal))
        return false;
      if (!this.listVal.equals(that.listVal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FooStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolVal()).compareTo(other.isSetBoolVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolVal, other.boolVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteVal()).compareTo(other.isSetByteVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteVal, other.byteVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16Val()).compareTo(other.isSetI16Val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16Val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Val, other.i16Val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32Val()).compareTo(other.isSetI32Val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32Val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Val, other.i32Val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64Val()).compareTo(other.isSetI64Val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64Val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Val, other.i64Val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleVal()).compareTo(other.isSetDoubleVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleVal, other.doubleVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringVal()).compareTo(other.isSetStringVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringVal, other.stringVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryVal()).compareTo(other.isSetBinaryVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryVal, other.binaryVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnumVal()).compareTo(other.isSetEnumVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumVal, other.enumVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionVal()).compareTo(other.isSetUnionVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionVal, other.unionVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapVal()).compareTo(other.isSetMapVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapVal, other.mapVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetVal()).compareTo(other.isSetSetVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setVal, other.setVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListVal()).compareTo(other.isSetListVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listVal, other.listVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FooStruct(");
    boolean first = true;

    sb.append("boolVal:");
    sb.append(this.boolVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteVal:");
    sb.append(this.byteVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16Val:");
    sb.append(this.i16Val);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32Val:");
    sb.append(this.i32Val);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64Val:");
    sb.append(this.i64Val);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleVal:");
    sb.append(this.doubleVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringVal:");
    if (this.stringVal == null) {
      sb.append("null");
    } else {
      sb.append(this.stringVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryVal:");
    if (this.binaryVal == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binaryVal, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enumVal:");
    if (this.enumVal == null) {
      sb.append("null");
    } else {
      sb.append(this.enumVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionVal:");
    if (this.unionVal == null) {
      sb.append("null");
    } else {
      sb.append(this.unionVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapVal:");
    if (this.mapVal == null) {
      sb.append("null");
    } else {
      sb.append(this.mapVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setVal:");
    if (this.setVal == null) {
      sb.append("null");
    } else {
      sb.append(this.setVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listVal:");
    if (this.listVal == null) {
      sb.append("null");
    } else {
      sb.append(this.listVal);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FooStructStandardSchemeFactory implements SchemeFactory {
    public FooStructStandardScheme getScheme() {
      return new FooStructStandardScheme();
    }
  }

  private static class FooStructStandardScheme extends StandardScheme<FooStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FooStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolVal = iprot.readBool();
              struct.setBoolValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteVal = iprot.readByte();
              struct.setByteValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I16_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16Val = iprot.readI16();
              struct.setI16ValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I32_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32Val = iprot.readI32();
              struct.setI32ValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I64_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64Val = iprot.readI64();
              struct.setI64ValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleVal = iprot.readDouble();
              struct.setDoubleValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringVal = iprot.readString();
              struct.setStringValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BINARY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryVal = iprot.readBinary();
              struct.setBinaryValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENUM_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enumVal = FooEnum.findByValue(iprot.readI32());
              struct.setEnumValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNION_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unionVal = new FooUnion();
              struct.unionVal.read(iprot);
              struct.setUnionValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.mapVal = new HashMap<String,FooEnum>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  FooEnum _val3;
                  _key2 = iprot.readString();
                  _val3 = FooEnum.findByValue(iprot.readI32());
                  struct.mapVal.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setMapValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SET_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                struct.setVal = new HashSet<FooUnion>(2*_set4.size);
                for (int _i5 = 0; _i5 < _set4.size; ++_i5)
                {
                  FooUnion _elem6;
                  _elem6 = new FooUnion();
                  _elem6.read(iprot);
                  struct.setVal.add(_elem6);
                }
                iprot.readSetEnd();
              }
              struct.setSetValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LIST_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.listVal = new ArrayList<String>(_list7.size);
                for (int _i8 = 0; _i8 < _list7.size; ++_i8)
                {
                  String _elem9;
                  _elem9 = iprot.readString();
                  struct.listVal.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setListValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FooStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
      oprot.writeBool(struct.boolVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
      oprot.writeByte(struct.byteVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I16_VAL_FIELD_DESC);
      oprot.writeI16(struct.i16Val);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
      oprot.writeI32(struct.i32Val);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
      oprot.writeI64(struct.i64Val);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
      oprot.writeDouble(struct.doubleVal);
      oprot.writeFieldEnd();
      if (struct.stringVal != null) {
        oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
        oprot.writeString(struct.stringVal);
        oprot.writeFieldEnd();
      }
      if (struct.binaryVal != null) {
        oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
        oprot.writeBinary(struct.binaryVal);
        oprot.writeFieldEnd();
      }
      if (struct.enumVal != null) {
        oprot.writeFieldBegin(ENUM_VAL_FIELD_DESC);
        oprot.writeI32(struct.enumVal.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.unionVal != null) {
        oprot.writeFieldBegin(UNION_VAL_FIELD_DESC);
        struct.unionVal.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mapVal != null) {
        oprot.writeFieldBegin(MAP_VAL_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.mapVal.size()));
          for (Map.Entry<String, FooEnum> _iter10 : struct.mapVal.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeI32(_iter10.getValue().getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setVal != null) {
        oprot.writeFieldBegin(SET_VAL_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.setVal.size()));
          for (FooUnion _iter11 : struct.setVal)
          {
            _iter11.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.listVal != null) {
        oprot.writeFieldBegin(LIST_VAL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listVal.size()));
          for (String _iter12 : struct.listVal)
          {
            oprot.writeString(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FooStructTupleSchemeFactory implements SchemeFactory {
    public FooStructTupleScheme getScheme() {
      return new FooStructTupleScheme();
    }
  }

  private static class FooStructTupleScheme extends TupleScheme<FooStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FooStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoolVal()) {
        optionals.set(0);
      }
      if (struct.isSetByteVal()) {
        optionals.set(1);
      }
      if (struct.isSetI16Val()) {
        optionals.set(2);
      }
      if (struct.isSetI32Val()) {
        optionals.set(3);
      }
      if (struct.isSetI64Val()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleVal()) {
        optionals.set(5);
      }
      if (struct.isSetStringVal()) {
        optionals.set(6);
      }
      if (struct.isSetBinaryVal()) {
        optionals.set(7);
      }
      if (struct.isSetEnumVal()) {
        optionals.set(8);
      }
      if (struct.isSetUnionVal()) {
        optionals.set(9);
      }
      if (struct.isSetMapVal()) {
        optionals.set(10);
      }
      if (struct.isSetSetVal()) {
        optionals.set(11);
      }
      if (struct.isSetListVal()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetBoolVal()) {
        oprot.writeBool(struct.boolVal);
      }
      if (struct.isSetByteVal()) {
        oprot.writeByte(struct.byteVal);
      }
      if (struct.isSetI16Val()) {
        oprot.writeI16(struct.i16Val);
      }
      if (struct.isSetI32Val()) {
        oprot.writeI32(struct.i32Val);
      }
      if (struct.isSetI64Val()) {
        oprot.writeI64(struct.i64Val);
      }
      if (struct.isSetDoubleVal()) {
        oprot.writeDouble(struct.doubleVal);
      }
      if (struct.isSetStringVal()) {
        oprot.writeString(struct.stringVal);
      }
      if (struct.isSetBinaryVal()) {
        oprot.writeBinary(struct.binaryVal);
      }
      if (struct.isSetEnumVal()) {
        oprot.writeI32(struct.enumVal.getValue());
      }
      if (struct.isSetUnionVal()) {
        struct.unionVal.write(oprot);
      }
      if (struct.isSetMapVal()) {
        {
          oprot.writeI32(struct.mapVal.size());
          for (Map.Entry<String, FooEnum> _iter13 : struct.mapVal.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeI32(_iter13.getValue().getValue());
          }
        }
      }
      if (struct.isSetSetVal()) {
        {
          oprot.writeI32(struct.setVal.size());
          for (FooUnion _iter14 : struct.setVal)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetListVal()) {
        {
          oprot.writeI32(struct.listVal.size());
          for (String _iter15 : struct.listVal)
          {
            oprot.writeString(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FooStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.boolVal = iprot.readBool();
        struct.setBoolValIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byteVal = iprot.readByte();
        struct.setByteValIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i16Val = iprot.readI16();
        struct.setI16ValIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i32Val = iprot.readI32();
        struct.setI32ValIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i64Val = iprot.readI64();
        struct.setI64ValIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleVal = iprot.readDouble();
        struct.setDoubleValIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stringVal = iprot.readString();
        struct.setStringValIsSet(true);
      }
      if (incoming.get(7)) {
        struct.binaryVal = iprot.readBinary();
        struct.setBinaryValIsSet(true);
      }
      if (incoming.get(8)) {
        struct.enumVal = FooEnum.findByValue(iprot.readI32());
        struct.setEnumValIsSet(true);
      }
      if (incoming.get(9)) {
        struct.unionVal = new FooUnion();
        struct.unionVal.read(iprot);
        struct.setUnionValIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mapVal = new HashMap<String,FooEnum>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18;
            FooEnum _val19;
            _key18 = iprot.readString();
            _val19 = FooEnum.findByValue(iprot.readI32());
            struct.mapVal.put(_key18, _val19);
          }
        }
        struct.setMapValIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set20 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.setVal = new HashSet<FooUnion>(2*_set20.size);
          for (int _i21 = 0; _i21 < _set20.size; ++_i21)
          {
            FooUnion _elem22;
            _elem22 = new FooUnion();
            _elem22.read(iprot);
            struct.setVal.add(_elem22);
          }
        }
        struct.setSetValIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listVal = new ArrayList<String>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            String _elem25;
            _elem25 = iprot.readString();
            struct.listVal.add(_elem25);
          }
        }
        struct.setListValIsSet(true);
      }
    }
  }

}

