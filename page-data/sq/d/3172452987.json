{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#tutorials","title":"Tutorials"}]},"excerpt":"Tutorials Welcome to our Armeria tutorials!\nLearn how to write a service with Armeria by walking through these tutorials.\nThese tutorials take you through steps based on a sample service, a blog service, to offer you practical guidance. We've prepared thr…","parent":{"sourceInstanceName":"tutorials","name":"index","relativeDirectory":""},"frontmatter":{"menuTitle":null,"order":null}},{"tableOfContents":{"items":[{"url":"#defining-a-blog-service-and-messages","title":"Defining a blog service and messages"}]},"excerpt":"Defining a blog service and messages Let's begin by defining our gRPC blog service in a proto file. What you need No preparation is required for this step. Do check that you've prepared the  prerequisites . 1. Create a proto file Create a file,  blog.prot…","parent":{"sourceInstanceName":"tutorials","name":"define-service","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":"Define a service","order":1}},{"tableOfContents":{"items":[{"url":"#implementing-create-operation","title":"Implementing CREATE operation"}]},"excerpt":"Implementing CREATE operation In the previous step, we defined service methods.\nIn this step, we'll implement one of the service methods to create a blog post and again, try making a call to a service method.\nAlso, we'll use Armeria's  type://ServerExtens…","parent":{"sourceInstanceName":"tutorials","name":"implement-create","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":"Implement CREATE","order":3}},{"tableOfContents":{"items":[{"url":"#implementing-delete-operation","title":"Implementing DELETE operation"}]},"excerpt":"Implementing DELETE operation So far, we created, read, and updated a blog post.\nNow, let's implement and make a call to delete a blog post.\nAlso, we'll add Armeria's  Documentation Service  for testing our blog service. What you need You need to have the…","parent":{"sourceInstanceName":"tutorials","name":"implement-delete","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":"Implement DELETE","order":6}},{"tableOfContents":{"items":[{"url":"#implementing-read-operation","title":"Implementing READ operation"}]},"excerpt":"Implementing READ operation In the earlier step, we created blog posts.\nIn this step, we'll implement a read operation and make a call to read blog posts.\nWe'll write two service methods, one for reading a single post and another for multiple posts. What …","parent":{"sourceInstanceName":"tutorials","name":"implement-read","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":"Implement READ","order":4}},{"tableOfContents":{"items":[{"url":"#implementing-update-operation","title":"Implementing UPDATE operation"}]},"excerpt":"Implementing UPDATE operation Previously, we created and read blog posts.\nNow, let's implement and make a call to update a blog post.\nWe'll also learn how to handle an exception with a custom exception handler. What you need You need to have the following…","parent":{"sourceInstanceName":"tutorials","name":"implement-update","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":"Implement UPDATE","order":5}},{"tableOfContents":{"items":[{"url":"#grpc-tutorial-introduction","title":"gRPC tutorial introduction"}]},"excerpt":"gRPC tutorial introduction In this tutorial, you'll learn how to build a  gRPC  service with Armeria.\nThis tutorial is based on a  sample service , a minimal blog service, with which you can create, read, update, and delete blog posts. Follow this tutoria…","parent":{"sourceInstanceName":"tutorials","name":"index","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":null,"order":null}},{"tableOfContents":{"items":[{"url":"#running-a-service","title":"Running a service"}]},"excerpt":"Running a service In this step, we'll do three things with the code we obtained from our proto file; we'll create a server instance, add an empty gRPC service, and then lastly test connecting to the server. What you need You need to have the  generated Ja…","parent":{"sourceInstanceName":"tutorials","name":"run-service","relativeDirectory":"grpc/blog"},"frontmatter":{"menuTitle":"Run a service","order":2}},{"tableOfContents":{"items":[{"url":"#adding-services-to-a-server","title":"Adding services to a server"}]},"excerpt":"Adding services to a server In this step, we'll add an empty blog service to the server we created in  Step 1. Create a server . Also, we'll add Armeria's  Documentation service  for testing our blog service. What you need You need to have the following f…","parent":{"sourceInstanceName":"tutorials","name":"add-services-to-server","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Add services to a server","order":3}},{"tableOfContents":{"items":[{"url":"#creating-a-server","title":"Creating a server"}]},"excerpt":"Creating a server As the first step of the tutorial, we create a server instance and run a dummy service to check that the server and service are launched.\nWe'll use Armeria's  type://ServerBuilder  for this task. What you need No preparation is required …","parent":{"sourceInstanceName":"tutorials","name":"create-server","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Create a server","order":1}},{"tableOfContents":{"items":[{"url":"#implementing-create-operation","title":"Implementing CREATE operation"}]},"excerpt":"Implementing CREATE operation In this step, you'll write a service method for creating a blog post and a test method to verify the service method.\nBy completing this step, you'll learn to map your service with the HTTP POST ( type://@Post ) method,\nmake y…","parent":{"sourceInstanceName":"tutorials","name":"implement-create","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Implement CREATE","order":4}},{"tableOfContents":{"items":[{"url":"#implementing-delete-operation","title":"Implementing DELETE operation"}]},"excerpt":"Implementing DELETE operation In this step, we'll write a method for deleting a blog post. By completing this step, you'll learn to map your service with the HTTP DELETE ( type://@Delete ) method, customize an exception handler, and use a blocking task ex…","parent":{"sourceInstanceName":"tutorials","name":"implement-delete","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Implement DELETE","order":7}},{"tableOfContents":{"items":[{"url":"#implementing-read-operation","title":"Implementing READ operation"}]},"excerpt":"Implementing READ operation In this step, we'll implement two methods at once. One is for retrieving a single post and another for multiple blog \nposts. By completing this step, you'll learn to map your service with the HTTP GET ( type://@Get ) method, us…","parent":{"sourceInstanceName":"tutorials","name":"implement-read","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Implement READ","order":5}},{"tableOfContents":{"items":[{"url":"#implementing-update-operation","title":"Implementing UPDATE operation"}]},"excerpt":"Implementing UPDATE operation In this step, you'll write a method for updating a blog post. By completing this step, you'll learn to map your service with the HTTP PUT ( type://@Put ) method, use parameter injection, and convert request body into a Java o…","parent":{"sourceInstanceName":"tutorials","name":"implement-update","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Implement UPDATE","order":6}},{"tableOfContents":{"items":[{"url":"#rest-tutorial-introduction","title":"REST tutorial introduction"}]},"excerpt":"REST tutorial introduction Using Armeria's annotations, you can build RESTful services on the go.\nThrough this tutorial, you'll learn to build a RESTful service with Armeria.\nIn particular, you'll be using these Armeria features: Service annotations Reque…","parent":{"sourceInstanceName":"tutorials","name":"index","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":null,"order":null}},{"tableOfContents":{"items":[{"url":"#preparing-a-data-object","title":"Preparing a data object"}]},"excerpt":"Preparing a data object Before we get into writing a blog service, first prepare a data object to contain blog post information. This object is used also in handling requests and sending responses. If you want a quick start, skip this step and copy off th…","parent":{"sourceInstanceName":"tutorials","name":"prepare-data-object","relativeDirectory":"rest/blog"},"frontmatter":{"menuTitle":"Prepare a data object","order":2}},{"tableOfContents":{"items":[{"url":"#defining-a-blog-service","title":"Defining a blog service"}]},"excerpt":"Defining a blog service Let's begin by defining our blog service in a Thrift file. What you need No preparation is required for this step. Do check that you've prepared the  prerequisites . 1. Create a Thrift file Create a Thrift file,  blog.thrift  in th…","parent":{"sourceInstanceName":"tutorials","name":"define-service","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":"Define a service","order":1}},{"tableOfContents":{"items":[{"url":"#implementing-create-operation","title":"Implementing CREATE operation"}]},"excerpt":"Implementing CREATE operation In the previous step, we defined empty service methods.\nIn this step, we'll fill in one of the service methods to create a blog post and implement a corresponding client method.\nAlso, we'll try making a call to the service me…","parent":{"sourceInstanceName":"tutorials","name":"implement-create","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":"Implement CREATE","order":3}},{"tableOfContents":{"items":[{"url":"#implementing-delete-operation","title":"Implementing DELETE operation"}]},"excerpt":"Implementing DELETE operation So far, we created, read, and updated a blog post.\nNow, let's implement and make a call to delete a blog post.\nAlso, we'll add Armeria's  Documentation Service  for testing our blog service. What you need You need to have the…","parent":{"sourceInstanceName":"tutorials","name":"implement-delete","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":"Implement DELETE","order":6}},{"tableOfContents":{"items":[{"url":"#implementing-read-operation","title":"Implementing READ operation"}]},"excerpt":"Implementing READ operation In the earlier step, we created blog posts.\nIn this step, we'll implement a read operation and make a call to read blog posts.\nWe'll write two service methods, one for reading a single post and another for multiple posts. What …","parent":{"sourceInstanceName":"tutorials","name":"implement-read","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":"Implement READ","order":4}},{"tableOfContents":{"items":[{"url":"#implementing-update-operation","title":"Implementing UPDATE operation"}]},"excerpt":"Implementing UPDATE operation Previously, we created and read blog posts.\nNow, let's implement and make a call to update a blog post.\nWe'll also learn how to handle an exception with a custom exception handler. What you need You need to have the following…","parent":{"sourceInstanceName":"tutorials","name":"implement-update","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":"Implement UPDATE","order":5}},{"tableOfContents":{"items":[{"url":"#thrift-tutorial-introduction","title":"Thrift tutorial introduction"}]},"excerpt":"Thrift tutorial introduction In this tutorial, you'll learn how to build an  Apache Thrift  service with Armeria.\nThis tutorial is based on a  sample service , a minimal blog service, with which you can create, read, update, and delete blog posts. Follow …","parent":{"sourceInstanceName":"tutorials","name":"index","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":null,"order":null}},{"tableOfContents":{"items":[{"url":"#running-a-service","title":"Running a service"}]},"excerpt":"Running a service In this step, we'll do three things with the code we obtained from our Thrift file; define the blog service in Java, create a server instance, and run the service. What you need You need to have the  generated Java code  obtained from th…","parent":{"sourceInstanceName":"tutorials","name":"run-service","relativeDirectory":"thrift/blog"},"frontmatter":{"menuTitle":"Run a service","order":2}}]}}}