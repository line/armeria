final def SPRING_BOOT_VERSION = '1.5.22.RELEASE'
final def MICROMETER_VERSION = '1.3.6'

dependencies {
    // To let a user choose between thrift and thrift0.9.
    compileOnly project(':thrift')
    implementation project(':logback')

    [ 'micrometer-core', 'micrometer-spring-legacy' ].each {
        implementation("io.micrometer:$it") {
            version {
                // Will fail the build if the override doesn't work
                strictly MICROMETER_VERSION
            }
        }
    }
    // TODO(anuraaga): Consider removing these since this module does not have related functionality.
    optionalApi("io.micrometer:micrometer-registry-prometheus") {
        version {
            // Will fail the build if the override doesn't work
            strictly MICROMETER_VERSION
        }
    }
    optionalApi 'io.dropwizard.metrics:metrics-json'

    api 'javax.inject:javax.inject'
    compileOnly 'javax.validation:validation-api'
    api("org.springframework.boot:spring-boot-starter") {
        version {
            // Will fail the build if the override doesn't work
            strictly SPRING_BOOT_VERSION
        }
    }
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor") {
        version {
            // Will fail the build if the override doesn't work
            strictly SPRING_BOOT_VERSION
        }
    }

    testImplementation project(':grpc')
    testImplementation project(':thrift')
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        version {
            // Will fail the build if the override doesn't work
            strictly SPRING_BOOT_VERSION
        }
    }
}

// Copy common files from boot-autoconfigure module to gen-src directory in order to use them as a source set.
task copyFiles(type: Copy) {
    from "${rootProject.projectDir}/spring/boot-autoconfigure/src/main/java"
    into "${project.ext.genSrcDir}/main/java"
    include '**'
    exclude '**/ArmeriaBeanPostProcessor.java'
    exclude '**/ArmeriaBeanPostProcessorConfiguration.java'
}

tasks.compileJava.dependsOn(copyFiles)
tasks.compileTestJava.dependsOn(project(':spring:boot-autoconfigure').tasks.compileTestThrift)
tasks.compileTestJava.dependsOn(project(':spring:boot-autoconfigure').tasks.generateTestProto)

// Disable checkstyle because it's checked by ':spring:boot-autoconfigure'.
tasks.withType(Checkstyle) {
    onlyIf { false }
}
