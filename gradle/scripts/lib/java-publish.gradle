configure(projectsWithFlags('publish', 'java')) {
    publishing {
        publications {
            jar(MavenPublication) {
                from components.java

                // We don't publish Gradle metadata yet so don't need to worry about these variants.
                suppressPomMetadataWarningsFor('optionalApiElements')
                suppressPomMetadataWarningsFor('optionalRuntimeElements')

                // Replace published jar with shaded when available. We manually create shading tasks instead of
                // applying the shadow plugin itself so need to do it ourselves.
                def jarOverrideFile = null
                def jarOverrideTask = null
                if (tasks.findByName('trimShadedJar')) {
                    jarOverrideFile = tasks.trimShadedJar.outJarFiles.find() as File
                    jarOverrideTask = tasks.trimShadedJar
                } else if (tasks.findByName('shadedJar')) {
                    jarOverrideFile = tasks.shadedJar.archiveFile.get().asFile
                    jarOverrideTask = tasks.shadedJar
                }
                if (jarOverrideFile != null) {
                    // For some reason this needs to be in afterEvaluate or dependencies are lost from the POM.
                    afterEvaluate {
                        def unshaded = artifacts.find { it.classifier == null && it.extension == 'jar' }
                        artifacts.remove(unshaded)
                        artifact(jarOverrideFile).builtBy(jarOverrideTask)
                    }
                }

                // Clean up the POM.
                pom {
                    withXml {
                        def rootNode = asNode()

                        if (rootNode.get('dependencies')) {
                            def dependencies = rootNode.get('dependencies')[0]
                            // Strip out shaded dependencies. We manually create shading tasks instead of applying
                            // the shadow plugin itself so need to do it ourselves.
                            def shaded = dependencies.findAll {
                                def groupId = it.get('groupId')[0]
                                def artifactId = it.get('artifactId')[0]
                                return project.ext.relocations.find {
                                    it.name == "${groupId.text()}:${artifactId.text()}"
                                }
                            }
                            shaded.each { dependencies.remove(it) }

                            def resolvedArtifacts = configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts
                            // Update unresolved dependencies constrained by the platform dependencies.
                            dependencies.findAll { it.get('version')[0] == null }.each { dep ->
                                def groupId = dep.get('groupId')[0].text()
                                def artifactId = dep.get('artifactId')[0].text()

                                def resolved = resolvedArtifacts.find { artifact ->
                                    return groupId == artifact.moduleVersion.id.group && artifactId == artifact.moduleVersion.id.name
                                }
                                if (resolved == null) {
                                    throw new IllegalStateException("Failed to resolve dependency: ${groupId}:${artifactId}")
                                }
                                def version = resolved.moduleVersion.id.version
                                // Create a new node and add it to the dependencies node.
                                dep.appendNode('version', version)

                                // Adjust the classifier and scope to be located at the end of the dependency.
                                def classifier = dep.get('classifier')[0]
                                if (classifier != null) {
                                    dep.remove(classifier)
                                    dep.appendNode('classifier', classifier.text())
                                }
                                def scope = dep.get('scope')[0]
                                dep.remove(scope)
                                dep.appendNode('scope', scope.text())
                            }
                        }
                    }
                }
            }
        }
    }
}

configure(projectsWithFlags('publish')) {
    publishing {
        publications.each { publication ->
            // Shared configuration for all publications, including BOM
            def currentArtifactId = project.ext.artifactId
            publication.artifactId currentArtifactId

            // Generate the POM.
            publication.pom {
                // Write the elements required by OSSRH.
                name = "${project.ext.projectName} (${currentArtifactId})"
                description = "${project.ext.projectDescription} (${currentArtifactId})"
                url = "${project.ext.projectUrl}"
                inceptionYear = "${project.ext.inceptionYear}"

                licenses {
                    license {
                        name = "${project.ext.licenseName}"
                        url = "${project.ext.licenseUrl}"
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = "${project.ext.authorName}"
                        email = "${project.ext.authorEmail}"
                        url = "${project.ext.authorUrl}"
                    }
                }

                scm {
                    url = "${project.ext.scmUrl}"
                    connection = "${project.ext.scmConnection}"
                    developerConnection = "${project.ext.scmDeveloperConnection}"
                }
            }
        }
    }

    if (project.ext.isSigning()) {
        signing {
            sign publishing.publications
        }
    }

    // A version catalog need to publish Gradle metadata together to be correctly imported externally.
    if (!hasFlags('version-catalog')) {
        // For now, disable Gradle metadata generation until verifying it is correctly generated.
        tasks.withType(GenerateModuleMetadata) {
            enabled = false
        }
    }
}
