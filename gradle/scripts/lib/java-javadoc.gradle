import java.security.MessageDigest

def offlineJavadoc = rootProject.hasProperty('offlineJavadoc')
def javadocCacheDir = new File(gradle.gradleUserHomeDir, 'caches/package-lists')
def defaultStylesheetFile = new File(
        buildscript.sourceFile.parentFile,
        JavaVersion.current() < JavaVersion.VERSION_1_9 ? 'java-javadoc.pre-jdk9.css' : 'java-javadoc.css')
def visitedUrls = new HashSet<String>()

task cleanJavadocCache(type: Delete, group: 'Build', description: 'Deletes the javadoc cache directory.') {
    delete javadocCacheDir
}

// Configure the Javadoc tasks of all projects.
allprojects {
    tasks.withType(Javadoc) {
        options {
            def title = "${project.ext.projectName} ${project.version} API reference"
            docTitle = title
            windowTitle = title
            bottom = project.ext.copyrightFooter + '''
            <script>
            // Open an external link in a new tab/window.
            for (var i in document.links) {
              var l = document.links[i];
              if (l.href && l.href.indexOf("?is-external=true") >= 0) {
                l.target = "_blank";
              }
            }
            </script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.3.0/highlightjs-line-numbers.min.js"></script>
            <script>
            // Trim and syntax-highlight the code snippets.
            function trimLines(lines) {
              var leadingSpaces = 65536;
              for (var j in lines) {
                lines[j] = lines[j].trimRight();
                if (lines[j].length == 0) {
                  continue;
                }

                leadingSpaces = Math.min(leadingSpaces, Math.max(0, lines[j].search(/[^ ]/)));
              }

              for (var j in lines) {
                lines[j] = lines[j].substring(leadingSpaces);
              }

              while (lines.length > 0 && lines[0].length == 0) {
                lines.shift();
              }

              while (lines.length > 0 && lines[lines.length - 1].length == 0) {
                lines.pop();
              }
            }

            var hasHljs = typeof hljs !== "undefined";
            if (hasHljs) {
              hljs.configure({
                languages: [ "java", "xml", "json", "yaml", "shell" ]
              });
            }

            var allPres = document.getElementsByTagName("PRE");
            for (var i in allPres) {
              if (typeof allPres[i].children === "undefined") {
                continue;
              }

              var children = allPres[i].children;
              if (children.length !== 1) {
                continue;
              }

              var child = children[0];
              if (child.tagName.toUpperCase() !== "CODE") {
                continue;
              }

              var lines = child.textContent.split("\\n");
              trimLines(lines);
              for (var j in lines) {
                lines[j] = lines[j].replace(/^> ?/, "");
              }
              trimLines(lines);
              child.textContent = lines.join("\\n");

              if (hasHljs) {
                hljs.highlightBlock(child);
                hljs.lineNumbersBlock(child);
              }
            }
            </script>'''.readLines().stream()
                    .map({ line -> line.trim() })
                    .filter({ line -> !line.isEmpty() && !line.startsWith('//') })
                    .collect().join('')

            encoding = 'UTF-8'
            docEncoding = 'UTF-8'
            breakIterator = true
            version = false
            author = false
            keyWords = false
            quiet()
            stylesheetFile = defaultStylesheetFile

            // Enable all lints except the missing tag warnings
            addBooleanOption('Xdoclint:accessibility').value = true
            addBooleanOption('Xdoclint:html').value = true
            addBooleanOption('Xdoclint:reference').value = true
            addBooleanOption('Xdoclint:syntax').value = true

            // Enable HTML5 if possible.
            if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                addBooleanOption('html5').value = true
            }

            // Add --allow-script-in-comments if available (since 1.8.0_121)
            try {
                if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                    addBooleanOption('-allow-script-in-comments').value = true
                } else {
                    if (Class.forName('com.sun.tools.doclets.formats.html.ConfigurationImpl')
                            .newInstance().optionLength('--allow-script-in-comments') > 0) {
                        addBooleanOption('-allow-script-in-comments').value = true
                    }
                }
            } catch (ignored) {}

            // External Javadoc links, cached under '~/.gradle/caches/package-lists'
            def downloadListFile = { File listFile, URL listUrl ->
                // Do not attempt to download more than once.
                if (!visitedUrls.add(listUrl.toString())) {
                    return
                }

                def success = false
                def tmpListFile = new File("${listFile}.tmp")

                listFile.parentFile.mkdirs()
                listFile.delete()

                logger.lifecycle("Download ${listUrl}")

                try {
                    // Set some fake headers for the web sites who blocks a URLConnection.
                    def conn = listUrl.openConnection() as HttpURLConnection
                    conn.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                    conn.setRequestProperty('Accept-Encoding', 'identity')
                    conn.setRequestProperty("Accept-Language", 'en-US,en;q=0.5')
                    conn.setRequestProperty("Cache-Control", 'no-cache')
                    conn.setRequestProperty('Pragma', 'no-cache')
                    conn.setRequestProperty('User-Agent', "Gradle/${gradle.gradleVersion} (${project.group}:${project.ext.artifactId})")
                    conn.setUseCaches(false)

                    if (conn.responseCode == 200) {
                        tmpListFile.withOutputStream { it << conn.inputStream }
                        if (tmpListFile.length() == 0) {
                            tmpListFile.delete()
                        } else {
                            success = tmpListFile.renameTo(listFile);
                        }
                    } else {
                        logger.log(LogLevel.WARN, "Download failed: ${conn.responseCode} ${conn.responseMessage}")
                    }

                    conn.disconnect()
                } catch (e) {
                    tmpListFile.delete()
                    throw new GradleScriptException("${e}", e)
                }

                return success
            }

            def addOfflineLink = { name, url ->
                if (offlineJavadoc) {
                    return
                }

                def javadocUrl = "${url}"
                if (!javadocUrl.endsWith('/')) {
                    javadocUrl += '/'
                }

                def javadocUrlSha1 = MessageDigest.getInstance('SHA1').digest(javadocUrl.getBytes('UTF-8')).encodeHex()
                def listFileDir = new File(javadocCacheDir, "${name}/${javadocUrlSha1}")
                def packageListFile = new File(listFileDir, 'package-list')
                def elementListFile = new File(listFileDir, 'element-list')

                if (packageListFile.exists() && packageListFile.length() == 0) {
                    packageListFile.delete()
                }
                if (elementListFile.exists() && elementListFile.length() == 0) {
                    elementListFile.delete()
                }

                def success = true
                if (!packageListFile.exists()) {
                    if (!downloadListFile(packageListFile, new URL("${javadocUrl}package-list"))) {
                        // Failed to download package-list, try element-list.
                        if (downloadListFile(elementListFile, new URL("${javadocUrl}element-list"))) {
                            // package-list does not exist, but element-list exists.
                            // No problem. We can generate package-list from element-list.
                            def tmpPackageListFile = new File("${packageListFile}.tmp")
                            tmpPackageListFile.withWriter('utf-8') { out ->
                                // Find only the lines with a package name.
                                elementListFile.filterLine(out, 'utf-8') { line ->
                                    def packageNamePattern = /^\p{javaJavaIdentifierStart}\p{javaJavaIdentifierPart}*(?:\.\p{javaJavaIdentifierStart}\p{javaJavaIdentifierPart}*)*$/
                                    return line.matches(packageNamePattern)
                                }
                            }
                            success = tmpPackageListFile.renameTo(packageListFile)
                        } else {
                            success = false
                        }
                    }
                }

                if (success) {
                    linksOffline javadocUrl, "${listFileDir}"
                }
            }

            addOfflineLink('java10', 'https://docs.oracle.com/javase/10/docs/api/')

            project.ext.javadocLinks.each {
                addOfflineLink("${it['groupId']}/${it['artifactId']}/${it['version']}", it['url'])
            }
        }
    }
}
