{"version":3,"file":"component---src-pages-docs-advanced-saml-mdx-c1132a3889bd0b39f602.js","mappings":"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","sources":["webpack://armeria-site/./src/layouts/docs.tsx","webpack://armeria-site/./src/pages/docs/advanced-saml.mdx"],"sourcesContent":["import { RouteComponentProps } from '@reach/router';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport docsIndex from '../pages/docs/toc.json';\nimport MdxLayout from './mdx';\n\ninterface DocsLayoutProps extends RouteComponentProps {\n  pageContext: any;\n  pageTitle: string;\n}\n\nconst DocsLayout: React.FC<DocsLayoutProps> = (props) => {\n  const {\n    allMdx: { nodes: candidateMdxNodes },\n  } = useStaticQuery(graphql`\n    query {\n      allMdx(filter: { fileAbsolutePath: { glob: \"**/src/pages/docs/**\" } }) {\n        nodes {\n          tableOfContents(maxDepth: 1)\n          excerpt(pruneLength: 256, truncate: true)\n          parent {\n            ... on File {\n              sourceInstanceName\n              name\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <MdxLayout\n      {...props}\n      candidateMdxNodes={candidateMdxNodes}\n      index={docsIndex}\n      prefix=\"docs\"\n      pageTitleSuffix=\"Armeria documentation\"\n    />\n  );\n};\n\nexport default DocsLayout;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/armeria/armeria/site/src/layouts/docs.tsx\";\nexport const pageTitle = \"SAML Single Sign-On\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Tip = makeShortcode(\"Tip\");\nconst RequiredDependencies = makeShortcode(\"RequiredDependencies\");\nconst Warning = makeShortcode(\"Warning\");\nconst layoutProps = {\n  pageTitle,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"saml-single-sign-on\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#saml-single-sign-on\",\n        \"aria-label\": \"saml single sign on permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`SAML Single Sign-On`}</h1>\n    <h6 {...{\n      \"className\": \"inlinePageToc\",\n      \"role\": \"navigation\"\n    }}>{`Table of contents`}</h6>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#what-is-saml\"\n        }}>{`What is SAML?`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#configuring-your-server-as-a-service-provider\"\n        }}>{`Configuring your server as a service provider`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#how-to-handle-the-authentication-response\"\n        }}>{`How to handle the authentication response`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#what-services-are-automatically-configured\"\n        }}>{`What services are automatically configured`}</a></li>\n    </ul>\n    <Tip mdxType=\"Tip\">\n      <p>{`Visit `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/line/armeria-examples\"\n        }}>{`armeria-examples`}</a>{` to find a fully working example.`}</p>\n    </Tip>\n    <h2 {...{\n      \"id\": \"what-is-saml\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#what-is-saml\",\n        \"aria-label\": \"what is saml permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`What is SAML?`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language\"\n      }}>{`Security Assertion Markup Language (SAML)`}</a>{`\nis an open standard for exchanging authentication and authorization data between an identity provider and\na service provider. In this protocol, a service provider is an endpoint which provides a web service to\nan end user, and an identity provider is in charge of authenticating an end user with information sent by\nthe service provider.\nArmeria currently provides `}<a parentName=\"p\" {...{\n        \"href\": \"https://wiki.shibboleth.net/confluence/display/OS30/Home\"\n      }}>{`OpenSAML`}</a>{` based\n`}<inlineCode parentName=\"p\">{`armeria-saml`}</inlineCode>{` module in order to support the integration with an identity provider from a service\nprovider's point of view.`}</p>\n    <h2 {...{\n      \"id\": \"configuring-your-server-as-a-service-provider\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#configuring-your-server-as-a-service-provider\",\n        \"aria-label\": \"configuring your server as a service provider permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Configuring your server as a service provider`}</h2>\n    <p>{`The first step to configure a service provider is adding `}<inlineCode parentName=\"p\">{`armeria-saml`}</inlineCode>{` to your dependencies.`}</p>\n    <RequiredDependencies boms={[{\n      groupId: 'com.linecorp.armeria',\n      artifactId: 'armeria-bom'\n    }]} dependencies={[{\n      groupId: 'com.linecorp.armeria',\n      artifactId: 'armeria-saml'\n    }]} mdxType=\"RequiredDependencies\" />\n    <p>{`After that, you need to prepare your keystore file which contains a key pair for signing and encryption\nof a SAML message. Also, you need to import the certificate of your identity provider into the keystore\nwhich contains your key pairs. In this example, we are using a free identity provider service hosted by\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ssocircle.com/en/\"\n      }}>{`SSOCircle`}</a>{` in order to authenticate an end user. The following commands\nmay help you to get a keystore.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Generate new key pairs as alias 'signing' and 'encryption'.\nkeytool -genkeypair -keystore sample.jks -storepass 'N5^X[hvG' -keyalg rsa -sigalg sha1withrsa \\\\\n  -dname 'CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown' -alias signing \\\\\n  -deststoretype pkcs12\nkeytool -genkeypair -keystore sample.jks -storepass 'N5^X[hvG' -keyalg rsa -sigalg sha1withrsa \\\\\n  -dname 'CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown' -alias encryption \\\\\n  -deststoretype pkcs12\n\n# Import a certificate into the keystore as alias 'https://idp.ssocircle.com', which is the entity ID\n# of the SSOCircle. You can make 'ssocircle.crt' file with the certificate from\n# 'https://www.ssocircle.com/en/idp-tips-tricks/public-idp-configuration/'.\nkeytool -importcert -keystore sample.jks -storepass 'N5^X[hvG' -file ssocircle.crt \\\\\n  -alias 'https://idp.ssocircle.com'\n`}</code></pre>\n    <p>{`Finally, you need to create your `}<a parentName=\"p\" {...{\n        \"href\": \"type://SamlServiceProvider:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlServiceProvider.html\"\n      }}>{`type://SamlServiceProvider`}</a>{` with a `}<a parentName=\"p\" {...{\n        \"href\": \"type://SamlServiceProviderBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlServiceProviderBuilder.html\"\n      }}>{`type://SamlServiceProviderBuilder`}</a>{`, and\nattach it to your `}<a parentName=\"p\" {...{\n        \"href\": \"type://Server:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/Server.html\"\n      }}>{`type://Server`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Specify information about your keystore.\n// The keystore contains two key pairs, which are identified as 'signing' and 'encryption'.\nCredentialResolver credentialResolver =\n        new KeyStoreCredentialResolverBuilder(ClassLoader.getSystemClassLoader(),\n                                              \"sample.jks\")\n                .type(\"PKCS12\")\n                .password(\"N5^X[hvG\")\n                // You need to specify your key pair and its password here.\n                .keyPassword(\"signing\", \"N5^X[hvG\")\n                .keyPassword(\"encryption\", \"N5^X[hvG\")\n                .build();\n\nSamlServiceProvider ssp =\n        SamlServiceProvider.builder()\n                           .credentialResolver(credentialResolver)\n                           // Specify the entity ID of this service provider.\n                           // You can specify what you want.\n                           .entityId(\"your-sp-id\")\n                           .hostname(\"your-service-domain-name\")\n                           // Specify an authorizer in order to authenticate a request.\n                           .authorizer(new Authorizer<HttpRequest>() { ... })\n                           // Specify a SAML single sign-on handler\n                           // which sends a response to an end user\n                           // after he or she is authenticated or not.\n                           .ssoHandler(new SamlSingleSignOnHandler() { ... })\n                           // Specify the signature algorithm of your key.\n                           .signatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA)\n                           .idp()\n                           // Specify the entity ID of the identity provider.\n                           // It can be found from the metadata of the identity provider.\n                           .entityId(\"https://idp.ssocircle.com\")\n                           // Specify the endpoint that is supposed to send an authentication request.\n                           .ssoEndpoint(\n                               ofHttpPost(\"https://idp.ssocircle.com:443/sso/SSOPOST/metaAlias/publicidp\"))\n                           .and()\n                           .build();\n\nServer server = Server.builder()\n                      .https(8443)\n                      // Configure TLS with your key and certificate.\n                      .tls(new File(\"your-certificate-file-path\"), new File(\"your-key-file-path\"))\n                      // Decorate you service with SAML decorator.\n                      .annotatedService(\"/\", new MyService(), ssp.newSamlDecorator())\n                      // Add SAML service to your server which handles a SAML response and a metadata request.\n                      .service(ssp.newSamlService())\n                      .build();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"how-to-handle-the-authentication-response\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#how-to-handle-the-authentication-response\",\n        \"aria-label\": \"how to handle the authentication response permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`How to handle the authentication response`}</h2>\n    <p><inlineCode parentName=\"p\">{`armeria-saml`}</inlineCode>{` provides `}<a parentName=\"p\" {...{\n        \"href\": \"type://SamlSingleSignOnHandler:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.html\"\n      }}>{`type://SamlSingleSignOnHandler`}</a>{` to handle the response from an identity provider.\nIt consists of `}<inlineCode parentName=\"p\">{`loginSucceeded()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`loginFailed()`}</inlineCode>{` methods which handle the response,\nand `}<inlineCode parentName=\"p\">{`beforeInitiatingSso()`}</inlineCode>{` which handles a request. In most cases, you only need to write the two methods\nwhich handle the response, but if you want to send data to your identity provider and get it back\nwith a response, you need to implement `}<inlineCode parentName=\"p\">{`beforeInitiatingSso()`}</inlineCode>{` method.`}</p>\n    <p>{`The following example shows a simple implementation of the `}<a parentName=\"p\" {...{\n        \"href\": \"type://SamlSingleSignOnHandler:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.html\"\n      }}>{`type://SamlSingleSignOnHandler`}</a>{`. In this example,\nif an authentication is succeeded, an email address is retrieved from the response by referring to a `}<inlineCode parentName=\"p\">{`name ID`}</inlineCode>{`\nelement in the assertion, then it is sent to the end user via `}<inlineCode parentName=\"p\">{`Set-Cookie`}</inlineCode>{` header. It means that your\n`}<a parentName=\"p\" {...{\n        \"href\": \"type://Authorizer:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/auth/Authorizer.html\"\n      }}>{`type://Authorizer`}</a>{` can identify an authenticated session with a `}<inlineCode parentName=\"p\">{`Cookie`}</inlineCode>{` header in the following requests,\nlike `}<inlineCode parentName=\"p\">{`MyAuthorizer`}</inlineCode>{` in this example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`class MySamlSingleSignOnHandler implements SamlSingleSignOnHandler {\n    @Override\n    public HttpResponse loginSucceeded(ServiceRequestContext ctx, AggregatedHttpRequest req,\n                                       MessageContext<Response> message, @Nullable String sessionIndex,\n                                       @Nullable String relayState) {\n        final Response response = message.getMessage();\n        final String username = response.getAssertions().stream()\n                                        .map(s -> s.getSubject().getNameID())\n                                        .filter(id -> id.getFormat().equals(SamlNameIdFormat.EMAIL.urn()))\n                                        .map(NameIDType::getValue)\n                                        .findFirst()\n                                        .orElse(null);\n        if (username == null) {\n            return HttpResponse.of(HttpStatus.UNAUTHORIZED, MediaType.HTML_UTF_8,\n                                   \"<html><body>Username is not found.</body></html>\");\n        }\n\n        // Note that you MUST NOT use this example in a real world application. You may consider encoding\n        // the value using JSON Web Tokens to prevent tempering.\n        final Cookie cookie = Cookie.secureBuilder(\"username\", username)\n                                    .domain(\"localhost\")\n                                    .maxAge(60)\n                                    .path(\"/\")\n                                    .build();\n        return HttpResponse.of(\n                ResponseHeaders,of(HttpStatus.OK,\n                                   HttpHeaderNames.CONTENT_TYPE, MediaType.HTML_UTF_8,\n                                   HttpHeaderNames.SET_COOKIE, cookie.toSetCookieHeader()),\n                HttpData.ofUtf8(\"<html><body onLoad=\\\\\"window.location.href='/welcome'\\\\\"></body></html>\"));\n    }\n\n    @Override\n    public HttpResponse loginFailed(ServiceRequestContext ctx, AggregatedHttpRequest req,\n                                    @Nullable MessageContext<Response> message, Throwable cause) {\n        return HttpResponse.of(HttpStatus.UNAUTHORIZED, MediaType.HTML_UTF_8,\n                               \"<html><body>Login failed.</body></html>\");\n    }\n}\n\nclass MyAuthorizer implements Authorizer<HttpRequest> {\n    @Override\n    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, HttpRequest data) {\n        // Note that you MUST NOT use this example in a real world application. You have to perform\n        // proper validation in your application.\n        final String cookie = data.headers().get(HttpHeaderNames.COOKIE);\n        if (cookie == null) {\n            return UnmodifiableFuture.completedFuture(false);\n        }\n\n        final boolean authenticated = Cookie.fromCookieHeader(cookie).stream().anyMatch(\n                c -> \"username\".equals(c.name()) && !Strings.isNullOrEmpty(c.value()));\n        return UnmodifiableFuture.completedFuture(authenticated);\n    }\n}\n`}</code></pre>\n    <Warning mdxType=\"Warning\">\n      <p>{`The above implementation is just an example that shows you how to handle the response, so it is recommended\nthat you write your own `}<a parentName=\"p\" {...{\n          \"href\": \"type://SamlSingleSignOnHandler:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.html\"\n        }}>{`type://SamlSingleSignOnHandler`}</a>{` according to your authentication system.`}</p>\n    </Warning>\n    <h2 {...{\n      \"id\": \"what-services-are-automatically-configured\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#what-services-are-automatically-configured\",\n        \"aria-label\": \"what services are automatically configured permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`What services are automatically configured`}</h2>\n    <p><inlineCode parentName=\"p\">{`armeria-saml`}</inlineCode>{` module automatically adds SAML services to your server with the following default paths:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/saml/acs/post`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`/saml/acs/redirect`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`SAML assertion consumer services for HTTP Post binding and HTTP Redirect binding. These services are invoked\nby an identity provider when it responds to an authentication request received from your service.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/saml/slo/post`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`/saml/slo/redirect`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`SAML single logout services for HTTP Post binding and HTTP Redirect binding. These services may be invoked\nby an identity provider when it performs global logout.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/saml/metadata`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`SAML metadata service. In the metadata, the endpoints for assertion consumer services and single logout\nservices are specified by `}<inlineCode parentName=\"li\">{`md:AssertionConsumerService`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`md:SingleLogoutService`}</inlineCode>{` elements\nrespectively. The certificates of the `}<inlineCode parentName=\"li\">{`signing`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`encryption`}</inlineCode>{` key pair are also included.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <Tip mdxType=\"Tip\">\n      <p>{`In order for your service to act as a service provider, you need to register your service to your identity\nprovider, and providing your metadata is the easiest way to do that. You can get your metadata from\n`}<inlineCode parentName=\"p\">{`https://your-service-domain-name:your-service-port/saml/metadata`}</inlineCode>{`.`}</p>\n    </Tip>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["props","allMdx","nodes","candidateMdxNodes","useStaticQuery","React","MdxLayout","Object","assign","index","docsIndex","prefix","pageTitleSuffix","pageTitle","_frontmatter","makeShortcode","name","console","warn","mdx","Tip","RequiredDependencies","Warning","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","mdxType","parentName","boms","groupId","artifactId","dependencies","isMDXComponent"],"sourceRoot":""}