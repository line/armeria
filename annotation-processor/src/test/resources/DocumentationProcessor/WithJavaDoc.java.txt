/*
 * Copyright 2020 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.linecorp.armeria;

import com.linecorp.armeria.server.annotation.Delete;
import com.linecorp.armeria.server.annotation.Get;
import com.linecorp.armeria.server.annotation.Param;
import com.linecorp.armeria.server.annotation.Post;
import com.linecorp.armeria.server.annotation.Put;

public class WithJavaDoc {
    /**
     * A method.
     * @param x The x variable in a
     * @param y The y variable in a
     */
    @Post("/a")
    public void a(@Param("x") String x,
                  @Param("y") String y) {
        System.out.println(x + y);
    }

    /**
     * B method.
     * @param x The x variable in b
     * @param y The y variable in b
     */
    @Put("/b")
    public void b(@Param("x") String x,
                  @Param("y") String y) {
        System.out.println(x + y);
    }

    /**
     * C method.
     * @param x The x variable in c
     * @param y The y variable in c
     */
    @Delete("/c/{x}/{y}")
    public void c(@Param("x") String x,
                  @Param("y") String y) {
        System.out.println(x + y);
    }

    /**
     * D method.
     * @deprecated x is deprecated
     * @param x The x variable in d
     * @param y The y variable in d
     */
    @Get("/d/{x}/{y}")
    public void d(@Param("x") String x,
                  @Param("y") String y) {
        System.out.println(x + y);
    }

    /**
     * hasReturn method.
     * @param x The x variable in hasReturn
     * @return The number 1
     */
    @Get
    public int hasReturn(@Param("x") String x) {
        System.out.println(x);
        return 1;
    }

    /**
     * hasThrows method.
     * @param x The x variable in hasThrows
     * @throws IllegalArgumentException when x is empty
     */
    @Get
    public void hasThrows(@Param("x") String x) {
        if (x.isEmpty()) {
            throw new IllegalArgumentException("x is empty");
        }
        System.out.println(x);
    }

    /**
     * hasReturnAndThrows method.
     * @since 1.4
     * @param x The x variable in hasReturnAndThrows
     * @return The number 1
     * @throws IllegalArgumentException when x is empty
     */
    @Get
    public int hasReturnAndThrows(@Param("x") String x) {
        if (x.isEmpty()) {
            throw new IllegalArgumentException("x is empty");
        }
        System.out.println(x);
        return 1;
    }

    /**
     * hasMultilineComment method.
     * @param x The x variable in hasMultilineComment
     *          and this continues on the next line
     */
    @Get
    public void hasMultilineComment(@Param("x") String x) {
        System.out.println(x);
    }
}
