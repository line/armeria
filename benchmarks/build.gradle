buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:${managedVersions['me.champeau.gradle:jmh-gradle-plugin']}"
    }
}

apply plugin: 'me.champeau.gradle.jmh'

def jmhInclude = rootProject.findProperty('jmh.include') ?: ''

dependencies {
    implementation project(':grpc')
    implementation project(':grpc-protocol')
    implementation project(':retrofit2')
    implementation project(':thrift')

    implementation 'com.squareup.retrofit2:converter-jackson'
    implementation 'com.google.protobuf:protobuf-java-util'
    implementation 'io.grpc:grpc-okhttp'
    implementation 'io.grpc:grpc-netty-shaded'
    implementation 'org.awaitility:awaitility'

    jmh "pl.project13.scala:sbt-jmh-extras:${managedVersions['pl.project13.scala:sbt-jmh-extras']}"
}

jmh {
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
    jmhVersion = managedVersions['org.openjdk.jmh:jmh-core']

    if (jmhInclude) {
        include = jmhInclude
    }

    if (rootProject.hasProperty('jmh.fork')) {
        fork = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.fork')))
    } else {
        fork = 1
    }

    if (rootProject.hasProperty('jmh.iterations')) {
        iterations = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.iterations')))
    }

    if (rootProject.hasProperty('jmh.warmupIterations')) {
        warmupIterations = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.warmupIterations')))
    } else {
        warmupIterations = iterations
    }

    if (rootProject.hasProperty('jmh.profilers')) {
        profilers = String.valueOf(rootProject.findProperty('jmh.profilers')).split(',')
    }

    if (rootProject.hasProperty('jmh.threads')) {
        threads = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.threads')))
    }

    if (rootProject.hasProperty('jmh.verbose')) {
        verbosity = 'EXTRA'
    }

    if (rootProject.hasProperty('jmh.jvmargs')) {
        jvmArgsAppend = String.valueOf(rootProject.findProperty('jmh.jvmargs')).split(' ').toList()
    }

    if (rootProject.hasProperty('jmh.forceGC')) {
        forceGC = 'true'.equals(rootProject.findProperty('jmh.forceGC'))
    } else {
        forceGC = true
    }

    if (rootProject.hasProperty('jmh.params')) {
        benchmarkParameters = [:]
        rootProject.findProperty('jmh.params').split(';').each {
            def parts = it.split('=')
            benchmarkParameters[parts[0]] = parts[1].tokenize(',')
        }
    }
}
