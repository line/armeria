{"version":3,"file":"component---src-pages-docs-advanced-streaming-backpressure-mdx-143d080da36e954b338b.js","mappings":"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","sources":["webpack://armeria-site/./src/layouts/docs.tsx","webpack://armeria-site/./src/pages/docs/advanced-streaming-backpressure.mdx"],"sourcesContent":["import { RouteComponentProps } from '@reach/router';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport docsIndex from '../pages/docs/toc.json';\nimport MdxLayout from './mdx';\n\ninterface DocsLayoutProps extends RouteComponentProps {\n  pageContext: any;\n  pageTitle: string;\n}\n\nconst DocsLayout: React.FC<DocsLayoutProps> = (props) => {\n  const {\n    allMdx: { nodes: candidateMdxNodes },\n  } = useStaticQuery(graphql`\n    query {\n      allMdx(filter: { fileAbsolutePath: { glob: \"**/src/pages/docs/**\" } }) {\n        nodes {\n          tableOfContents(maxDepth: 1)\n          excerpt(pruneLength: 256, truncate: true)\n          parent {\n            ... on File {\n              sourceInstanceName\n              name\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <MdxLayout\n      {...props}\n      candidateMdxNodes={candidateMdxNodes}\n      index={docsIndex}\n      prefix=\"docs\"\n      pageTitleSuffix=\"Armeria documentation\"\n    />\n  );\n};\n\nexport default DocsLayout;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/armeria/armeria/site/src/layouts/docs.tsx\";\nexport const pageTitle = \"Sending a streaming response with back pressure\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Tip = makeShortcode(\"Tip\");\nconst layoutProps = {\n  pageTitle,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"sending-a-streaming-response-with-back-pressure\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#sending-a-streaming-response-with-back-pressure\",\n        \"aria-label\": \"sending a streaming response with back pressure permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Sending a streaming response with back pressure`}</h1>\n    <h6 {...{\n      \"className\": \"inlinePageToc\",\n      \"role\": \"navigation\"\n    }}>{`Table of contents`}</h6>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#sending-a-file-with-back-pressure\"\n        }}>{`Sending a file with back pressure`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#sending-a-streaming-response-using-httpresponsewriter\"\n        }}>{`Sending a streaming response using HttpResponseWriter`}</a></li>\n    </ul>\n    <p>{`Suppose we want to serve a static file whose size is larger than your available memory. If we load the file into the memory at once, we will definitely get an `}<inlineCode parentName=\"p\">{`OutOfMemoryError`}</inlineCode>{`.`}</p>\n    <p>{`To prevent such error and send large files without consuming too much memory:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Divide the file into chunks.`}</li>\n      <li parentName=\"ol\">{`Load the first chunk into memory.`}</li>\n      <li parentName=\"ol\">{`Send the chunk to the client.`}</li>\n      <li parentName=\"ol\">{`Wait until the chunk is written to the sending socket buffer. (See below for explanation.)`}</li>\n      <li parentName=\"ol\">{`Load the second chunk and repeat the steps 3 and 4 until we send all chunks.`}</li>\n    </ol>\n    <p>{`Waiting for the chunk to be written is to avoid loading data into memory when the client is not ready to receive. This is called `}<strong parentName=\"p\">{`back pressure`}</strong>{`.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"https://engineering.linecorp.com/en/blog/reactive-streams-armeria-1/\"\n      }}>{`Let’s Play with Reactive Streams on Armeria - 1`}</a>{` to learn the conditions under which an `}<inlineCode parentName=\"p\">{`OutOfMemoryError`}</inlineCode>{` is raised and back pressure which can help you with the error.`}</p>\n    <h2 {...{\n      \"id\": \"sending-a-file-with-back-pressure\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#sending-a-file-with-back-pressure\",\n        \"aria-label\": \"sending a file with back pressure permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Sending a file with back pressure`}</h2>\n    <p>{`To send a file with back pressure, use `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpFile:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/file/HttpFile.html\"\n      }}>{`type://HttpFile`}</a>{`, which loads and sends file chunks one by one to the client with back pressure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.linecorp.armeria.server.Server;\nimport com.linecorp.armeria.server.file.HttpFile;\n\nHttpFile bigFile = HttpFile.of(new File(\"/var/www/big_file.dat\"));\nServer.builder()\n      .service(\"/big_file.dat\", bigFile.asService())\n      .build();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sending-a-streaming-response-using-httpresponsewriter\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#sending-a-streaming-response-using-httpresponsewriter\",\n        \"aria-label\": \"sending a streaming response using httpresponsewriter permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Sending a streaming response using HttpResponseWriter`}</h2>\n    <p>{`To send large data other than files such as database, you need to implement back pressure yourself. Let's start off with implementing a minimal `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpFile:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/file/HttpFile.html\"\n      }}>{`type://HttpFile`}</a>{`.`}</p>\n    <p>{`Prepare to send a streaming response with `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpResponseWriter:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponseWriter.html\"\n      }}>{`type://HttpResponseWriter`}</a>{` returned by `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpResponse#streaming():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponse.html#streaming()\"\n      }}>{`type://HttpResponse#streaming()`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.linecorp.armeria.common.HttpData;\nimport com.linecorp.armeria.common.HttpResponse;\nimport com.linecorp.armeria.common.HttpResponseWriter;\nimport com.linecorp.armeria.common.ResponseHeaders;\nimport com.linecorp.armeria.server.ServerBuilder;\n\n// ⚠️ This code has a problem. Do not copy/paste and use it.\nServerBuilder sb = ...;\nsb.service(\"/big_file.dat\", (ctx, req) -> {\n    HttpResponseWriter response = HttpResponse.streaming();\n    // We must write the response headers first.\n    response.write(ResponseHeaders.of(200));\n    response.write(produceChunk(0));\n    response.write(produceChunk(1));\n    response.write(produceChunk(2));\n    ... // Write more chunks until we send all chunks.\n    // Call close() to end the response.\n    response.close();\n    return response;\n}\n\n...\nprivate HttpData produceChunk(int index) {\n    // Divide the file by the pre-defined chunk size(e.g. 8192 bytes)\n    // and read it using index.\n    // If index is 0, 0 to 8192 bytes from the file is read.\n    // If index is 1, 8193 to 16384 is read and so on.\n}\n`}</code></pre>\n    <p>{`With the code above, the server would encounter `}<inlineCode parentName=\"p\">{`OutOfMemoryError`}</inlineCode>{`. We still need to take care of preventing loading data chunks into memory before a chunk is sent to the client. To solve the problem, implement back pressure with `}<a parentName=\"p\" {...{\n        \"href\": \"type://StreamWriter#whenConsumed():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/stream/StreamWriter.html#whenConsumed()\"\n      }}>{`type://StreamWriter#whenConsumed()`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`sb.service(\"/big_file.dat\", (ctx, req) -> {\n    HttpResponseWriter response = HttpResponse.streaming();\n    response.write(ResponseHeaders.of(200));\n    response.whenConsumed().thenRun(() -> {\n        // Produce the first chunk when the ResponseHeaders is\n        // written to the socket.\n        response.write(produceChunk(0));\n        response.whenConsumed().thenRun(() -> {\n            // Produce the second chunk when the first chunk is\n            // written to the socket.\n            response.write(produceChunk(1));\n            ...\n        });\n    });\n    return response;\n});\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"type://StreamWriter#whenConsumed():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/stream/StreamWriter.html#whenConsumed()\"\n      }}>{`type://StreamWriter#whenConsumed()`}</a>{` returns a `}<inlineCode parentName=\"p\">{`CompletableFuture`}</inlineCode>{` that is complete when the chunk written to the `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpResponseWriter:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponseWriter.html\"\n      }}>{`type://HttpResponseWriter`}</a>{` is finally written to the socket. This enables you to add the next task by adding a callback (`}<inlineCode parentName=\"p\">{`thenRun()`}</inlineCode>{` in the code example). The next task in the example is set to produce the next chunk.`}</p>\n    <Tip mdxType=\"Tip\">\n      <p>{`See `}<a parentName=\"p\" {...{\n          \"href\": \"https://engineering.linecorp.com/en/blog/reactive-streams-armeria-2/\"\n        }}>{`Let’s Play with Reactive Streams on Armeria - 2`}</a>{` to learn how network layer plays in with back pressure.`}</p>\n    </Tip>\n    <p>{`Of course, we would need to use recursion to be free from infinite implementation of the callback.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`sb.service(\"/big_file.dat\", (ctx, req) -> {\n    HttpResponseWriter response = HttpResponse.streaming();\n    response.write(ResponseHeaders.of(200));\n    streamingResponse(response, 0);\n    return response;\n});\n\nprivate void streamingResponse(HttpResponseWriter response, int index) {\n    if (isEndOfFile()) {\n        // Close the response when we send all chunks.\n        response.close();\n        return;\n    }\n    response.whenConsumed().thenRun(() -> {\n        if (response.tryWrite(produceChunk(index))) {\n            streamingResponse(response, index + 1);\n        } else {\n            // The response is completed unexpectedly.\n        }\n    });\n}\n`}</code></pre>\n    <p>{`So far, we have implemented a simple version of `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpFile:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/file/HttpFile.html\"\n      }}>{`type://HttpFile`}</a>{`. Now, we can implement a streaming response with back pressure for any type of source (e.g. database) by simply changing the `}<inlineCode parentName=\"p\">{`produceChunk()`}</inlineCode>{` method to fetch data from the source.`}</p>\n    <p>{`You have other alternatives to implement back pressure with; there are libraries such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://projectreactor.io\"\n      }}>{`Reactor`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ReactiveX/RxJava\"\n      }}>{`RxJava`}</a>{`. If you opt to use such alternative,\nreturn the response using `}<a parentName=\"p\" {...{\n        \"href\": \"type://HttpResponse#of(ResponseHeaders,Publisher):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpResponse.html#of(com.linecorp.armeria.common.ResponseHeaders,org.reactivestreams.Publisher)\"\n      }}>{`type://HttpResponse#of(ResponseHeaders,Publisher)`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`sb.service(\"/big_data.dat\", (ctx, req) -> {\n    Flux<HttpData> flux = ... // Fetch data from other source with backpressure.\n    return HttpResponse.of(ResponseHeaders.of(200), flux);\n});\n`}</code></pre>\n    <Tip mdxType=\"Tip\">\n      <p>{`Have a go at experimenting with a rather `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/line/armeria-examples/blob/main/proxy-server/src/main/java/example/armeria/proxy/AnimationService.java\"\n        }}>{`fun working example`}</a>{` that sends a streaming response with back pressure.`}</p>\n    </Tip>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["props","allMdx","nodes","candidateMdxNodes","useStaticQuery","React","MdxLayout","Object","assign","index","docsIndex","prefix","pageTitleSuffix","pageTitle","_frontmatter","Tip","name","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","mdxType","parentName","isMDXComponent"],"sourceRoot":""}