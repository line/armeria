"use strict";(self.webpackChunkarmeria_site=self.webpackChunkarmeria_site||[]).push([[3612],{7843:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return p},default:function(){return h},pageTitle:function(){return s}});var n,r=a(63366),i=(a(67294),a(64983)),l=a(89791),o=["components"],s="Implementing UPDATE operation",p={},c=(n="TutorialSteps",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),d={pageTitle:s,_frontmatter:p},m=l.Z;function h(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)(m,Object.assign({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"implementing-update-operation",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h1",href:"#implementing-update-operation","aria-label":"implementing update operation permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Implementing UPDATE operation"),(0,i.kt)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#what-you-need"},"What you need"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#1-implement-server-side"},"1. Implement server-side")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#add-an-exception-handler"},"Add an exception handler")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#implement-the-service-method"},"Implement the service method")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#3-test-updating-a-blog-post"},"3. Test updating a blog post"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#4-test-an-error-case"},"4. Test an error case"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#whats-next"},"What's next")))),(0,i.kt)("p",null,"Previously, we created and read blog posts.\nNow, let's implement and make a call to update a blog post.\nWe'll also learn how to handle an exception with a custom exception handler."),(0,i.kt)(c,{current:5,mdxType:"TutorialSteps"}),(0,i.kt)("h2",{id:"what-you-need",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h2",href:"#what-you-need","aria-label":"what you need permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What you need"),(0,i.kt)("p",null,"You need to have the following files obtained from previous steps.\nYou can always ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/line/armeria-examples/tree/main/tutorials/grpc"},"download")," the full version, instead of creating one yourself."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/tutorials/grpc/blog/define-service#6-compile-the-proto-file"},"Generated Java code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BlogService.java")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Main.java")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BlogServiceTest.java"))),(0,i.kt)("h2",{id:"1-implement-server-side",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h2",href:"#1-implement-server-side","aria-label":"1 implement server side permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"1. Implement server-side"),(0,i.kt)("p",null,"Let's implement the server-side for updating blog posts.\nThis time, we'll use a custom exception handler."),(0,i.kt)("h3",{id:"add-an-exception-handler",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h3",href:"#add-an-exception-handler","aria-label":"add an exception handler permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Add an exception handler"),(0,i.kt)("p",null,"First, add a custom exception handler for the blog service."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a class for the exception to be thrown when a specified blog post ID doesn't exist."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogNotFoundException.java",filename:"BlogNotFoundException.java"},"package example.armeria.server.blog.grpc;\n\nfinal class BlogNotFoundException extends IllegalStateException {\n  BlogNotFoundException(String s) {\n      super(s);\n  }\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add an exception handler class for the blog service."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=GrpcExceptionHandler.java",filename:"GrpcExceptionHandler.java"},"package example.armeria.server.blog.grpc;\n\nimport com.linecorp.armeria.common.RequestContext;\nimport com.linecorp.armeria.common.annotation.Nullable;\nimport com.linecorp.armeria.common.grpc.GrpcExceptionHandlerFunction;\n\nimport io.grpc.Metadata;\nimport io.grpc.Status;\n\npublic class GrpcExceptionHandler implements GrpcExceptionHandlerFunction {\n\n  @Nullable\n  @Override\n  public Status apply(RequestContext ctx, Throwable cause, Metadata metadata) {\n    if (cause instanceof IllegalArgumentException) {\n        return Status.INVALID_ARGUMENT.withCause(cause);\n    }\n    if (cause instanceof BlogNotFoundException) {\n        return Status.NOT_FOUND.withCause(cause).withDescription(cause.getMessage());\n    }\n\n    // The default mapping function will be applied.\n    return null;\n  }\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Main")," class, bind the ",(0,i.kt)("inlineCode",{parentName:"p"},"GrpcExceptionHandler")," to our service."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=Main.java",filename:"Main.java"},"private static Server newServer(int port) throws Exception {\n  final GrpcService grpcService =\n     GrpcService.builder()\n                .addService(new BlogService())\n                .exceptionMapping(new GrpcExceptionHandler()) // Add this\n                .build();\n  ...\n}\n")))),(0,i.kt)("h3",{id:"implement-the-service-method",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h3",href:"#implement-the-service-method","aria-label":"implement the service method permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Implement the service method"),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"BlogServiceImpl")," class, add a service method for updating a blog post."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java",filename:"BlogService.java"},'import example.armeria.blog.grpc.UpdateBlogPostRequest;\n\npublic class BlogService extends BlogServiceGrpc.BlogServiceImplBase {\n  @Override\n  public void updateBlogPost(UpdateBlogPostRequest request, StreamObserver<BlogPost> responseObserver) {\n    final BlogPost oldBlogPost = blogPosts.get(request.getId());\n    if (oldBlogPost == null) {\n      throw new BlogNotFoundException("The blog post does not exist. ID: " + request.getId());\n    } else {\n      final BlogPost newBlogPost = oldBlogPost.toBuilder()\n                .setTitle(request.getTitle())\n                .setContent(request.getContent())\n                .setModifiedAt(Instant.now().toEpochMilli())\n                .build();\n      blogPosts.put(request.getId(), newBlogPost);\n      responseObserver.onNext(newBlogPost);\n      responseObserver.onCompleted();\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"3-test-updating-a-blog-post",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h2",href:"#3-test-updating-a-blog-post","aria-label":"3 test updating a blog post permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"3. Test updating a blog post"),(0,i.kt)("p",null,"Let's try updating the content of the first blog post.\nAdd a method like the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\n@Order(5)\nvoid updateBlogPosts() throws JsonProcessingException {\n  final UpdateBlogPostRequest request = UpdateBlogPostRequest.newBuilder()\n              .setId(0)\n              .setTitle("My first blog")\n              .setContent("Hello awesome Armeria!")\n              .build();\n  final BlogPost updated = client.updateBlogPost(request);\n  assertThat(updated.getId()).isZero();\n  assertThat(updated.getTitle()).isEqualTo("My first blog");\n  assertThat(updated.getContent()).isEqualTo("Hello awesome Armeria!");\n}\n')),(0,i.kt)("p",null,"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed."),(0,i.kt)("h2",{id:"4-test-an-error-case",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h2",href:"#4-test-an-error-case","aria-label":"4 test an error case permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"4. Test an error case"),(0,i.kt)("p",null,"To check that our exception handler is working, let's try updating a post which does not exist."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Bind the exception handler to the service for the test server.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},"@RegisterExtension\nstatic final ServerExtension server = new ServerExtension() {\n  @Override\n  protected void configure(ServerBuilder sb) throws Exception {\n    sb.service(GrpcService.builder()\n              .addService(new BlogService())\n              .exceptionHandler(new GrpcExceptionHandler()) // Add this\n              .build());\n  }\n};\n"))),(0,i.kt)("li",{parentName:"ol"},"Add a test method to update a blog post with an invalid ID, asserting an exception is thrown as expected.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\n@Order(6)\nvoid updateInvalidBlogPost() {\n  final Throwable exception = catchThrowable(() -> {\n     client.updateBlogPost(UpdateBlogPostRequest.newBuilder()\n              .setId(Integer.MAX_VALUE)\n              .setTitle("My first blog")\n              .setContent("Hello awesome Armeria!")\n              .build());\n  });\n  final StatusRuntimeException statusException = (StatusRuntimeException) exception;\n  assertThat(statusException.getStatus().getCode()).isEqualTo(Code.NOT_FOUND);\n  assertThat(statusException)\n              .hasMessageContaining("The blog post does not exist. ID: " + Integer.MAX_VALUE);\n}\n'))),(0,i.kt)("li",{parentName:"ol"},"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed.")),(0,i.kt)("h2",{id:"whats-next",style:{position:"relative"}},(0,i.kt)("a",{parentName:"h2",href:"#whats-next","aria-label":"whats next permalink",className:"anchor before"},(0,i.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What's next"),(0,i.kt)("p",null,"In this step, we've implemented a service method for updating a blog post.\nWe've also added an exception handler."),(0,i.kt)("p",null,"Next, at ",(0,i.kt)("a",{parentName:"p",href:"/tutorials/grpc/blog/implement-delete"},"Step 6. Implement DELETE"),", we'll implement a method\nfor deleting a blog post and add a ",(0,i.kt)("a",{parentName:"p",href:"/docs/server-docservice"},"Documentation Service")," to our service."),(0,i.kt)(c,{current:5,mdxType:"TutorialSteps"}))}h.isMDXComponent=!0},89791:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(25444),r=a(67294),i=JSON.parse('{"root":["index"],"Useful links":{"User manual":"/docs","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"REST service":["rest/blog","rest/blog/create-server","rest/blog/prepare-data-object","rest/blog/add-services-to-server","rest/blog/implement-create","rest/blog/implement-read","rest/blog/implement-update","rest/blog/implement-delete"],"gRPC service":["grpc/blog","grpc/blog/define-service","grpc/blog/run-service","grpc/blog/implement-create","grpc/blog/implement-read","grpc/blog/implement-update","grpc/blog/implement-delete"],"Thrift service":["thrift/blog","thrift/blog/define-service","thrift/blog/run-service","thrift/blog/implement-create","thrift/blog/implement-read","thrift/blog/implement-update","thrift/blog/implement-delete"]}'),l=a(46731),o=function(e){var t=(0,n.useStaticQuery)("3172452987").allMdx.nodes;return r.createElement(l.Z,Object.assign({},e,{candidateMdxNodes:t,index:i,prefix:"tutorials",menuTitle:!0,pageTitleSuffix:"Armeria tutorial"}))}}}]);
//# sourceMappingURL=component---src-pages-tutorials-grpc-blog-implement-update-mdx-d8bbbf68495bbac06234.js.map