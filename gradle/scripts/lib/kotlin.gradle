configure(projectsWithFlags('kotlin')) {

    apply plugin: 'kotlin'

    // compileJmhKotlin is injected by 'jmh' plugin while a benchmark module is being initialized.
    afterEvaluate {
        def target = project.tasks.findByName('compileJava')?.targetCompatibility ?:
                project.findProperty('javaTargetCompatibility') ?: '1.8'
        def compilerArgs = ['-java-parameters', '-Xjsr305=strict', '-Xskip-prerelease-check']
        // A workaround to find all Kotlin compilation tasks.
        // The standard way, `tasks.withType(KotlinCompile)`, does not work here.
        tasks.matching {
            def name = it.name
            // Expected task names: "compile<Name>Kotlin" or "kaptGenerateStubs<Name>Kotlin"
            (name.startsWith("compile") || name.startsWith("kaptGenerateStubs")) && name.endsWith("Kotlin")
        }.each { task ->
            task.kotlinOptions.jvmTarget = target
            task.kotlinOptions.freeCompilerArgs = compilerArgs
        }
    }

    if (!rootProject.hasProperty('noLint')) {
        apply plugin: "org.jlleitschuh.gradle.ktlint"

        ktlint {
            verbose.set(true)
            reporters {
                reporter "html"
            }
            // https://github.com/pinterest/ktlint/issues/527
            disabledRules = ["import-ordering"]

            filter {
                exclude { it.file.path.contains("gen-src/") }
            }
        }

        afterEvaluate {

            // `tasks.withType(KtLintCheckTask)` does not work here.
            ['Main', 'Test', 'Jmh'].each { name ->
                // A workaround for 'runKtlintCheckOverMainSourceSet' uses this output of task ':generateProto'
                // without declaring an explicit or implicit dependency.
                def ktlintTask = tasks.findByName("runKtlintCheckOver${name}SourceSet")
                if (ktlintTask != null) {
                    ktlintTask.dependsOn(project.ext.getGenerateSourcesTask())
                }
                // A workaround for 'compileJmhKotlin' uses this output of task 'compileJmhThrift' without
                // declaring an explicit or implicit dependency.
                def compileTask = tasks.findByName("compile${name}Kotlin")
                if (compileTask != null) {
                    compileTask.dependsOn(project.ext.getGenerateSourcesTask())
                }
            }
            project.ext.getLintTask().dependsOn(tasks.ktlintCheck)
        }
    }

    // A workaround for runtime JAR files in the classpath should have the same version.
    // See: https://stackoverflow.com/questions/42569445/warning-kotlin-runtime-jar-files-in-the-classpath-should-have-the-same-version
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-reflect' &&
                    managedVersions.containsKey('org.jetbrains.kotlin:kotlin-reflect')) {
                details.useVersion managedVersions['org.jetbrains.kotlin:kotlin-reflect']
            }
        }
    }
}
