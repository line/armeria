import org.jsoup.Jsoup
import org.jsoup.nodes.Element
import org.jsoup.select.Elements

import java.util.concurrent.atomic.AtomicBoolean

import static java.lang.Math.min

buildscript {
    dependencies {
        classpath libs.jsoup
    }
}

plugins {
    alias libs.plugins.osdetector apply false
    alias libs.plugins.scalafmt apply false
    alias libs.plugins.nexus.publish
    alias libs.plugins.kotlin apply false
    alias libs.plugins.ktlint apply false
    alias libs.plugins.errorprone apply false
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    // Set the artifactId of 'armeria-core' to 'armeria'.
    artifactIdOverrides = [':core': rootProject.name]
}

apply from: "${rootDir}/gradle/scripts/build-flags.gradle"

// Fail the build if the console contains 'LEAK:'.
def hasLeak = new AtomicBoolean()
gradle.buildFinished({ result ->

    if (hasLeak.get()) {
        throw new TestExecutionException('Found a leak while testing. ' +
                "Specify '-Pleak' option to record the detail and " +
                'find it using the following command: \n\n' +
                "    find . -type f -name 'TEST-*.xml' -exec grep -Fl 'LEAK: ' {} ';'\n")
    }
})

allprojects {
    // Add common JVM options such as max memory and leak detection.
    tasks.withType(JavaForkOptions) {
        maxHeapSize = '768m'

        if (project.ext.testJavaVersion >= 9) {
            jvmArgs '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED'
        }

        // Enable leak detection when '-Pleak' option is specified.
        if (rootProject.hasProperty('leak')) {
            systemProperties 'io.netty.leakDetectionLevel': 'paranoid'
            systemProperties 'io.netty.leakDetection.targetRecords': '256'
        }
    }

    tasks.withType(Test) {
        // Do not omit stack frames for easier tracking.
        jvmArgs '-XX:-OmitStackTraceInFastThrow'

        // Drop heap dump and exit on OOME.
        jvmArgs '-XX:+ExitOnOutOfMemoryError'
        jvmArgs '-XX:+HeapDumpOnOutOfMemoryError'
        jvmArgs "-XX:HeapDumpPath=${rootProject.buildDir}"

        // `-Djava.security.manager` was added in Java 17 and the default value was changed to
        // `disallow` in Java 18.
        // - https://openjdk.org/jeps/411
        // - https://bugs.openjdk.org/browse/JDK-8270380
        if (project.ext.testJavaVersion >= 17) {
            systemProperty "java.security.manager", "allow"
        }

        // required by blockhound for jvm 13+. See https://github.com/reactor/BlockHound/issues/33.
        if (rootProject.hasProperty('blockhound') && project.ext.testJavaVersion >= 13) {
            jvmArgs "-XX:+AllowRedefinitionToAddDeleteMethods"
        }

        // Use verbose exception/response reporting for easier debugging.
        systemProperty 'com.linecorp.armeria.verboseExceptions', 'true'
        systemProperty 'com.linecorp.armeria.verboseResponses', 'true'

        systemProperty 'com.linecorp.armeria.blockhound.reportFile', "${project.buildDir}/blockhound.log"

        // Pass special system property to tell our tests that we are measuring coverage.
        if (project.hasFlags('coverage')) {
            systemProperty 'com.linecorp.armeria.testing.coverage', 'true'
        }

        // Parallelize if --parallel is on.
        if (gradle.startParameter.parallelProjectExecutionEnabled) {
            maxParallelForks = gradle.startParameter.maxWorkerCount
        }

        // Fail the build at the end if there was any leak.
        // We do not fail immediately so that we collect as many leaks as possible.
        doFirst {
            addTestOutputListener({ descriptor, event ->
                if (event.message.contains('LEAK: ')) {
                    hasLeak.set(true)
                }
            })
        }
    }
}

// Configure all Java projects
configure(projectsWithFlags('java')) {

    // Error Prone compiler
    if (!rootProject.hasProperty('noLint')) {
        apply plugin: 'net.ltgt.errorprone'

        dependencies {
            errorprone libs.errorprone.core
        }

        tasks.withType(JavaCompile) {
            options.errorprone.excludedPaths = '.*/gen-src/.*'
        }
    }

    // Common dependencies
    dependencies {
        // All projects currently require ':core' (except itself)
        if (project != project(':core')) {
            api project(':core')
        }

        // Testing utilities
        testImplementation project(':testing-internal')

        // completable-futures
        implementation libs.futures.completable

        // Errorprone
        compileOnly libs.errorprone.annotations
        testImplementation libs.errorprone.annotations

        // FastUtil
        implementation libs.fastutil

        // Guava
        implementation libs.guava

        // J2ObjC annotations
        compileOnly libs.j2objc

        // JSR305
        implementation libs.findbugs

        // JCTools
        implementation libs.jctools

        // Jetty ALPN support
        compileOnly libs.jetty.alpn.api

        // Logging
        implementation libs.slf4j.api
        testImplementation libs.slf4j.jul.to.slf4j
        testImplementation libs.logback
        testRuntimeOnly libs.slf4j.jcl.over.slf4j
        testRuntimeOnly libs.slf4j.log4j.over.slf4j

        // Reflections
        implementation libs.reflections

        // Blockhound
        optionalImplementation libs.blockhound

        // Test-time dependencies
        testImplementation libs.guava.testlib
        testImplementation libs.junit4
        testImplementation libs.junit5.jupiter.api
        testImplementation libs.junit5.jupiter.params
        testRuntimeOnly libs.junit5.platform.commons
        testRuntimeOnly libs.junit5.platform.launcher
        testRuntimeOnly libs.junit5.jupiter.engine
        testRuntimeOnly libs.junit5.vintage.engine
        testImplementation libs.json.unit
        testImplementation libs.json.unit.fluent
        testImplementation libs.awaitility
        testRuntimeOnly libs.checkerframework // Required by guava-testlib
        testImplementation libs.assertj
        testImplementation libs.mockito
        testImplementation libs.apache.httpclient5
        testImplementation libs.hamcrest
        testImplementation libs.hamcrest.library
        testRuntimeOnly libs.kotlin.coroutines.debug

        if (rootProject.hasProperty('blockhound')) {
            testRuntimeOnly libs.blockhound.junit.platform
        }
    }

    // Configure the default DuplicatesStrategy for such as:
    // - c.l.armeria.versions.properties
    // - thrift/cassandra.json
    // - and so on
    tasks.sourcesJar.duplicatesStrategy = DuplicatesStrategy.INCLUDE
    tasks.withType(Copy) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

allprojects {

    // Configure the Javadoc tasks of all projects.
    tasks.withType(Javadoc) {
        options {
            // Groups
            group 'Server', 'com.linecorp.armeria.server*'
            group 'Client', 'com.linecorp.armeria.client*'
            group 'Common', 'com.linecorp.armeria.common*'

            // Exclude the machine-generated or internal-only classes
            exclude '**/Tomcat*ProtocolHandler.java'
            exclude '**/internal/**'
            exclude '**/thrift/v1/**'
            exclude '**/reactor/core/scheduler/**'
        }
    }
}

// Require to use JDK 19 when releasing.
tasks.closeAndReleaseStagingRepository.doFirst {
    if (JavaVersion.current() != JavaVersion.VERSION_19) {
        throw new IllegalStateException("You must release using JDK 19.");
    }
}

task reportFailedTests(type: TestsReportTask)

/**
 * Summarizes the failed tests and reports as a file with the Markdown syntax.
 */
class TestsReportTask extends DefaultTask {
    @OutputFile
    final def reportFile = project.file("${project.buildDir}/failed-tests-result.txt")

    @TaskAction
    def run() {
        // Collect up to 20 error results
        int maxErrorSize = 20
        List<Map> failedTests = []
        Set<String> handledFiles = []

        project.allprojects {
            tasks.withType(Test) { testTask ->

                def xmlFiles = testTask.reports.junitXml.outputLocation.asFileTree.files
                if (xmlFiles.isEmpty()) {
                    return
                }
                xmlFiles.each { file ->
                    if (!handledFiles.add(file.name)) {
                        return
                    }

                    Elements failures = Jsoup.parse(file, 'UTF-8').select("testsuite failure")
                    if (failures.isEmpty() || failedTests.size() > maxErrorSize) {
                        return
                    }
                    failures.each { failure ->
                        Element parent = failure.parent()
                        String fullMethodName = "${parent.attr("classname")}.${parent.attr("name")}"
                        String detail = failure.wholeText()
                        failedTests += [method: fullMethodName, detail: detail]
                    }
                }
            }
        }

        if (failedTests.isEmpty()) {
            return
        }

        reportFile.withPrintWriter('UTF-8') { writer ->
            failedTests.each { it ->
                String method = it.method
                String detail = it.detail

                // Create an link to directly create an issue from the error message
                String ghIssueTitle = URLEncoder.encode("Test failure: `$method`", "UTF-8")
                // 8k is the maximum allowed URL length for GitHub
                String ghIssueBody = URLEncoder.encode(
                        "```\n${detail.substring(0, min(6000, detail.length()))}\n```\n", "UTF-8")
                String ghIssueLink =
                        "https://github.com/line/armeria/issues/new?title=$ghIssueTitle&body=$ghIssueBody"
                String ghSearchQuery = URLEncoder.encode("is:issue $method", "UTF-8")
                String ghSearchLink = "https://github.com/line/armeria/issues?q=$ghSearchQuery"
                writer.print("- $it.method - [Search similar issues]($ghSearchLink) | ")
                writer.println("[Create an issue?]($ghIssueLink)")

                writer.println("  ```")
                List<String> lines = detail.split("\n") as List
                def summary = lines.take(8)
                summary.each { line -> writer.println("  $line") }
                writer.println("  ```")
                if (lines.size() > 8) {
                    writer.println("  <details><summary>Full error messages</summary>")
                    writer.println("  <pre>")
                    lines.each { line -> writer.println("  $line") }
                    writer.println("  </pre></details>\n")
                }
            }
        }
    }
}
