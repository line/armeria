/*
 * Copyright 2018 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package com.linecorp.armeria.client;

import java.net.InetSocketAddress;

import com.linecorp.armeria.common.SessionProtocol;
import com.linecorp.armeria.common.annotation.UnstableApi;
import com.linecorp.armeria.common.metric.MeterIdPrefix;
import com.linecorp.armeria.common.util.Ticker;
import com.linecorp.armeria.common.util.Unwrappable;

import io.micrometer.core.instrument.MeterRegistry;
import io.netty.util.AttributeMap;

/**
 * Listens to the client connection pool events.
 */
public interface ConnectionPoolListener extends Unwrappable {

    /**
     * Returns an instance that does nothing.
     */
    static ConnectionPoolListener noop() {
        return ConnectionPoolListenerAdapter.NOOP;
    }

    /**
     * Returns a {@link ConnectionPoolListener} that logs the connection pool events.
     */
    static ConnectionPoolListener logging() {
        return new ConnectionPoolLoggingListener();
    }

    /**
     * Returns a {@link ConnectionPoolListener} that logs the connection pool events with an alternative
     * {@link Ticker}.
     */
    static ConnectionPoolListener logging(Ticker ticker) {
        return new ConnectionPoolLoggingListener(ticker);
    }

    /**
     * Returns a new {@link ConnectionPoolListener} that collects metrics into the specified
     * {@link MeterRegistry}. The returned listener will generate the following metrics:
     * <table>
     * <caption>metrics that will be generated by this class</caption>
     * <tr>
     *   <th>metric name</th>
     *   <th>description</th>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connections#count{state="opened"}}</td>
     *   <td>The number of opened connection.</td>
     * </tr>
     * <tr>
     *   <td>{@code armeria.client.connections#count{state="closed"}}</td>
     *   <td>The number of closed connections.</td>
     * </tr>
     * </table>
     */
    @UnstableApi
    static ConnectionPoolListener metricCollecting(MeterRegistry registry) {
        return metricCollecting(registry, new MeterIdPrefix("armeria.client.connections"));
    }

    /**
     * Returns a new {@link ConnectionPoolListener} that collects metrics into the specified
     * {@link MeterRegistry} using the {@link MeterIdPrefix}.
     * The returned listener will generate the following metrics:
     * <table>
     * <caption>metrics that will be generated by this class</caption>
     * <tr>
     *   <th>metric name</th>
     *   <th>description</th>
     * </tr>
     * <tr>
     *   <td>{@code <name>#count{state="opened"}}</td>
     *   <td>The number of opened connection.</td>
     * </tr>
     * <tr>
     *   <td>{@code <name>#count{state="closed"}}</td>
     *   <td>The number of closed connections.</td>
     * </tr>
     * </table>
     */
    @UnstableApi
    static ConnectionPoolListener metricCollecting(MeterRegistry registry, MeterIdPrefix meterIdPrefix) {
        return new MetricCollectingConnectionPoolListener(registry, meterIdPrefix);
    }

    /**
     * Invoked when a new connection is open and ready to send a request.
     */
    void connectionOpen(SessionProtocol protocol,
                        InetSocketAddress remoteAddr,
                        InetSocketAddress localAddr,
                        AttributeMap attrs) throws Exception;

    /**
     * Invoked when a connection in the connection pool has been closed.
     */
    void connectionClosed(SessionProtocol protocol,
                          InetSocketAddress remoteAddr,
                          InetSocketAddress localAddr,
                          AttributeMap attrs) throws Exception;

    @Override
    default ConnectionPoolListener unwrap() {
        return this;
    }
}
