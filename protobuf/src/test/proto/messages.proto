// Copyright 2020 LINE Corporation
//
// LINE Corporation licenses this file to you under the Apache License,
// version 2.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at:
//
//   https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package armeria.protobuf.testing;

option java_package = "testing.protobuf";

message SimpleRequest {
  string payload = 1;
  int32 size = 2;
}

message SimpleResponse {
  string message = 1;
  int32 status = 2;
}

message SimpleRepeatedResponse {
  repeated string messages = 1;
}

// The type of payload that should be returned.
enum PayloadType {
  // Compressable text format.
  COMPRESSABLE = 0;

  // Uncompressable binary format.
  UNCOMPRESSABLE = 1;

  // Randomly chosen from all other formats defined in this enum.
  RANDOM = 2;
}

// Compression algorithms
enum CompressionType {
  // No compression
  NONE = 0;
  GZIP = 1;
  DEFLATE = 3;
}

// A block of data, to simply increase gRPC message size.
message Payload {
  // The type of data in body.
  PayloadType type = 1;
  // Primary contents of payload.
  bytes body = 2;
}

// A protobuf representation for grpc status. This is used by test
// clients to specify a status that the server should attempt to return.
message EchoStatus {
  int32 code = 1;
  string message = 2;
}

message SimpleContext {
  string value = 1;
}

// Client-streaming request.
message StreamingInputCallRequest {
  // Optional input payload sent along with the request.
  Payload payload = 1;

  // Not expecting any payload from the response.
}

// Client-streaming response.
message StreamingInputCallResponse {
  // Aggregated size of payloads received from the client.
  int32 aggregated_payload_size = 1;
}

// Configuration for a particular response.
message ResponseParameters {
  // Desired payload sizes in responses from the server.
  // If response_type is COMPRESSABLE, this denotes the size before compression.
  int32 size = 1;

  // Desired interval between consecutive responses in the response stream in
  // microseconds.
  int32 interval_us = 2;
}

// Server-streaming request.
message StreamingOutputCallRequest {
  // Desired payload type in the response from the server.
  // If response_type is RANDOM, the payload from each response in the stream
  // might be of different types. This is to simulate a mixed type of payload
  // stream.
  PayloadType response_type = 1;

  // Configuration for each expected response message.
  repeated ResponseParameters response_parameters = 2;

  // Optional input payload sent along with the request.
  Payload payload = 3;

  // Compression algorithm to be used by the server for the response (stream)
  CompressionType response_compression = 6;

  // Whether server should return a given status
  EchoStatus response_status = 7;

  // Arbitrary options for this request.
  map<string, int32> options = 8;
}

// Server-streaming response, as configured by the request and parameters.
message StreamingOutputCallResponse {
  // Payload to increase response size.
  Payload payload = 1;
}

// For reconnect interop test only.
// Client tells server what reconnection parameters it used.
message ReconnectParams {
  int32 max_reconnect_backoff_ms = 1;
}

// For reconnect interop test only.
// Server tells client whether its reconnects are following the spec and the
// reconnect backoffs it saw.
message ReconnectInfo {
  bool passed = 1;
  repeated int32 backoff_ms = 2;
}

enum TestEnum {
  ZERO = 0;
  ONE = 1;
  TWO = 2;
}

message TestMessage {
  message Nested {
    string string = 1;
  }
  message EmptyNested {
  }

  bool bool = 1;
  int32 int32 = 2;
  int64 int64 = 3;
  uint32 uint32 = 4;
  uint64 uint64 = 5;
  sint32 sint32 = 6;
  sint64 sint64 = 7;
  fixed32 fixed32 = 8;
  fixed64 fixed64 = 9;
  float float = 10;
  double double = 11;
  string string = 12;
  bytes bytes = 13;
  TestEnum test_enum = 14;
  Nested nested = 15;
  repeated string strings = 16;
  map<string, int32> map = 17;
  TestMessage self = 18;
  EmptyNested empty_nested = 19;
}
