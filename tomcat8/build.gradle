final def TOMCAT_VERSION = '8.5.78'

dependencies {
    // Tomcat
    api("org.apache.tomcat.embed:tomcat-embed-core") {
        version {
            // Will fail the build if the override doesn't work
            strictly TOMCAT_VERSION
        }
    }

    testImplementation("org.apache.tomcat.embed:tomcat-embed-jasper") {
        version {
            // Will fail the build if the override doesn't work
            strictly TOMCAT_VERSION
        }
    }

    testImplementation("org.eclipse.jdt:ecj") {
        version {
            // As a workaround for JSP compiler error on Java 17, forcibly specify the newer version
            strictly "3.24.0"
        }
    }

    // Replace commons-logging (Tomcat's logging API) with SLF4J.
    runtimeOnly 'org.slf4j:jcl-over-slf4j'
}

// Use the sources from ':tomcat9' as well as ours.
// NB: We should never add these directories using the 'sourceSets' directive because that will make
//     them added to more than one project and having a source directory with more than one output directory
//     will confuse IDEs such as IntelliJ IDEA.
def tomcat9ProjectDir = "${rootProject.projectDir}/tomcat9"
// Copy common files from tomcat9 module to gen-src directory in order to use them as a source set.
task generateSources(type: Copy) {
    from "${tomcat9ProjectDir}/src/main/java"
    into "${project.ext.genSrcDir}/main/java"
    exclude '**/ArmeriaProcessor*'
    exclude '**/ConfigFileLoaderInitializer*'
    exclude '**/package-info.java'
}

tasks.compileJava.dependsOn(generateSources)
tasks.compileTestJava.source "${tomcat9ProjectDir}/src/test/java"
tasks.processResources.from "${tomcat9ProjectDir}/src/main/resources"
tasks.processTestResources.from "${tomcat9ProjectDir}/src/test/resources"
tasks.sourcesJar.from "${tomcat9ProjectDir}/src/main/resources"
