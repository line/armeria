{"version":3,"file":"component---src-pages-tutorials-grpc-blog-implement-read-mdx-356378dec120fdf3aabc.js","mappings":"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","sources":["webpack://armeria-site/./src/pages/tutorials/grpc/blog/implement-read.mdx","webpack://armeria-site/./src/layouts/tutorials.tsx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/armeria/armeria/site/src/layouts/tutorials.tsx\";\nexport const pageTitle = \"Implementing READ operation\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TutorialSteps = makeShortcode(\"TutorialSteps\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst TabPane = makeShortcode(\"TabPane\");\nconst layoutProps = {\n  pageTitle,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"implementing-read-operation\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#implementing-read-operation\",\n        \"aria-label\": \"implementing read operation permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Implementing READ operation`}</h1>\n    <h6 {...{\n      \"className\": \"inlinePageToc\",\n      \"role\": \"navigation\"\n    }}>{`Table of contents`}</h6>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#what-you-need\"\n        }}>{`What you need`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#1-implement-server-side\"\n        }}>{`1. Implement server-side`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#2-test-retrieving-a-single-post\"\n        }}>{`2. Test retrieving a single post`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#4-test-an-error-case\"\n        }}>{`4. Test an error case`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#5-test-retrieving-multiple-posts\"\n        }}>{`5. Test retrieving multiple posts`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#whats-next\"\n        }}>{`What's next`}</a></li>\n    </ul>\n    <p>{`In the earlier step, we created blog posts.\nIn this step, we'll implement a read operation and make a call to read blog posts.\nWe'll write two service methods, one for reading a single post and another for multiple posts.`}</p>\n    <TutorialSteps current={4} mdxType=\"TutorialSteps\" />\n    <h2 {...{\n      \"id\": \"what-you-need\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#what-you-need\",\n        \"aria-label\": \"what you need permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`What you need`}</h2>\n    <p>{`You need to have the following files obtained from previous steps.\nYou can always `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/line/armeria-examples/tree/main/tutorials/grpc\"\n      }}>{`download`}</a>{` the full version, instead of creating one yourself.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/tutorials/grpc/blog/define-service#6-compile-the-proto-file\"\n        }}>{`Generated Java code`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`BlogService.java`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Main.java`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`BlogServiceTest.java`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"1-implement-server-side\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#1-implement-server-side\",\n        \"aria-label\": \"1 implement server side permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`1. Implement server-side`}</h2>\n    <p>{`Let's write two methods for retrieving blog posts; one for a single post and\nanother for multiple posts.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <TabPane tab=\"Single post\" key=\"1\" mdxType=\"TabPane\">\n        <p>{`Add a service method in `}<inlineCode parentName=\"p\">{`BlogService.java`}</inlineCode>{` to retrieve a single post.`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-java\",\n            \"metastring\": \"filename=BlogService.java\",\n            \"filename\": \"BlogService.java\"\n          }}>{`import example.armeria.blog.grpc.GetBlogPostRequest;\n\npublic final class BlogService extends BlogServiceGrpc.BlogServiceImplBase {\n\n  @Override\n  public void getBlogPost(GetBlogPostRequest request, StreamObserver<BlogPost> responseObserver) {\n    final BlogPost blogPost = blogPosts.get(request.getId());\n    if (blogPost == null) {\n      responseObserver.onError(\n        Status.NOT_FOUND.withDescription(\"The blog post does not exist. ID: \" + request.getId())\n                        .asRuntimeException());\n    } else {\n        responseObserver.onNext(blogPost);\n        responseObserver.onCompleted();\n    }\n  }\n}\n`}</code></pre>\n      </TabPane>\n      <TabPane tab=\"Multiple posts\" key=\"2\" mdxType=\"TabPane\">\n        <p>{`Add a service method in `}<inlineCode parentName=\"p\">{`BlogService.java`}</inlineCode>{` to retrieve multiple posts.`}</p>\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-java\",\n            \"metastring\": \"filename=BlogService.java\",\n            \"filename\": \"BlogService.java\"\n          }}>{`import java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Map.Entry;\n\nimport example.armeria.blog.grpc.ListBlogPostsRequest;\nimport example.armeria.blog.grpc.ListBlogPostsResponse;\n\nfinal class BlogService extends BlogServiceGrpc.BlogServiceImplBase {\n  @Override\n  public void listBlogPosts(ListBlogPostsRequest request,\n                            StreamObserver<ListBlogPostsResponse> responseObserver) {\n      final Collection<BlogPost> blogPosts;\n      if (request.getDescending()) {\n          blogPosts = this.blogPosts.entrySet()\n                      .stream()\n                      .sorted(Collections.reverseOrder(Comparator.comparingInt(Entry::getKey)))\n                      .map(Entry::getValue).collect(Collectors.toList());\n      } else {\n          blogPosts = this.blogPosts.values();\n      }\n      responseObserver.onNext(ListBlogPostsResponse.newBuilder().addAllBlogs(blogPosts).build());\n      responseObserver.onCompleted();\n  }\n}\n`}</code></pre>\n      </TabPane>\n    </Tabs>\n    <h2 {...{\n      \"id\": \"2-test-retrieving-a-single-post\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#2-test-retrieving-a-single-post\",\n        \"aria-label\": \"2 test retrieving a single post permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`2. Test retrieving a single post`}</h2>\n    <p>{`Let's test if we can retrieve a blog post we created.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the `}<inlineCode parentName=\"p\">{`BlogServiceTest`}</inlineCode>{` class, add a test method to retrieve the first blog post with ID `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-java\",\n            \"metastring\": \"filename=BlogServiceTest.java\",\n            \"filename\": \"BlogServiceTest.java\"\n          }}>{`@Test\nvoid getBlogPost() throws JsonProcessingException {\n  final BlogPost blogPost = client.getBlogPost(GetBlogPostRequest.newBuilder().setId(0).build());\n\n  assertThat(blogPost.getTitle()).isEqualTo(\"My first blog\");\n  assertThat(blogPost.getContent()).isEqualTo(\"Hello Armeria!\");\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add annotations to configure the order our test methods will be executed.\nThe annotations guarantee that the first blog post will be created in the `}<inlineCode parentName=\"p\">{`createBlogPost()`}</inlineCode>{` method before we try to retrieve it in the `}<inlineCode parentName=\"p\">{`getBlogPost()`}</inlineCode>{` method.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-java\",\n            \"metastring\": \"filename=BlogServiceTest.java\",\n            \"filename\": \"BlogServiceTest.java\"\n          }}>{`import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(OrderAnnotation.class) // Add this\nclass BlogServiceTest {\n  ...\n\n  @Test\n  @Order(1) // Add this\n  void createBlogPost() throws JsonProcessingException {\n    ...\n  }\n\n  @Test\n  @Order(2) // Add this\n  void getBlogPost() throws JsonProcessingException {\n    ...\n  }\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Run all the test cases on your IDE or using Gradle.`}</p>\n        <p parentName=\"li\">{`Your client retrieved a blog post from the server successfully if the test is passed.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"4-test-an-error-case\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#4-test-an-error-case\",\n        \"aria-label\": \"4 test an error case permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`4. Test an error case`}</h2>\n    <p>{`Let's try retrieving a blog post that does not exist.\nAdd a test method to retrieve a blog post with an invalid ID, asserting an exception is thrown.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\",\n        \"metastring\": \"filename=BlogServiceTest.java\",\n        \"filename\": \"BlogServiceTest.java\"\n      }}>{`@Test\n@Order(3)\nvoid getInvalidBlogPost() throws JsonProcessingException {\n  final Throwable exception = catchThrowable(() -> {\n      client.getBlogPost(GetBlogPostRequest.newBuilder().setId(Integer.MAX_VALUE).build());\n  });\n  final StatusRuntimeException statusException = (StatusRuntimeException) exception;\n    assertThat(statusException.getStatus().getCode()).isEqualTo(Code.NOT_FOUND);\n    assertThat(statusException)\n          .hasMessageContaining(\"The blog post does not exist. ID: \" + Integer.MAX_VALUE);\n}\n`}</code></pre>\n    <p>{`Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed.`}</p>\n    <h2 {...{\n      \"id\": \"5-test-retrieving-multiple-posts\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#5-test-retrieving-multiple-posts\",\n        \"aria-label\": \"5 test retrieving multiple posts permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`5. Test retrieving multiple posts`}</h2>\n    <p>{`Finally, let's test if we can retrieve multiple posts.\nAdd a test method like the following to create the second blog post and test retrieving the list of blog posts.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\",\n        \"metastring\": \"filename=BlogServiceTest.java\",\n        \"filename\": \"BlogServiceTest.java\"\n      }}>{`@Test\n@Order(4)\nvoid listBlogPosts() throws JsonProcessingException {\n  final CreateBlogPostRequest newBlogPost = CreateBlogPostRequest.newBuilder()\n                .setTitle(\"My second blog\")\n                .setContent(\"Armeria is awesome!\")\n                .build();\n  client.createBlogPost(newBlogPost);\n  final ListBlogPostsResponse\n          response = client.listBlogPosts(ListBlogPostsRequest.newBuilder()\n                .setDescending(false)\n                .build());\n\n  final List<BlogPost> blogs = response.getBlogsList();\n  assertThat(blogs).hasSize(2);\n  final BlogPost firstBlog = blogs.get(0);\n  assertThat(firstBlog.getTitle()).isEqualTo(\"My first blog\");\n  assertThat(firstBlog.getContent()).isEqualTo(\"Hello Armeria!\");\n\n  final BlogPost secondBlog = blogs.get(1);\n  assertThat(secondBlog.getTitle()).isEqualTo(\"My second blog\");\n  assertThat(secondBlog.getContent()).isEqualTo(\"Armeria is awesome!\");\n}\n`}</code></pre>\n    <p>{`Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed.`}</p>\n    <h2 {...{\n      \"id\": \"whats-next\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#whats-next\",\n        \"aria-label\": \"whats next permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`What's next`}</h2>\n    <p>{`In this step, we've implemented service methods to retrieve blog posts.`}</p>\n    <p>{`Next, at `}<a parentName=\"p\" {...{\n        \"href\": \"/tutorials/grpc/blog/implement-update\"\n      }}>{`Step 5. Implement UPDATE`}</a>{`, we'll implement an UPDATE operation to update a blog post.`}</p>\n    <TutorialSteps current={4} mdxType=\"TutorialSteps\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { RouteComponentProps } from '@reach/router';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport docsIndex from '../pages/tutorials/toc.json';\nimport MdxLayout from './mdx';\n\ninterface TutorialLayoutProps extends RouteComponentProps {\n  pageContext: any;\n  pageTitle: string;\n}\n\nconst TutorialLayout: React.FC<TutorialLayoutProps> = (props) => {\n  const {\n    allMdx: { nodes: candidateMdxNodes },\n  } = useStaticQuery(graphql`\n    query {\n      allMdx(\n        filter: { fileAbsolutePath: { glob: \"**/src/pages/tutorials/**\" } }\n      ) {\n        nodes {\n          tableOfContents(maxDepth: 1)\n          excerpt(pruneLength: 256, truncate: true)\n          parent {\n            ... on File {\n              sourceInstanceName\n              name\n              relativeDirectory\n            }\n          }\n          frontmatter {\n            menuTitle\n            order\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <MdxLayout\n      {...props}\n      candidateMdxNodes={candidateMdxNodes}\n      index={docsIndex}\n      prefix=\"tutorials\"\n      menuTitle\n      pageTitleSuffix=\"Armeria tutorial\"\n    />\n  );\n};\n\nexport default TutorialLayout;\n"],"names":["pageTitle","_frontmatter","makeShortcode","name","props","console","warn","mdx","TutorialSteps","Tabs","TabPane","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","parentName","current","tab","key","isMDXComponent","candidateMdxNodes","useStaticQuery","allMdx","nodes","React","MdxLayout","index","docsIndex","prefix","menuTitle","pageTitleSuffix"],"sourceRoot":""}