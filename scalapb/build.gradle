buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.adtran:scala-multiversion-plugin:1.0.36"
    }
}

plugins {
    id 'scala'
    id "com.adtran.scala-multiversion-plugin" version "1.0.36"
    id 'cz.alenkacz.gradle.scalafmt' version '1.14.0'
}

dependencies {
    implementation project(':grpc')
    implementation 'org.scala-lang:scala-library:%scala-version%'
    implementation "com.thesamet.scalapb:scalapb-runtime_%%:${managedVersions['com.thesamet.scalapb:scalapb-runtime_2.13']}"
    implementation "com.thesamet.scalapb:scalapb-runtime-grpc_%%:${managedVersions['com.thesamet.scalapb:scalapb-runtime-grpc_2.13']}"
    implementation "com.thesamet.scalapb:scalapb-json4s_%%:${managedVersions['com.thesamet.scalapb:scalapb-json4s_2.13']}"
}

compileScala.targetCompatibility = 1.8
ScalaCompileOptions.metaClass.useAnt = false

// Run `scalafmt` to automatically format scala code from all source sets
// https://github.com/alenkacz/gradle-scalafmt#tasks
project.ext.getLintTask().dependsOn tasks.checkScalafmt

task aggregatedScaladocs(
        type: ScalaDoc,
        description: 'Generate scaladocs from all child projects',
        group: 'Documentation') {
    destinationDir = file("$buildDir/docs/scaladoc")
    title = "$project.name $version API"

    subprojects.each { proj ->
        proj.tasks.withType(ScalaDoc).each {
            source += proj.sourceSets.main.allJava
            source += proj.sourceSets.main.allScala
            classpath += proj.sourceSets.main.compileClasspath
            excludes += scaladoc.excludes
            includes += scaladoc.includes
        }
    }
}
sourceSets {
    test {
        scala {
            srcDirs "${protobuf.generatedFilesBaseDir}/test/scalapb"
        }
    }
}


