buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.github.node-gradle:gradle-node-plugin:${managedVersions['com.github.node-gradle:gradle-node-plugin']}"
    }
}

// Do not build if 'noWeb' property exists.
if (rootProject.hasProperty('noWeb')) {
    return
}

apply plugin: 'base'
apply plugin: 'com.github.node-gradle.node'

tasks.yarn {
    args += ['--frozen-lockfile']

    // gradle-node-plugin sets node_modules as an output directory for up-to-date checking.
    // This makes sense in principal but Gradle often handles up-to-date checking much more
    // slowly than yarn itself for a large node_modules, so we go ahead and remove it all
    // from up-to-date checking.
    nodeModulesOutputFilter = {
        it.exclude("**/*")
    }
}

task yarnUpdate(type: YarnTask) {
    args = ['install']
}

task buildWeb(type: YarnTask) {
    dependsOn 'yarn'

    args = ['run', 'build']

    inputs.dir('src')
    inputs.file('package.json')
    inputs.file('yarn.lock')
    outputs.dir('build/web')
}

task checkWeb(type: YarnTask) {
    dependsOn 'yarn'

    args = ['run', 'check']

    inputs.dir('src')
    inputs.file('package.json')
    inputs.file('yarn.lock')
    outputs.upToDateWhen { true }
}

task copyWeb(type: Copy) {
    dependsOn buildWeb

    from 'build/web'
    into 'build/javaweb/com/linecorp/armeria/server/docs'
}

tasks.assemble.dependsOn copyWeb
tasks.check.dependsOn checkWeb

node {
    version = '12.16.3'
    yarnVersion = '1.22.4'
    download = true
}
