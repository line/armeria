import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.util.concurrent.TimeUnit

String releaseFlagFromVersion(String src) {
    // Java 9+ are 9, 10, etc, before was 1.8, 1.7, etc.
    if (src.contains('.')) {
        src.substring(src.lastIndexOf('.')+1)
    } else {
        src
    }
}

def mrJarVersions = [9]

mrJarVersions.each { version->
    sourceSets {
        "java${version}" {
            java {
                srcDirs = ["src/main/java${version}"]
            }
        }
        "java${version}Test" {
            java {
                srcDirs = ["src/test/java${version}"]
            }
        }
    }

    "compileJava${version}Java" {
        sourceCompatibility = version
        targetCompatibility = version
    }

    "compileJava${version}TestJava" {
        sourceCompatibility = version
        targetCompatibility = version
    }

    task "testJava${version}"(type: Test, group: 'Verification', description: "Runs unit tests for Java ${version} source set") {
        testClassesDirs = sourceSets."java${version}Test".output.classesDirs
        classpath = sourceSets."java${version}Test".runtimeClasspath

        enabled = (Integer.parseInt(JavaVersion.current().getMajorVersion()) >= version) &&
                (!System.env.TEST_JAVA_VERSION || Integer.parseInt(System.env.TEST_JAVA_VERSION) >= version)
    }

    configurations."java${version}Implementation".extendsFrom configurations.implementation
    configurations."java${version}TestImplementation".extendsFrom configurations.testImplementation
    configurations."java${version}TestRuntimeClasspath".extendsFrom configurations.testRuntimeClasspath

    check.dependsOn "testJava${version}"
}

tasks.withType(JavaCompile) {
    def version = releaseFlagFromVersion(sourceCompatibility)
    options.compilerArgs.addAll(['--release', version])
}

tasks.withType(Jar) {
    mrJarVersions.each { version->
        into("META-INF/versions/${version}") {
            from sourceSets."java${version}".output
        }
    }
    manifest.attributes(
            'Multi-Release': 'true'
    )
}

// Proguard can't handle multi-release jars so we recreate it here.
tasks.trimShadedJar.doLast {
    // outjars is a file, so only one jar generated for sure
    def trimmed = tasks.trimShadedJar.outJarFiles[0].toPath()
    ant.jar(destfile: trimmed.toString(), update: true) {
        zipfileset(src: tasks.shadedJar.archivePath) {
            include(name: 'META-INF/versions/**')
        }
    }
}

tasks.shadedTest.exclude 'META-INF/versions/**'

dependencies {
    mrJarVersions.each { version->
        // Common to reference classes in main sourceset from Java 9 one (e.g., to return a common interface)
        "java${version}Implementation" files(sourceSets.main.output.classesDirs) { builtBy compileJava }

        "java${version}TestImplementation" files(sourceSets.test.output.classesDirs) { builtBy compileTestJava }
    }

    // Logging decorators expose slf4j in API
    api 'org.slf4j:slf4j-api'

    // cglib
    testImplementation 'cglib:cglib'

    // Caffeine
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Jackson
    [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {
        api "com.fasterxml.jackson.core:$it"
    }

    // Micrometer and other metric-related stuff
    api 'io.micrometer:micrometer-core'
    optionalApi 'io.micrometer:micrometer-registry-prometheus'
    optionalApi 'io.dropwizard.metrics:metrics-core'
    optionalApi 'io.prometheus:simpleclient_common'

    // Netty
    [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns' ].each {
        api "io.netty:$it"
    }
    implementation "io.netty:netty-transport-native-unix-common:${managedVersions['io.netty:netty-transport-native-unix-common']}:linux-x86_64"
    implementation "io.netty:netty-transport-native-epoll:${managedVersions['io.netty:netty-transport-native-epoll']}:linux-x86_64"
    implementation 'io.netty:netty-tcnative-boringssl-static'
    implementation 'io.netty:netty-handler-proxy'
    optionalImplementation "io.netty.incubator:netty-incubator-transport-native-io_uring:${managedVersions['io.netty.incubator:netty-incubator-transport-native-io_uring']}:linux-x86_64"

    // TestNG
    testImplementation 'org.testng:testng'

    // Reactive Streams
    api 'org.reactivestreams:reactive-streams'
    testImplementation 'org.reactivestreams:reactive-streams-tck'

    // Do not upgrade to Scala 2.13.x that causes 'java.lang.ClassNotFoundException: scala.Serializable'
    // See https://github.com/scala/bug/issues/11832#issuecomment-568185023
    // If needed, you should consider to add 'armeria-scala' module.
    optionalImplementation 'org.scala-lang:scala-library:2.12.12'

    // Bouncy Castle
    implementation 'org.bouncycastle:bcprov-jdk15on'

    // Jetty, for testing interoperability with other servers.
    testImplementation 'org.eclipse.jetty:jetty-webapp'
}

if (!rootProject.hasProperty('noWeb')) {
    sourceSets {
        main {
            output.dir project(':docs-client').file('build/javaweb'), builtBy: ':docs-client:copyWeb'
        }
    }
}

// Run HttpServerStreamingTest separately with memory constraint.
tasks.test.exclude '**/HttpServerStreamingTest**'
tasks.shadedTest.exclude '**/HttpServerStreamingTest**'
task testStreaming(type: Test,
                   group: 'Verification',
                   description: 'Runs the streaming tests.',
                   dependsOn: tasks.shadedTestClasses) {
    // Use small heap for streaming tests to quickly ensure we can stream the content larger than heap.
    maxHeapSize = '64m'

    include '**/HttpServerStreamingTest**'
    testClassesDirs = tasks.shadedTest.testClassesDirs
    classpath = testClassesDirs

    // Set the class path as late as possible so that the 'shadedTest' task has the correct classpath.
    doFirst {
        classpath += project.files(configurations.shadedTestRuntime.resolve())
    }
}
tasks.shadedTest.finalizedBy tasks.testStreaming
tasks.check.dependsOn tasks.testStreaming

// Run the test cases based on reactive-streams-tck
task testNg(type: Test,
            group: 'Verification',
            description: 'Runs the TestNG unit tests.',
            dependsOn: tasks.shadedTestClasses) {
    useTestNG()
    include '/com/linecorp/armeria/common/**'

    scanForTestClasses = false
    testClassesDirs = tasks.shadedTest.testClassesDirs
    classpath = testClassesDirs

    // Set the class path as late as possible so that the 'shadedTest' task has the correct classpath.
    doFirst {
        classpath += project.files(configurations.shadedTestRuntime.resolve())
    }
}
tasks.shadedTest.finalizedBy tasks.testNg
tasks.check.dependsOn tasks.testNg

if (tasks.findByName('trimShadedJar')) {
    tasks.trimShadedJar.configure {
        // Keep all classes under com.linecorp.armeria, except the internal ones.
        keep "class !com.linecorp.armeria.internal.shaded.**,com.linecorp.armeria.** { *; }"
        // Keep the 'NonBlocking' tag interface.
        keep "class reactor.core.scheduler.NonBlocking { *; }"
        // Do not optimize the dependencies that access some fields via sun.misc.Unsafe or reflection only.
        keep "class com.linecorp.armeria.internal.shaded.caffeine.** { *; }"
        keep "class com.linecorp.armeria.internal.shaded.jctools.** { *; }"

        dontnote
    }
}

class PublicSuffixesTask extends DefaultTask {
    // Rebuild up to once in 7 days, unless cleaned.
    @Input
    final def days = (System.currentTimeMillis() / TimeUnit.DAYS.toMillis(7)).intValue()
    @OutputFile
    final def publicSuffixesFile = project.file("${project.projectDir}/src/main/resources/com/linecorp/armeria/public_suffixes.txt")

    @TaskAction
    def run() {
        try {
            def tempFile = File.createTempFile("public_suffixes", null)
            def req = (HttpURLConnection) new URL('https://publicsuffix.org/list/public_suffix_list.dat').openConnection()
            def res = req.getInputStream()
            if (req.getResponseCode() != 200) {
                println "received a non-200 response from publicsuffix.org: ${req.getResponseCode()}"
                return
            }
            def sortedSet = new TreeSet<String>()
            res.eachLine('UTF-8') {
                if (!it.isEmpty() && !it.startsWith("//")) {
                    sortedSet.add(IDN.toASCII(it))
                }
            }
            sortedSet.each {
                tempFile.append(it)
                tempFile.append("\n")
            }
            Files.move(tempFile.toPath(), publicSuffixesFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
            println "public suffixes file is updated"
        } catch (Exception e) {
            println "an exception was thrown: ${e}"
        }
    }
}

task publicSuffixes(type: PublicSuffixesTask)
tasks.processResources.dependsOn publicSuffixes
tasks.classes.dependsOn publicSuffixes
