import com.google.common.base.CaseFormat

ext {
    requiredProjects = rootProject.ext.javaProjects - project
}

// Evaluate other projects first so that their dependencies are fully populated.
project.ext.requiredProjects.each {
    evaluationDependsOn it.path
}

// Clear the common dependencies set by the root project because we don't use them at all.
configurations.each {
    if (it.name != 'javaAgent') {
        it.dependencies.clear()
    }
}

// Clear the common source sets set by the root project to make sure we do not compile anything additionally.
sourceSets.findAll().each { set ->
    set.java.srcDirs = []
    set.resources.srcDirs = []
}

// Pull all shaded JARs and their dependencies in.
project.ext.requiredProjects.each { addDependencies it }

task allShadedJars {
    project.ext.requiredProjects.each { testProject ->
        dependsOn testProject.tasks.assemble
    }
}

task shadedTest(group: 'Verification',
                description: 'Runs the unit tests with the shaded JARs.')
tasks.test.dependsOn tasks.shadedTest

requiredProjects.each { testProject ->
    def shadedTestJarExtractTask = tasks.create(shadedName(testProject, 'TestJarExtract'), Copy) {
        def shadedTestJarTask = testProject.tasks.shadedTestJar
        dependsOn shadedTestJarTask

        from zipTree(shadedTestJarTask.archivePath)
        from(testProject.sourceSets.test.output.classesDirs) {
            // Add the JAR resources excluded in the 'shadedTestJar' task.
            include '**/*.jar'
        }

        into file("${project.buildDir}/classes/test-${testProject.name}")
    }

    def shadedTestTask = tasks.create(shadedName(testProject, 'Test'), Test) {
        Configuration cfg = configurations.getByName(shadedName(testProject))
        dependsOn cfg
        dependsOn tasks.allShadedJars
        dependsOn tasks.copyJavaAgents
        dependsOn shadedTestJarExtractTask

        // The tests against the shaded artifacts should run after testing against the unshaded ones.
        project.ext.requiredProjects.each {
            shouldRunAfter it.tasks.test
        }

        testClassesDirs = files(shadedTestJarExtractTask.destinationDir)
        classpath = testClassesDirs + files(cfg.files)

        exclude('**/internal/shaded/**')

        jacoco {
            enabled = false
        }
    }

    tasks.shadedTest.dependsOn shadedTestTask
}

jacocoTestReport {
    reports {
        xml.enabled false
    }
}

/**
 * Finds the dependencies of {@code initialProject} recursively and adds the found dependencies to
 * the configuration named as {@code "shaded${initialProject.name}"}.
 */
private void addDependencies(Project initialProject,
                             Project recursedProject = initialProject,
                             Set<Project> visitedProjects = new HashSet<>()) {

    if (visitedProjects.contains(recursedProject)) {
        return
    } else {
        visitedProjects.add(recursedProject);
    }

    def configName = shadedName(initialProject)
    project.configurations.maybeCreate(configName)

    if (recursedProject.tasks.findByName('trimShadedJar')) {
        assert recursedProject.name == 'core'
        project.dependencies.add(configName, files(recursedProject.tasks.trimShadedJar.outJarFiles))
    } else {
        assert recursedProject.name != 'core'
        project.dependencies.add(configName, files(recursedProject.tasks.shadedJar.archivePath))
    }

    // Collect all dependencies of the project.
    def allDeps = testConfigurations(recursedProject).inject([]) { a, b -> a + b.dependencies }
    allDeps.each { dep ->
        // Do not pull the the shaded dependencies in.
        if ("${dep.group}:${dep.name}".toString() in relocations.collect { it[0] }) {
            return
        }
        if (dep instanceof ProjectDependency) {
            addDependencies(initialProject, dep.dependencyProject, visitedProjects) // Recurse.
        } else {
            project.dependencies.add(configName, dep)
        }
    }
}

private static Collection<Configuration> testConfigurations(Project project) {
    return project.configurations.findAll { cfg ->
        cfg.name in ['compile', 'runtime', 'testCompile', 'testRuntime']
    }
}

private static String shadedName(Project project, String suffix = '') {
    return "shaded${CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, project.name)}${suffix}"
}
