final def SPRING_BOOT_VERSION = '1.5.22.RELEASE'

evaluationDependsOn ':spring:boot-autoconfigure'

dependencyManagement {
    // Override Spring Boot versions.
    dependencies {
        dependencySet(group: 'org.springframework.boot', version: SPRING_BOOT_VERSION) {
            entry 'spring-boot-starter'
            entry 'spring-boot-configuration-processor'
            entry 'spring-boot-starter-test'
        }
    }
}

dependencies {
    compile(project(':thrift')) {
        ext.optional = true // To let a user choose between thrift and thrift0.9.
    }
    compile project(':logback')

    compile 'io.micrometer:micrometer-spring-legacy'
    compile('io.micrometer:micrometer-registry-prometheus') {
        ext.optional = true
    }
    compile('io.dropwizard.metrics:metrics-json') {
        ext.optional = true
    }
    compile 'javax.inject:javax.inject'
    compileOnly 'javax.validation:validation-api'
    compile 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'

    testCompile project(':grpc')
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

// Use the sources from ':spring:boot-autoconfigure'.
// NB: We should never add these directories using the 'sourceSets' directive because that will make
//     them added to more than one project and having a source directory with more than one output directory
//     will confuse IDEs such as IntelliJ IDEA.
def autoconfigureProjectDir = "${rootProject.projectDir}/spring/boot-autoconfigure"
tasks.compileJava.source "${autoconfigureProjectDir}/src/main/java"
tasks.processResources.from "${autoconfigureProjectDir}/src/main/resources"
tasks.compileTestJava.source "${autoconfigureProjectDir}/src/test/java",
        "${autoconfigureProjectDir}/gen-src/test/grpc",
        "${autoconfigureProjectDir}/gen-src/test/java"
tasks.processTestResources.from "${autoconfigureProjectDir}/src/test/resources"
tasks.sourceJar.from "${autoconfigureProjectDir}/src/main/java"
tasks.sourceJar.from "${autoconfigureProjectDir}/src/main/resources"
tasks.javadoc.source "${autoconfigureProjectDir}/src/main/java"

tasks.compileTestJava.dependsOn(project(':spring:boot-autoconfigure').tasks.compileTestThrift)
tasks.compileTestJava.dependsOn(project(':spring:boot-autoconfigure').tasks.generateTestProto)

// Disable checkstyle because it's checked by ':spring:boot-autoconfigure'.
tasks.withType(Checkstyle) {
    onlyIf { false }
}

// Make sure the correct Spring Boot versions are used.
afterEvaluate {
    [configurations.runtime, configurations.testRuntime].each { cfg ->
        cfg.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def group = artifact.moduleVersion.id.group
            def version = artifact.moduleVersion.id.version
            switch (group) {
                case 'org.springframework.boot':
                    assert version == SPRING_BOOT_VERSION
                    break
            }
        }
    }
}
