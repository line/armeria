import java.util.regex.Pattern

def buildJdkVersion = Integer.parseInt(JavaVersion.current().getMajorVersion())
if (rootProject.hasProperty('buildJdkVersion')) {
    def jdkVersion = Integer.parseInt(rootProject.findProperty('buildJdkVersion'))
    if (buildJdkVersion != jdkVersion) {
        buildJdkVersion = jdkVersion
        logger.quiet("Overriding JDK for build with ${buildJdkVersion}")
    }
}

logger.info("Using JDK ${buildJdkVersion} to build ${project.name}")
rootProject.ext.set("buildJdkVersion", buildJdkVersion)

def testJavaVersion = buildJdkVersion
if (rootProject.hasProperty('testJavaVersion')) {
    def testVersion = Integer.parseInt(rootProject.findProperty('testJavaVersion'))
    if (buildJdkVersion != testVersion) {
        testJavaVersion = testVersion
        logger.quiet("Overriding JRE for tests with ${testJavaVersion}")
    }
}

logger.info("Using JRE ${testJavaVersion} to test ${project.name}")
rootProject.ext.set("testJavaVersion", testJavaVersion)

// Enable checkstyle if the rule file exists.
def checkstyleConfigDir = "${rootProject.projectDir}/settings/checkstyle"
def checkstyleEnabled = !rootProject.hasProperty('noCheckstyle') &&
        !rootProject.hasProperty('noLint') &&
        new File(checkstyleConfigDir).isDirectory() &&
        new File("${checkstyleConfigDir}/checkstyle.xml").isFile()

configure(rootProject) {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

/**
 * Checks each flag of the specified project for flags of format "java(\\d+)".
 * If such a flag exists, the minimum Java version is extracted and returned.
 * Otherwise, {@code defaultVersion} is returned.
 */
static def extractTargetJavaVersion(Project project, int defaultVersion) {
    def pattern = Pattern.compile('^java(\\d+)$')
    def flags = project.ext.flags
    for (def flag: flags) {
        def matcher = pattern.matcher(flag)
        if (!matcher.matches()) {
            continue
        }
        return Integer.parseInt(matcher.group(1))
    }
    return defaultVersion
}

configure(projectsWithFlags('java')) {

    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    archivesBaseName = project.ext.artifactId

    // Delete the generated source directory on clean.
    ext {
        genSrcDir = "${projectDir}/gen-src"
    }
    clean {
        delete project.ext.genSrcDir
    }

    // the default targetJavaVersion is 'javaTargetCompatibility'
    String defaultTargetJavaVersionStr = project.findProperty('javaTargetCompatibility') ?: '1.8'
    def defaultTargetJavaVersion = Integer.parseInt(
            JavaVersion.toVersion(defaultTargetJavaVersionStr).majorVersion)

    // parse flags for the targetJavaVersion or return the default version
    def targetJavaVersion = extractTargetJavaVersion(project, defaultTargetJavaVersion)
    if (targetJavaVersion < 8) {
        throw new IllegalArgumentException("The minimum target Java version ${version} specified " +
                "for '${project.name}' cannot be smaller than 8")
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(rootProject.ext.buildJdkVersion)
            implementation = JvmImplementation.VENDOR_SPECIFIC
        }
    }

    afterEvaluate {
        // Add the generated source directories to the source sets.
        // This should run in 'afterEvaluate' so that protobuf plugin which also adds
        // generated files to source set applied first.
        project.sourceSets.all { sourceSet ->
            def javaSrcDir = file("${project.ext.genSrcDir}/${sourceSet.name}/java")
            def resourceSrcDir = file("${project.ext.genSrcDir}/${sourceSet.name}/resources")
            if (!sourceSet.java.srcDirs.contains(javaSrcDir)) {
                sourceSet.java.srcDir javaSrcDir
            }
            if (!sourceSet.resources.srcDirs.contains(resourceSrcDir)) {
                sourceSet.resources.srcDir resourceSrcDir
            }
        }
        Task generateSourcesTask = project.tasks.findByName('generateSources')
        if (generateSourcesTask != null) {
            tasks.sourcesJar.dependsOn(generateSourcesTask)
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()

        // Adds an optional configuration that can be used to define optional dependencies. While it's more
        // idiomatic to define features for each set of optional dependencies (e.g., "prometheus",
        // "dropwizard"), it's convenient to have a single one to fallback to.
        registerFeature('optional') {
            usingSourceSet(sourceSets.main)
        }
    }

    // Set the sensible compiler options.
    tasks.withType(JavaCompile) {
        def targetJavaVersionStr = JavaVersion.toVersion(targetJavaVersion).toString()
        sourceCompatibility = project.findProperty('javaSourceCompatibility') ?: targetJavaVersionStr
        targetCompatibility = project.findProperty('javaTargetCompatibility') ?: targetJavaVersionStr
        if (buildJdkVersion >= 9) {
            // Supported since java 9 https://openjdk.org/jeps/247
            options.release.set(targetJavaVersion)
        }
        options.encoding = 'UTF-8'
        options.warnings = false
        options.compilerArgs += '-parameters'
    }

    // Enable full exception logging for test failures.
    tasks.withType(Test).configureEach {
        testLogging.exceptionFormat = 'full'

        // Use JUnit platform.
        def flakyTests = rootProject.findProperty('flakyTests')
        if (flakyTests == 'true') {
            useJUnitPlatform {
                includeTags 'FLAKY_TESTS'
            }
        } else if (flakyTests == 'false') {
            useJUnitPlatform {
                excludeTags 'FLAKY_TESTS'
            }
        } else {
            if (flakyTests != null) {
                throw new IllegalArgumentException("flakyTests: $flakyTests (expected: true, false or null)")
            }
            useJUnitPlatform()
        }

        // Use a different JRE for testing if necessary.
        if (rootProject.ext.buildJdkVersion != rootProject.ext.testJavaVersion) {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(rootProject.ext.testJavaVersion)
            }
        }

        // disable tests for projects which target a higher java version
        if (rootProject.ext.testJavaVersion < targetJavaVersion) {
            project.logger.lifecycle("Skipping tests for ${project.name} since the " +
                    "testJavaVersion(${testJavaVersion}) is smaller than the " +
                    "targetJavaVersion(${targetJavaVersion})")
            it.enabled = false
        }
    }

    // Enforce checkstyle rules.
    if (checkstyleEnabled) {
        apply plugin: 'checkstyle'

        checkstyle {
            configFile = new File("${checkstyleConfigDir}/checkstyle.xml")
            configProperties = ['checkstyleConfigDir': "$checkstyleConfigDir"]
            if (managedVersions.containsKey('com.puppycrawl.tools:checkstyle')) {
                toolVersion = managedVersions['com.puppycrawl.tools:checkstyle']
            }
        }

        task checkstyle(group: 'Verification', description: 'Runs the checkstyle rules.') {}
        project.sourceSets.all { SourceSet sourceSet ->
            def dependencyTask = project.tasks.findByName("checkstyle${sourceSet.name.capitalize()}")
            if (dependencyTask instanceof Checkstyle) {
                tasks.checkstyle.dependsOn dependencyTask
            }
        }

        def lintTask = project.ext.getLintTask()
        lintTask.dependsOn tasks.checkstyle
        tasks.check.dependsOn lintTask
    }
}
