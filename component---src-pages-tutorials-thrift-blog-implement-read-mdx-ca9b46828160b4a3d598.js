"use strict";(self.webpackChunkarmeria_site=self.webpackChunkarmeria_site||[]).push([[5877],{48364:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return r},default:function(){return u},pageTitle:function(){return s}});var n=a(63366),l=(a(67294),a(64983)),o=a(89791),i=["components"],s="Implementing READ operation",r={},p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)}},m=p("TutorialSteps"),g=p("Tabs"),c=p("TabPane"),d={pageTitle:s,_frontmatter:r},h=o.Z;function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,l.kt)(h,Object.assign({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"implementing-read-operation",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h1",href:"#implementing-read-operation","aria-label":"implementing read operation permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Implementing READ operation"),(0,l.kt)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#what-you-need"},"What you need")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1-implement-server-side"},"1. Implement server-side")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2-implement-client-side"},"2. Implement client-side")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#3-test-retrieving-a-single-post"},"3. Test retrieving a single post")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#4-test-an-error-case"},"4. Test an error case")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5-test-retrieving-multiple-posts"},"5. Test retrieving multiple posts")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#whats-next"},"What's next"))),(0,l.kt)("p",null,"In the earlier step, we created blog posts.\nIn this step, we'll implement a read operation and make a call to read blog posts.\nWe'll write two service methods, one for reading a single post and another for multiple posts."),(0,l.kt)(m,{current:4,mdxType:"TutorialSteps"}),(0,l.kt)("h2",{id:"what-you-need",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#what-you-need","aria-label":"what you need permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What you need"),(0,l.kt)("p",null,"You need to have the following files obtained from previous steps.\nYou can always ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/line/armeria-examples/tree/main/tutorials/thrift"},"download")," the full version, instead of creating one yourself."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/tutorials/thrift/blog/define-service#3-compile-the-thrift-file"},"Generated Java code")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BlogServiceImpl.java")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Main.java")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BlogClient.java")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BlogServiceTest.java"))),(0,l.kt)("h2",{id:"1-implement-server-side",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#1-implement-server-side","aria-label":"1 implement server side permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"1. Implement server-side"),(0,l.kt)("p",null,"Let's write two methods for retrieving blog posts; one for a single post and another for multiple posts."),(0,l.kt)(g,{mdxType:"Tabs"},(0,l.kt)(c,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"BlogServiceImpl")," class, implement the ",(0,l.kt)("inlineCode",{parentName:"p"},"getBlogPost()")," method to retrieve a single post.\nLet's throw an exception in case there is no blog post for the given ID."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceImpl.java",filename:"BlogServiceImpl.java"},'import example.armeria.blog.thrift.BlogNotFoundException;\n...\n@Override\npublic void getBlogPost(GetBlogPostRequest request, AsyncMethodCallback<BlogPost> resultHandler)\n        throws TException {\n  final BlogPost blogPost = blogPosts.get(request.getId());\n  if (blogPost == null) {\n    // throwing an exception will also have the same effect\n    // throw new BlogNotFoundException("The blog post does not exist. ID: " + request.getId());\n    resultHandler.onError(\n            new BlogNotFoundException("The blog post does not exist. ID: " + request.getId()));\n  } else {\n    resultHandler.onComplete(blogPost);\n  }\n}\n'))),(0,l.kt)(c,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Implement the ",(0,l.kt)("inlineCode",{parentName:"li"},"listBlogPosts()")," method in the ",(0,l.kt)("inlineCode",{parentName:"li"},"BlogServiceImpl")," class to retrieve multiple posts.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceImpl.java",filename:"BlogServiceImpl.java"},"import java.util.List;\nimport java.util.stream.Collectors;\n...\n@Override\npublic void listBlogPosts(ListBlogPostsRequest request,\n                          AsyncMethodCallback<ListBlogPostsResponse> resultHandler) throws TException {\n  final List<BlogPost> blogPosts = this.blogPosts.values().stream().collect(Collectors.toList());\n  resultHandler.onComplete(new ListBlogPostsResponse().setBlogs(blogPosts));\n}\n"))),(0,l.kt)("li",{parentName:"ol"},"Add an if-else statement by adding line 9-16, to sort the blog posts based on the value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"descending")," parameter.",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceImpl.java showlineno=true",filename:"BlogServiceImpl.java",showlineno:"true"},"import java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Map.Entry;\n...\n@Override\npublic void listBlogPosts(ListBlogPostsRequest request,\n                          AsyncMethodCallback<ListBlogPostsResponse> resultHandler) throws TException {\n  final List<BlogPost> blogPosts;\n  if (request.isDescending()) {\n    blogPosts = this.blogPosts.entrySet()\n                              .stream()\n                              .sorted(Collections.reverseOrder(Comparator.comparingInt(Entry::getKey)))\n                              .map(Entry::getValue).collect(Collectors.toList());\n  } else {\n    blogPosts = this.blogPosts.values().stream().collect(Collectors.toList());\n  }\n  resultHandler.onComplete(new ListBlogPostsResponse().setBlogs(blogPosts));\n}\n")))))),(0,l.kt)("h2",{id:"2-implement-client-side",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#2-implement-client-side","aria-label":"2 implement client side permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"2. Implement client-side"),(0,l.kt)("p",null,"This time, we'll implement the client-side for reading blog posts.\nLet's implement client methods for each corresponding server method."),(0,l.kt)(g,{mdxType:"Tabs"},(0,l.kt)(c,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"BlogClient")," class, add a method to retrieve a single post."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogClient.java",filename:"BlogClient.java"},"import example.armeria.blog.thrift.GetBlogPostRequest;\n...\nBlogPost getBlogPost(int id) throws TException {\n  final GetBlogPostRequest request =\n              new GetBlogPostRequest().setId(id);\n  return blogService.getBlogPost(request);\n}\n"))),(0,l.kt)(c,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"BlogClient")," class, add a method to retrieve a list of posts."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogClient.java",filename:"BlogClient.java"},"import example.armeria.blog.thrift.ListBlogPostsRequest;\nimport example.armeria.blog.thrift.ListBlogPostsResponse;\n...\nList<BlogPost> listBlogPosts(boolean descending) throws TException {\n  return blogService.listBlogPosts(new ListBlogPostsRequest().setDescending(descending))\n                    .getBlogs();\n}\n")))),(0,l.kt)("h2",{id:"3-test-retrieving-a-single-post",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#3-test-retrieving-a-single-post","aria-label":"3 test retrieving a single post permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"3. Test retrieving a single post"),(0,l.kt)("p",null,"Let's test if we can retrieve a blog post we created."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"BlogServiceTest")," class, add a test method to retrieve the first blog post with ID ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\nvoid getBlogPost() throws TException {\n  final BlogClient client = new BlogClient(server.httpUri(), "/thrift");\n  final BlogPost blogPost = client.getBlogPost(0);\n\n  assertThat(blogPost.getTitle()).isEqualTo("My first blog");\n  assertThat(blogPost.getContent()).isEqualTo("Hello Armeria!");\n}\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Add annotations to configure the order our test methods will be executed.\nThe annotations guarantee that the first blog post will be created in the ",(0,l.kt)("inlineCode",{parentName:"p"},"createBlogPost()")," method before we try to retrieve it in the ",(0,l.kt)("inlineCode",{parentName:"p"},"getBlogPost()")," method."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},"import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(OrderAnnotation.class) // Add this\nclass BlogServiceTest {\n  ...\n\n  @Test\n  @Order(1) // Add this\n  void createBlogPost() throws TException {\n    ...\n  }\n\n  @Test\n  @Order(2) // Add this\n  void getBlogPost() throws TException {\n    ...\n  }\n}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run all the test cases on your IDE or using Gradle."),(0,l.kt)("p",{parentName:"li"},"Your client retrieved a blog post from the server successfully if the test is passed."))),(0,l.kt)("h2",{id:"4-test-an-error-case",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#4-test-an-error-case","aria-label":"4 test an error case permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"4. Test an error case"),(0,l.kt)("p",null,"Let's try retrieving a blog post that does not exist.\nAdd a test method to retrieve a blog post with an invalid ID, asserting an exception is thrown."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'import static org.assertj.core.api.Assertions.catchThrowable;\nimport example.armeria.blog.thrift.BlogNotFoundException;\n...\n@Test\n@Order(3)\nvoid getInvalidBlogPost() {\n  final BlogClient client = new BlogClient(server.httpUri(), "/thrift");\n  final Throwable exception = catchThrowable(() -> {\n    client.getBlogPost(Integer.MAX_VALUE);\n  });\n  assertThat(exception)\n    .isInstanceOf(BlogNotFoundException.class)\n    .extracting("reason")\n    .asString()\n    .isEqualTo("The blog post does not exist. ID: " + Integer.MAX_VALUE);\n}\n')),(0,l.kt)("p",null,"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed."),(0,l.kt)("h2",{id:"5-test-retrieving-multiple-posts",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#5-test-retrieving-multiple-posts","aria-label":"5 test retrieving multiple posts permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"5. Test retrieving multiple posts"),(0,l.kt)("p",null,"Finally, let's test if we can retrieve multiple posts.\nAdd a test method like the following to create the second blog post and test retrieving the list of blog posts."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'import java.util.List;\n...\n@Test\n@Order(4)\nvoid listBlogPosts() throws TException {\n  final BlogClient client = new BlogClient(server.httpUri(), "/thrift");\n  client.createBlogPost("My second blog", "Armeria is awesome!");\n\n  final List<BlogPost> blogs = client.listBlogPosts(false);\n  assertThat(blogs).hasSize(2);\n  final BlogPost firstBlog = blogs.get(0);\n  assertThat(firstBlog.getTitle()).isEqualTo("My first blog");\n  assertThat(firstBlog.getContent()).isEqualTo("Hello Armeria!");\n\n  final BlogPost secondBlog = blogs.get(1);\n  assertThat(secondBlog.getTitle()).isEqualTo("My second blog");\n  assertThat(secondBlog.getContent()).isEqualTo("Armeria is awesome!");\n}\n')),(0,l.kt)("p",null,"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed."),(0,l.kt)("h2",{id:"whats-next",style:{position:"relative"}},(0,l.kt)("a",{parentName:"h2",href:"#whats-next","aria-label":"whats next permalink",className:"anchor before"},(0,l.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What's next"),(0,l.kt)("p",null,"In this step, we've implemented service methods and client methods to retrieve blog posts."),(0,l.kt)("p",null,"Next, at ",(0,l.kt)("a",{parentName:"p",href:"/tutorials/thrift/blog/implement-update"},"Step 5. Implement UPDATE"),", we'll implement an UPDATE operation to update a blog post."),(0,l.kt)(m,{current:4,mdxType:"TutorialSteps"}))}u.isMDXComponent=!0},89791:function(e,t,a){a.d(t,{Z:function(){return s}});var n=a(25444),l=a(67294),o=JSON.parse('{"root":["index"],"Useful links":{"User manual":"/docs","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"REST service":["rest/blog","rest/blog/create-server","rest/blog/prepare-data-object","rest/blog/add-services-to-server","rest/blog/implement-create","rest/blog/implement-read","rest/blog/implement-update","rest/blog/implement-delete"],"gRPC service":["grpc/blog","grpc/blog/define-service","grpc/blog/run-service","grpc/blog/implement-create","grpc/blog/implement-read","grpc/blog/implement-update","grpc/blog/implement-delete"],"Thrift service":["thrift/blog","thrift/blog/define-service","thrift/blog/run-service","thrift/blog/implement-create","thrift/blog/implement-read","thrift/blog/implement-update","thrift/blog/implement-delete"]}'),i=a(46731),s=function(e){var t=(0,n.useStaticQuery)("3172452987").allMdx.nodes;return l.createElement(i.Z,Object.assign({},e,{candidateMdxNodes:t,index:o,prefix:"tutorials",menuTitle:!0,pageTitleSuffix:"Armeria tutorial"}))}}}]);
//# sourceMappingURL=component---src-pages-tutorials-thrift-blog-implement-read-mdx-ca9b46828160b4a3d598.js.map