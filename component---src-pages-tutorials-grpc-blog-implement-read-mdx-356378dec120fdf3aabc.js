"use strict";(self.webpackChunkarmeria_site=self.webpackChunkarmeria_site||[]).push([[4210],{77266:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return u},pageTitle:function(){return i}});var n=a(63366),s=(a(67294),a(64983)),r=a(89791),o=["components"],i="Implementing READ operation",l={},p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)}},g=p("TutorialSteps"),c=p("Tabs"),m=p("TabPane"),d={pageTitle:i,_frontmatter:l},h=r.Z;function u(e){var t=e.components,a=(0,n.Z)(e,o);return(0,s.kt)(h,Object.assign({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"implementing-read-operation",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h1",href:"#implementing-read-operation","aria-label":"implementing read operation permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Implementing READ operation"),(0,s.kt)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#what-you-need"},"What you need")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#1-implement-server-side"},"1. Implement server-side")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#2-test-retrieving-a-single-post"},"2. Test retrieving a single post")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#4-test-an-error-case"},"4. Test an error case")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#5-test-retrieving-multiple-posts"},"5. Test retrieving multiple posts")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#whats-next"},"What's next"))),(0,s.kt)("p",null,"In the earlier step, we created blog posts.\nIn this step, we'll implement a read operation and make a call to read blog posts.\nWe'll write two service methods, one for reading a single post and another for multiple posts."),(0,s.kt)(g,{current:4,mdxType:"TutorialSteps"}),(0,s.kt)("h2",{id:"what-you-need",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h2",href:"#what-you-need","aria-label":"what you need permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What you need"),(0,s.kt)("p",null,"You need to have the following files obtained from previous steps.\nYou can always ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/line/armeria-examples/tree/main/tutorials/grpc"},"download")," the full version, instead of creating one yourself."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/tutorials/grpc/blog/define-service#6-compile-the-proto-file"},"Generated Java code")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"BlogService.java")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Main.java")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"BlogServiceTest.java"))),(0,s.kt)("h2",{id:"1-implement-server-side",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h2",href:"#1-implement-server-side","aria-label":"1 implement server side permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"1. Implement server-side"),(0,s.kt)("p",null,"Let's write two methods for retrieving blog posts; one for a single post and\nanother for multiple posts."),(0,s.kt)(c,{mdxType:"Tabs"},(0,s.kt)(m,{tab:"Single post",key:"1",mdxType:"TabPane"},(0,s.kt)("p",null,"Add a service method in ",(0,s.kt)("inlineCode",{parentName:"p"},"BlogService.java")," to retrieve a single post."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java",filename:"BlogService.java"},'import example.armeria.blog.grpc.GetBlogPostRequest;\n\npublic final class BlogService extends BlogServiceGrpc.BlogServiceImplBase {\n\n  @Override\n  public void getBlogPost(GetBlogPostRequest request, StreamObserver<BlogPost> responseObserver) {\n    final BlogPost blogPost = blogPosts.get(request.getId());\n    if (blogPost == null) {\n      responseObserver.onError(\n        Status.NOT_FOUND.withDescription("The blog post does not exist. ID: " + request.getId())\n                        .asRuntimeException());\n    } else {\n        responseObserver.onNext(blogPost);\n        responseObserver.onCompleted();\n    }\n  }\n}\n'))),(0,s.kt)(m,{tab:"Multiple posts",key:"2",mdxType:"TabPane"},(0,s.kt)("p",null,"Add a service method in ",(0,s.kt)("inlineCode",{parentName:"p"},"BlogService.java")," to retrieve multiple posts."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogService.java",filename:"BlogService.java"},"import java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Map.Entry;\n\nimport example.armeria.blog.grpc.ListBlogPostsRequest;\nimport example.armeria.blog.grpc.ListBlogPostsResponse;\n\nfinal class BlogService extends BlogServiceGrpc.BlogServiceImplBase {\n  @Override\n  public void listBlogPosts(ListBlogPostsRequest request,\n                            StreamObserver<ListBlogPostsResponse> responseObserver) {\n      final Collection<BlogPost> blogPosts;\n      if (request.getDescending()) {\n          blogPosts = this.blogPosts.entrySet()\n                      .stream()\n                      .sorted(Collections.reverseOrder(Comparator.comparingInt(Entry::getKey)))\n                      .map(Entry::getValue).collect(Collectors.toList());\n      } else {\n          blogPosts = this.blogPosts.values();\n      }\n      responseObserver.onNext(ListBlogPostsResponse.newBuilder().addAllBlogs(blogPosts).build());\n      responseObserver.onCompleted();\n  }\n}\n")))),(0,s.kt)("h2",{id:"2-test-retrieving-a-single-post",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h2",href:"#2-test-retrieving-a-single-post","aria-label":"2 test retrieving a single post permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"2. Test retrieving a single post"),(0,s.kt)("p",null,"Let's test if we can retrieve a blog post we created."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In the ",(0,s.kt)("inlineCode",{parentName:"p"},"BlogServiceTest")," class, add a test method to retrieve the first blog post with ID ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\nvoid getBlogPost() throws JsonProcessingException {\n  final BlogPost blogPost = client.getBlogPost(GetBlogPostRequest.newBuilder().setId(0).build());\n\n  assertThat(blogPost.getTitle()).isEqualTo("My first blog");\n  assertThat(blogPost.getContent()).isEqualTo("Hello Armeria!");\n}\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Add annotations to configure the order our test methods will be executed.\nThe annotations guarantee that the first blog post will be created in the ",(0,s.kt)("inlineCode",{parentName:"p"},"createBlogPost()")," method before we try to retrieve it in the ",(0,s.kt)("inlineCode",{parentName:"p"},"getBlogPost()")," method."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},"import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(OrderAnnotation.class) // Add this\nclass BlogServiceTest {\n  ...\n\n  @Test\n  @Order(1) // Add this\n  void createBlogPost() throws JsonProcessingException {\n    ...\n  }\n\n  @Test\n  @Order(2) // Add this\n  void getBlogPost() throws JsonProcessingException {\n    ...\n  }\n}\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Run all the test cases on your IDE or using Gradle."),(0,s.kt)("p",{parentName:"li"},"Your client retrieved a blog post from the server successfully if the test is passed."))),(0,s.kt)("h2",{id:"4-test-an-error-case",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h2",href:"#4-test-an-error-case","aria-label":"4 test an error case permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"4. Test an error case"),(0,s.kt)("p",null,"Let's try retrieving a blog post that does not exist.\nAdd a test method to retrieve a blog post with an invalid ID, asserting an exception is thrown."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\n@Order(3)\nvoid getInvalidBlogPost() throws JsonProcessingException {\n  final Throwable exception = catchThrowable(() -> {\n      client.getBlogPost(GetBlogPostRequest.newBuilder().setId(Integer.MAX_VALUE).build());\n  });\n  final StatusRuntimeException statusException = (StatusRuntimeException) exception;\n    assertThat(statusException.getStatus().getCode()).isEqualTo(Code.NOT_FOUND);\n    assertThat(statusException)\n          .hasMessageContaining("The blog post does not exist. ID: " + Integer.MAX_VALUE);\n}\n')),(0,s.kt)("p",null,"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed."),(0,s.kt)("h2",{id:"5-test-retrieving-multiple-posts",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h2",href:"#5-test-retrieving-multiple-posts","aria-label":"5 test retrieving multiple posts permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"5. Test retrieving multiple posts"),(0,s.kt)("p",null,"Finally, let's test if we can retrieve multiple posts.\nAdd a test method like the following to create the second blog post and test retrieving the list of blog posts."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"filename=BlogServiceTest.java",filename:"BlogServiceTest.java"},'@Test\n@Order(4)\nvoid listBlogPosts() throws JsonProcessingException {\n  final CreateBlogPostRequest newBlogPost = CreateBlogPostRequest.newBuilder()\n                .setTitle("My second blog")\n                .setContent("Armeria is awesome!")\n                .build();\n  client.createBlogPost(newBlogPost);\n  final ListBlogPostsResponse\n          response = client.listBlogPosts(ListBlogPostsRequest.newBuilder()\n                .setDescending(false)\n                .build());\n\n  final List<BlogPost> blogs = response.getBlogsList();\n  assertThat(blogs).hasSize(2);\n  final BlogPost firstBlog = blogs.get(0);\n  assertThat(firstBlog.getTitle()).isEqualTo("My first blog");\n  assertThat(firstBlog.getContent()).isEqualTo("Hello Armeria!");\n\n  final BlogPost secondBlog = blogs.get(1);\n  assertThat(secondBlog.getTitle()).isEqualTo("My second blog");\n  assertThat(secondBlog.getContent()).isEqualTo("Armeria is awesome!");\n}\n')),(0,s.kt)("p",null,"Run all the test cases on your IDE or using Gradle.\nCheck that you see the test is passed."),(0,s.kt)("h2",{id:"whats-next",style:{position:"relative"}},(0,s.kt)("a",{parentName:"h2",href:"#whats-next","aria-label":"whats next permalink",className:"anchor before"},(0,s.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"What's next"),(0,s.kt)("p",null,"In this step, we've implemented service methods to retrieve blog posts."),(0,s.kt)("p",null,"Next, at ",(0,s.kt)("a",{parentName:"p",href:"/tutorials/grpc/blog/implement-update"},"Step 5. Implement UPDATE"),", we'll implement an UPDATE operation to update a blog post."),(0,s.kt)(g,{current:4,mdxType:"TutorialSteps"}))}u.isMDXComponent=!0},89791:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(25444),s=a(67294),r=JSON.parse('{"root":["index"],"Useful links":{"User manual":"/docs","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"REST service":["rest/blog","rest/blog/create-server","rest/blog/prepare-data-object","rest/blog/add-services-to-server","rest/blog/implement-create","rest/blog/implement-read","rest/blog/implement-update","rest/blog/implement-delete"],"gRPC service":["grpc/blog","grpc/blog/define-service","grpc/blog/run-service","grpc/blog/implement-create","grpc/blog/implement-read","grpc/blog/implement-update","grpc/blog/implement-delete"],"Thrift service":["thrift/blog","thrift/blog/define-service","thrift/blog/run-service","thrift/blog/implement-create","thrift/blog/implement-read","thrift/blog/implement-update","thrift/blog/implement-delete"]}'),o=a(46731),i=function(e){var t=(0,n.useStaticQuery)("3172452987").allMdx.nodes;return s.createElement(o.Z,Object.assign({},e,{candidateMdxNodes:t,index:r,prefix:"tutorials",menuTitle:!0,pageTitleSuffix:"Armeria tutorial"}))}}}]);
//# sourceMappingURL=component---src-pages-tutorials-grpc-blog-implement-read-mdx-356378dec120fdf3aabc.js.map