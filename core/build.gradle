dependencies {
    // Caffeine
    compile 'com.github.ben-manes.caffeine:caffeine'

    // Jackson
    [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {
        compile "com.fasterxml.jackson.core:$it"
    }

    // Micrometer
    compile 'io.micrometer:micrometer-core'
    compile 'io.micrometer:micrometer-registry-prometheus'

    // Netty
    [ 'netty-transport', 'netty-codec-http2', 'netty-resolver-dns' ].each {
        compile "io.netty:$it"
    }
    compile "io.netty:netty-transport-native-unix-common:${managedVersions['io.netty:netty-transport-native-unix-common']}:linux-x86_64"
    compile "io.netty:netty-transport-native-epoll:${managedVersions['io.netty:netty-transport-native-epoll']}:linux-x86_64"
    compile 'io.netty:netty-tcnative-boringssl-static'
    runtime 'org.javassist:javassist'

    // Prometheus
    compile 'io.prometheus:simpleclient_common'

    // Reactive Streams
    compile 'org.reactivestreams:reactive-streams'
    testCompile 'org.reactivestreams:reactive-streams-tck'
}

// Run the test cases based on reactive-streams-tck
task testNg(type: Test,
            group: 'Verification',
            description: 'Runs the TestNG unit tests.') {
    useTestNG()
    testClassesDirs = tasks.test.testClassesDirs
    classpath = tasks.test.classpath
    scanForTestClasses = false
}
tasks.test.finalizedBy tasks.testNg
tasks.check.dependsOn tasks.testNg

if (project.hasFlags('coverage')) {
    jacocoTestReport {
        // Include the coverage data from the TestNG test cases.
        executionData file("${project.buildDir}/jacoco/testNg.exec")
    }
}

tasks.trimShadedJar.configure {
    keep "class !com.linecorp.armeria.internal.shaded.**,com.linecorp.armeria.** { *; }"
    keep "class com.linecorp.armeria.internal.shaded.caffeine.** { *; }" // To make the unsafe field access work.
}
