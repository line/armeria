import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // These should be the only dependencies that need hard-coded versions.
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'
        classpath 'org.yaml:snakeyaml:1.25'
    }
}

apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin

rootProject.ext {
    def dependenciesYamlFile = new File("${project.projectDir}/dependencies.yml")
    if (dependenciesYamlFile.exists()) {
        dependenciesYaml = Collections.unmodifiableMap(new Yaml().loadAs(dependenciesYamlFile.text, Map))
    } else {
        dependenciesYaml = Collections.emptyMap()
    }
}

def managedDependencyVersions = [:]
def managedDependencyExclusions = [:].withDefault { [] }
rootProject.ext.dependenciesYaml.forEach { String key, value ->
    if (key == 'boms') {
        value.each {
            def parsed = it.split(':')
            managedDependencyVersions["${parsed[0]}:${parsed[1]}"] = parsed[2]
        }
    } else {
        def groupId = key
        def artifact = value as Map
        artifact.forEach { String artifactId, Map props ->
            if (props.containsKey('version')) {
                managedDependencyVersions["${groupId}:${artifactId}"] = "${props['version']}"
            }
            if (props.containsKey('exclusions')) {
                props['exclusions'].each { String spec ->
                    def parsed = spec.split(':')
                    managedDependencyExclusions["${groupId}:${artifactId}"].add([
                            group: parsed[0],
                            module: parsed[1],
                    ])
                }
            }
        }
    }
}

allprojects {
    ext {
        managedVersions = managedDependencyVersions
    }
}

def dependencyManagementProjects = projectsWithFlags('dependencyManagement')
assert !dependencyManagementProjects.isEmpty() // Guaranteed by settings-flags.gradle
def dependencyManagementProject = dependencyManagementProjects[0]

configure(dependencyManagementProject) {
    apply plugin: 'java-platform'

    javaPlatform {
        allowDependencies()
    }

    dependencies {
        if (rootProject.ext.dependenciesYaml.containsKey('boms')) {
            dependenciesYaml['boms'].each {
                api platform("${it}")
            }
        }

        constraints {
            rootProject.ext.dependenciesYaml.forEach { String key, value ->
                if (key != 'boms') {
                    def groupId = key
                    def artifact = value as Map
                    artifact.forEach { String artifactId, Map props ->
                        if (props.containsKey('version')) {
                            api "${groupId}:${artifactId}:${props['version']}"
                        }
                    }
                }
            }
        }
    }
}

configure(projectsWithFlags('java')) {
    evaluationDependsOn(dependencyManagementProject.path)

    configurations.configureEach { configuration ->
        configuration.dependencies.whenObjectAdded { dep ->
            if (dep instanceof org.gradle.api.artifacts.ModuleDependency) {
                managedDependencyExclusions["${dep.group}:${dep.name}"].each {
                    exclude it
                }
            }
        }
    }

    // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and
    // canBeConsumed are set otherwise.
    afterEvaluate {
        dependencies {
            configurations.configureEach { configuration ->
                // Add to resolvable configurations
                if (configuration.canBeResolved && !configuration.canBeConsumed) {
                    add(configuration.name, platform(dependencyManagementProject))
                }
            }
        }
    }
}

// Create a new configuration called 'allDependencies'.
rootProject.configurations {
    allDependencies {
        visible = false
        transitive = false
    }
}

// Add all dependencies declared in 'dependencies.yml' to 'allDependencies' because otherwise
// 'dependencyUpdates' task will not check all dependencies.
rootProject.dependencies {
    rootProject.ext.dependenciesYaml.forEach { String key, value ->
        if (key != 'boms') {
            def groupId = key
            def artifact = value as Map
            artifact.forEach { String artifactId, Map props ->
                if (props.containsKey('version')) {
                    allDependencies("${groupId}:${artifactId}")
                }
            }
        }
    }
}

rootProject.ext {
    // Build the relocation table from dependencies.yml.
    relocations = dependenciesYaml.entrySet().inject([]) { list, Map.Entry<String, Object> entry ->
        if (entry.key != 'boms') {
            def groupId = entry.key
            entry.value.forEach { String artifactId, Map props ->
                if (props.containsKey('relocations')) {
                    props.get('relocations').each {
                        list.add([
                                name: "${groupId}:${artifactId}",
                                from: it['from'],
                                to: it['to']])
                    }
                }
            }
        }
        return list
    }

    // Build the Javadoc link table from dependencies.yml.
    javadocLinks = dependenciesYaml.entrySet().inject([]) { list, Map.Entry<String, Object> entry ->
        if (entry.key != 'boms') {
            def groupId = entry.key
            entry.value.forEach { String artifactId, Map props ->
                if (props.containsKey('javadocs')) {
                    def version = String.valueOf(managedDependencyVersions["${groupId}:${artifactId}"])
                    props['javadocs'].each { url ->
                        list.add([
                                groupId: groupId,
                                artifactId: artifactId,
                                version: version,
                                url: url
                        ])
                    }
                }
            }
        }
        return list
    }
}

subprojects {
    ext {
        dependenciesYaml = rootProject.ext.dependenciesYaml
        relocations = rootProject.ext.relocations
        javadocLinks = rootProject.ext.javadocLinks
    }
}

configure(rootProject) {
    task managedVersions(
            group: 'Build',
            description: 'Generates the file that contains dependency versions.') {
        inputs.properties managedDependencyVersions
        doLast {
            def f = file("${project.buildDir}/managed_versions.yml")
            f.parentFile.mkdir()
            f.withWriter('UTF-8') {
                new Yaml().dump(managedDependencyVersions, it)
            }
        }
    }
}

// Ignore release candidates when checking dependency updates.
rootProject.tasks.dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
