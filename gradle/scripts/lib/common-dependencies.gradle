import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        // These should be the only dependencies that need hard-coded versions.
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
        classpath 'org.yaml:snakeyaml:1.29'
    }
}

def managedDependencyOverrides = [] as Set

allprojects { p ->
    ext {
        // Add managedVersions() for backward compatibility with dependencies.yml
        managedVersions = getManagedVersions(p.rootProject)
        findLibrary = this.&findLibrary.curry(p.rootProject)
        findPlugin = this.&findPlugin.curry(p.rootProject)
    }
}

def dependencyManagementProjects = projectsWithFlags('dependencyManagement')
assert !dependencyManagementProjects.isEmpty() // Guaranteed by settings-flags.gradle
def dependencyManagementProject = dependencyManagementProjects[0]

configure(dependencyManagementProject) {
    apply plugin: 'java-platform'
    apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin

    repositories {
        google()
        // Since we manage plugin versions here too.
        gradlePluginPortal()
        mavenCentral()
    }

    javaPlatform {
        allowDependencies()
    }

    dependencies {
        rootProject.ext.dependenciesTomlBoms.each { alias ->
            def library = rootProject.ext.findLibrary(alias)
            if (library != null) {
                api platform(library)
            }
        }
    }

    tasks {
        dependencyUpdates {
            revision = 'release'

            resolutionStrategy {
                componentSelection { rules ->
                    rules.all { ComponentSelection selection ->
                        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                        }
                        if (rejected) {
                            selection.reject('Release candidate')
                        }
                    }
                }
            }

            checkConstraints = true

            // We have downgraded versions for legacy artifacts which versions plugin has no way of handling.
            // But we can provide a reminder to manually check for updates.
            doLast {
                logger.quiet "Don't forget to check the following for updates to legacy version downgrades"
                managedDependencyOverrides.each { override ->
                    def (group, artifact, version) = override.split(':')
                    def parts = version.split('\\.')
                    if (parts.length >= 2) {
                        logger.quiet "${artifact} is currently version ${version}"
                        logger.quiet "https://search.maven.org/search?q=g:${group}%20a:${artifact}%20v:${parts[0]}.${parts[1]}.*\n"
                    }
                }
            }
        }
    }
}

configure(projectsWithFlags('java')) {

    configurations.configureEach { configuration ->
        configuration.dependencies.whenObjectAdded { dep ->
            if (dep instanceof org.gradle.api.artifacts.ModuleDependency) {
                rootProject.ext.exclusions["${dep.group}:${dep.name}"].each { list ->
                    list.each { exclude it }
                }
            }
        }
    }

    // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and
    // canBeConsumed are set otherwise.
    afterEvaluate {
        // From Boot 2.3.0, productionRuntimeClasspath is newly added and its canBeConsumed is set to true
        // so change it to false. Otherwise, Gradle can't resolve the dependency in bootJar task
        // because the version will not be added in the following `Add to resolvable configurations`.
        // https://github.com/spring-projects/spring-boot/blob/v2.3.0.RELEASE/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/JavaPluginAction.java#L175-L178
        def springBootGradlePlugin = plugins.findPlugin('org.springframework.boot')
        def bootJarTask = tasks.findByName('bootJar')
        def productionRuntimeClasspathConfig = configurations.findByName('productionRuntimeClasspath')
        if (springBootGradlePlugin != null && bootJarTask != null && productionRuntimeClasspathConfig != null) {
            productionRuntimeClasspathConfig.canBeConsumed(false)
        }

        dependencies {
            configurations.configureEach { configuration ->
                // Add to resolvable configurations
                if (configuration.canBeResolved && !configuration.canBeConsumed) {
                    add(configuration.name, platform(dependencyManagementProject))
                }

                // Find version overrides in dependency declaration configurations
                if (!configuration.canBeResolved && !configuration.canBeConsumed) {
                    configuration.dependencies.configureEach { dep ->
                        if (dep instanceof org.gradle.api.artifacts.ExternalDependency) {
                            if (dep.version != null) {
                                managedDependencyOverrides.add(String.valueOf("${dep.module}:${dep.version}"))
                            }
                        }
                    }
                }
            }
        }
    }
}

// Create a new configuration called 'allDependencies'.
rootProject.configurations {
    allDependencies {
        visible = false
        transitive = false
    }
}

configure(rootProject) {
    task managedVersions(
            group: 'Build',
            description: 'Generates the file that contains dependency versions.') {

        inputs.property("catalog", project.extensions.getByType(VersionCatalogsExtension))
        def f = file("${project.buildDir}/managed_versions.yml")
        outputs.file(f)

        doLast {
            f.parentFile.mkdir()
            managedVersions = [:]
            inputs.properties["catalog"].catalogNames.forEach { name ->
                def catalog = catalogs.named(name)
                versions = [:] withDefault { [] }
                catalog.libraryAliases.forEach { alias ->
                    def library = catalog.findLibrary(alias).get().get()
                    versions["libraries"].add([alias: alias, module: library.toString])
                }

                catalog.pluginAliases.forEach { alias ->
                    def plugin = catalog.findPlugin(alias).get().get()
                    versions["plugins"].add([alias: alias, plugin: plugin.toString])
                }

                catalog.versionAliases.forEach { alias ->
                    def version = catalog.findVersion(alias).get()
                    versions["versions"].add([alias: alias, version: version])
                }

                catalog.bundleAliases.forEach { alias ->
                    def bundle = catalog.findBundle(alias).get().get()
                    versions["bundles"].add([alias: alias, bundle: bundle.toString])
                }
                managedVersions[name] = versions
            }

            f.withWriter('UTF-8') {
                new Yaml().dump(managedVersions, it)
            }
        }
    }
}

static def findLibrary(Project rootProject, String alias) {
    def catalogs = rootProject.extensions.getByType(VersionCatalogsExtension)
    def catalog = catalogs.named("libs")

    def library = catalog.findLibrary(alias)
    if (library.isEmpty()) {
        return null
    } else {
        return library.get()
    }
}

static def findPlugin(Project rootProject, String alias) {
    def catalogs = rootProject.extensions.getByType(VersionCatalogsExtension)
    def catalog = catalogs.named("libs")

    def plugin = catalog.findPlugin(alias)
    if (plugin.isEmpty()) {
        return null
    } else {
        return plugin.get()
    }
}

/**
 * Returns the managed versions that associates a module with a version.
 * This method is added to support backward compatibility with 'dependencies.yml'
 * Note that it is not recommended to use `managedVersions` with the module defined multiple times with different
 * aliases. Because if a module is declared with different versions, the version returned by `managedVersions`
 * is determined by how the version catalogs are indexed.
 */
static def getManagedVersions(Project rootProject) {
    def managedVersions = [:]
    def catalogs = rootProject.extensions.getByType(VersionCatalogsExtension)
    catalogs.catalogNames.forEach { name ->
        def catalog = catalogs.named(name)
        catalog.libraryAliases.forEach {
            def library = catalog.findLibrary(it).get().get()
            def module = library.module
            managedVersions["${module.group}:${module.name}"] = library.versionConstraint.requiredVersion
        }
    }
    return managedVersions
}
