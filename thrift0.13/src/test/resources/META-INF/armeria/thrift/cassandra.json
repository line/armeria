{
  "name": "cassandra",
  "namespaces": {
    "java": "com.linecorp.armeria.service.test.thrift.cassandra"
  },
  "includes": [
  ],
  "enums": [
    {
      "name": "ConsistencyLevel",
      "doc": "The ConsistencyLevel is an enum that controls both read and write\nbehavior based on the ReplicationFactor of the keyspace.  The\ndifferent consistency levels have different meanings, depending on\nif you're doing a write or read operation.\n\nIf W + R > ReplicationFactor, where W is the number of nodes to\nblock for on write, and R the number to block for on reads, you\nwill have strongly consistent behavior; that is, readers will\nalways see the most recent write. Of these, the most interesting is\nto do QUORUM reads and writes, which gives you consistency while\nstill allowing availability in the face of node failures up to half\nof <ReplicationFactor>. Of course if latency is more important than\nconsistency then you can use lower values for either or both.\n\nSome ConsistencyLevels (ONE, TWO, THREE) refer to a specific number\nof replicas rather than a logical concept that adjusts\nautomatically with the replication factor.  Of these, only ONE is\ncommonly used; TWO and (even more rarely) THREE are only useful\nwhen you care more about guaranteeing a certain level of\ndurability, than consistency.\n\nWrite consistency levels make the following guarantees before reporting success to the client:\n  ANY          Ensure that the write has been written once somewhere, including possibly being hinted in a non-target node.\n  ONE          Ensure that the write has been written to at least 1 node's commit log and memory table\n  TWO          Ensure that the write has been written to at least 2 node's commit log and memory table\n  THREE        Ensure that the write has been written to at least 3 node's commit log and memory table\n  QUORUM       Ensure that the write has been written to <ReplicationFactor> \/ 2 + 1 nodes\n  LOCAL_QUORUM Ensure that the write has been written to <ReplicationFactor> \/ 2 + 1 nodes, within the local datacenter (requires NetworkTopologyStrategy)\n  EACH_QUORUM  Ensure that the write has been written to <ReplicationFactor> \/ 2 + 1 nodes in each datacenter (requires NetworkTopologyStrategy)\n  ALL          Ensure that the write is written to <code>&lt;ReplicationFactor&gt;<\/code> nodes before responding to the client.\n\nRead consistency levels make the following guarantees before returning successful results to the client:\n  ANY          Not supported. You probably want ONE instead.\n  ONE          Returns the record obtained from a single replica.\n  TWO          Returns the record with the most recent timestamp once two replicas have replied.\n  THREE        Returns the record with the most recent timestamp once three replicas have replied.\n  QUORUM       Returns the record with the most recent timestamp once a majority of replicas have replied.\n  LOCAL_QUORUM Returns the record with the most recent timestamp once a majority of replicas within the local datacenter have replied.\n  EACH_QUORUM  Returns the record with the most recent timestamp once a majority of replicas within each datacenter have replied.\n  ALL          Returns the record with the most recent timestamp once all replicas have replied (implies no replica may be down)..\n",
      "members": [
        {
          "name": "ONE",
          "value": 1
        },
        {
          "name": "QUORUM",
          "value": 2
        },
        {
          "name": "LOCAL_QUORUM",
          "value": 3
        },
        {
          "name": "EACH_QUORUM",
          "value": 4
        },
        {
          "name": "ALL",
          "value": 5
        },
        {
          "name": "ANY",
          "value": 6
        },
        {
          "name": "TWO",
          "value": 7
        },
        {
          "name": "THREE",
          "value": 8
        }
      ]
    },
    {
      "name": "IndexOperator",
      "members": [
        {
          "name": "EQ",
          "value": 0
        },
        {
          "name": "GTE",
          "value": 1
        },
        {
          "name": "GT",
          "value": 2
        },
        {
          "name": "LTE",
          "value": 3
        },
        {
          "name": "LT",
          "value": 4
        }
      ]
    },
    {
      "name": "IndexType",
      "members": [
        {
          "name": "KEYS",
          "value": 0
        },
        {
          "name": "CUSTOM",
          "value": 1
        }
      ]
    },
    {
      "name": "Compression",
      "doc": "CQL query compression\n",
      "members": [
        {
          "name": "GZIP",
          "value": 1
        },
        {
          "name": "NONE",
          "value": 2
        }
      ]
    },
    {
      "name": "CqlResultType",
      "members": [
        {
          "name": "ROWS",
          "value": 1
        },
        {
          "name": "VOID",
          "value": 2
        },
        {
          "name": "INT",
          "value": 3
        }
      ]
    }
  ],
  "typedefs": [
  ],
  "structs": [
    {
      "name": "Column",
      "doc": "Basic unit of data within a ColumnFamily.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name",
          "typeId": "binary",
          "doc": "the name by which this column is set and retrieved.  Maximum 64KB long.\n\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "value",
          "typeId": "binary",
          "doc": "The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).\n\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "timestamp",
          "typeId": "i64",
          "doc": "The timestamp is used for conflict detection\/resolution when two columns with same name need to be compared.\n\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "ttl",
          "typeId": "i32",
          "doc": "An optional, positive delay (in seconds) after which the column will be automatically deleted.\n\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "SuperColumn",
      "doc": "A named list of columns.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name",
          "typeId": "binary",
          "doc": "see Column.name.\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "columns",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "Column"
            }
          },
          "doc": "A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.\nColumns within a super column do not have to have matching structures (similarly named child columns).\n",
          "required": "required"
        }
      ]
    },
    {
      "name": "CounterColumn",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "value",
          "typeId": "i64",
          "required": "required"
        }
      ]
    },
    {
      "name": "CounterSuperColumn",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "columns",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "CounterColumn"
            }
          },
          "required": "required"
        }
      ]
    },
    {
      "name": "ColumnOrSuperColumn",
      "doc": "Methods for fetching rows\/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list\nof ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting\ninstances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting\nin Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on\nsingle query methods that may return either a SuperColumn or Column.\n\nIf the query was on a counter column family, you will either get a counter_column (instead of a column) or a\ncounter_super_column (instead of a super_column)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "column",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Column"
          },
          "doc": "The Column returned by get() or get_slice().\n\n",
          "required": "optional"
        },
        {
          "key": 2,
          "name": "super_column",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "SuperColumn"
          },
          "doc": "The SuperColumn returned by get() or get_slice().\n\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "counter_column",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "CounterColumn"
          },
          "doc": "The Counterolumn returned by get() or get_slice().\n\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "counter_super_column",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "CounterSuperColumn"
          },
          "doc": "The CounterSuperColumn returned by get() or get_slice().\n\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "NotFoundException",
      "doc": "A specific column was requested that does not exist.\n",
      "isException": true,
      "isUnion": false,
      "fields": [
      ]
    },
    {
      "name": "InvalidRequestException",
      "doc": "Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.\nwhy contains an associated error message.\n",
      "isException": true,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "why",
          "typeId": "string",
          "required": "required"
        }
      ]
    },
    {
      "name": "UnavailableException",
      "doc": "Not all the replicas required could be created and\/or read.\n",
      "isException": true,
      "isUnion": false,
      "fields": [
      ]
    },
    {
      "name": "TimedOutException",
      "doc": "RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.\n",
      "isException": true,
      "isUnion": false,
      "fields": [
      ]
    },
    {
      "name": "AuthenticationException",
      "doc": "invalid authentication request (invalid keyspace, user does not exist, or credentials invalid)\n",
      "isException": true,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "why",
          "typeId": "string",
          "required": "required"
        }
      ]
    },
    {
      "name": "AuthorizationException",
      "doc": "invalid authorization request (user does not have access to keyspace)\n",
      "isException": true,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "why",
          "typeId": "string",
          "required": "required"
        }
      ]
    },
    {
      "name": "SchemaDisagreementException",
      "doc": "schemas are not in agreement across all nodes\n",
      "isException": true,
      "isUnion": false,
      "fields": [
      ]
    },
    {
      "name": "ColumnParent",
      "doc": "ColumnParent is used when selecting groups of columns from the same ColumnFamily. In directory structure terms, imagine\nColumnParent as ColumnPath + '\/..\/'.\n\nSee also <a href=\"cassandra.html#Struct_ColumnPath\">ColumnPath<\/a>\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 3,
          "name": "column_family",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 4,
          "name": "super_column",
          "typeId": "binary",
          "required": "optional"
        }
      ]
    },
    {
      "name": "ColumnPath",
      "doc": "The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and\nColumnParent in terms of a directory structure.\n\nColumnPath is used to looking up a single column.\n\n@param column_family. The name of the CF of the column being looked up.\n@param super_column. The super column name.\n@param column. The column name.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 3,
          "name": "column_family",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 4,
          "name": "super_column",
          "typeId": "binary",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "column",
          "typeId": "binary",
          "required": "optional"
        }
      ]
    },
    {
      "name": "SliceRange",
      "doc": "A slice range is a structure that stores basic range, ordering and limit information for a query that will return\nmultiple columns. It could be thought of as Cassandra's version of LIMIT and ORDER BY\n\n@param start. The column name to start the slice with. This attribute is not required, though there is no default value,\n              and can be safely set to '', i.e., an empty byte array, to start with the first column name. Otherwise, it\n              must a valid value under the rules of the Comparator defined for the given ColumnFamily.\n@param finish. The column name to stop the slice at. This attribute is not required, though there is no default value,\n               and can be safely set to an empty byte array to not stop until 'count' results are seen. Otherwise, it\n               must also be a valid value to the ColumnFamily Comparator.\n@param reversed. Whether the results should be ordered in reversed order. Similar to ORDER BY blah DESC in SQL.\n@param count. How many columns to return. Similar to LIMIT in SQL. May be arbitrarily large, but Thrift will\n              materialize the whole result into memory before returning it to the client, so be aware that you may\n              be better served by iterating through slices by passing the last value of one call in as the 'start'\n              of the next instead of increasing 'count' arbitrarily large.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "start",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "finish",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 3,
          "name": "reversed",
          "typeId": "bool",
          "required": "required",
          "default": 0
        },
        {
          "key": 4,
          "name": "count",
          "typeId": "i32",
          "required": "required",
          "default": 100
        }
      ]
    },
    {
      "name": "SlicePredicate",
      "doc": "A SlicePredicate is similar to a mathematic predicate (see http:\/\/en.wikipedia.org\/wiki\/Predicate_(mathematical_logic)),\nwhich is described as \"a property that the elements of a set have in common.\"\n\nSlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is\nspecified, slice_range is ignored.\n\n@param column_name. A list of column names to retrieve. This can be used similar to Memcached's \"multi-get\" feature\n                    to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',\n                    and 'Jim' you can pass those column names as a list to fetch all three at once.\n@param slice_range. A SliceRange describing how to range, order, and\/or limit the slice.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "column_names",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "binary"
          },
          "required": "optional"
        },
        {
          "key": 2,
          "name": "slice_range",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "SliceRange"
          },
          "required": "optional"
        }
      ]
    },
    {
      "name": "IndexExpression",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "column_name",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "op",
          "typeId": "i32",
          "required": "required"
        },
        {
          "key": 3,
          "name": "value",
          "typeId": "binary",
          "required": "required"
        }
      ]
    },
    {
      "name": "IndexClause",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "expressions",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "IndexExpression"
            }
          },
          "required": "required"
        },
        {
          "key": 2,
          "name": "start_key",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 3,
          "name": "count",
          "typeId": "i32",
          "required": "required",
          "default": 100
        }
      ]
    },
    {
      "name": "KeyRange",
      "doc": "The semantics of start keys and tokens are slightly different.\nKeys are start-inclusive; tokens are start-exclusive.  Token\nranges may also wrap -- that is, the end token may be less\nthan the start one.  Thus, a range from keyX to keyX is a\none-element range, but a range from tokenY to tokenY is the\nfull ring.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "start_key",
          "typeId": "binary",
          "required": "optional"
        },
        {
          "key": 2,
          "name": "end_key",
          "typeId": "binary",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "start_token",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "end_token",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "count",
          "typeId": "i32",
          "required": "required",
          "default": 100
        }
      ]
    },
    {
      "name": "KeySlice",
      "doc": "A KeySlice is key followed by the data it maps to. A collection of KeySlice is returned by the get_range_slice operation.\n\n@param key. a row key\n@param columns. List of data represented by the key. Typically, the list is pared down to only the columns specified by\n                a SlicePredicate.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "key",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "columns",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "ColumnOrSuperColumn"
            }
          },
          "required": "required"
        }
      ]
    },
    {
      "name": "KeyCount",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "key",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "count",
          "typeId": "i32",
          "required": "required"
        }
      ]
    },
    {
      "name": "Deletion",
      "doc": "Note that the timestamp is only optional in case of counter deletion.\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "timestamp",
          "typeId": "i64",
          "required": "optional"
        },
        {
          "key": 2,
          "name": "super_column",
          "typeId": "binary",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "predicate",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "SlicePredicate"
          },
          "required": "optional"
        }
      ]
    },
    {
      "name": "Mutation",
      "doc": "A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).\n@param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)\n@param deletion. A deletion of a column or supercolumn\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "column_or_supercolumn",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "ColumnOrSuperColumn"
          },
          "required": "optional"
        },
        {
          "key": 2,
          "name": "deletion",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Deletion"
          },
          "required": "optional"
        }
      ]
    },
    {
      "name": "EndpointDetails",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "host",
          "typeId": "string",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "datacenter",
          "typeId": "string",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "rack",
          "typeId": "string",
          "required": "optional"
        }
      ]
    },
    {
      "name": "TokenRange",
      "doc": "A TokenRange describes part of the Cassandra ring, it is a mapping from a range to\nendpoints responsible for that range.\n@param start_token The first token in the range\n@param end_token The last token in the range\n@param endpoints The endpoints responsible for the range (listed by their configured listen_address)\n@param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "start_token",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 2,
          "name": "end_token",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 3,
          "name": "endpoints",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "required": "required"
        },
        {
          "key": 4,
          "name": "rpc_endpoints",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "required": "optional"
        },
        {
          "key": 5,
          "name": "endpoint_details",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "EndpointDetails"
            }
          },
          "required": "optional"
        }
      ]
    },
    {
      "name": "AuthenticationRequest",
      "doc": "Authentication requests can contain any data, dependent on the IAuthenticator used\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "credentials",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "required": "required"
        }
      ]
    },
    {
      "name": "ColumnDef",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "validation_class",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 3,
          "name": "index_type",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "index_name",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "index_options",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "required": "optional"
        }
      ]
    },
    {
      "name": "CfDef",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "keyspace",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 2,
          "name": "name",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 3,
          "name": "column_type",
          "typeId": "string",
          "required": "optional",
          "default": "Standard"
        },
        {
          "key": 5,
          "name": "comparator_type",
          "typeId": "string",
          "required": "optional",
          "default": "BytesType"
        },
        {
          "key": 6,
          "name": "subcomparator_type",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "comment",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 12,
          "name": "read_repair_chance",
          "typeId": "double",
          "required": "optional",
          "default": 1
        },
        {
          "key": 13,
          "name": "column_metadata",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "ColumnDef"
            }
          },
          "required": "optional"
        },
        {
          "key": 14,
          "name": "gc_grace_seconds",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 15,
          "name": "default_validation_class",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 16,
          "name": "id",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 17,
          "name": "min_compaction_threshold",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 18,
          "name": "max_compaction_threshold",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 24,
          "name": "replicate_on_write",
          "typeId": "bool",
          "required": "optional"
        },
        {
          "key": 25,
          "name": "merge_shards_chance",
          "typeId": "double",
          "required": "optional"
        },
        {
          "key": 26,
          "name": "key_validation_class",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 28,
          "name": "key_alias",
          "typeId": "binary",
          "required": "optional"
        },
        {
          "key": 29,
          "name": "compaction_strategy",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 30,
          "name": "compaction_strategy_options",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "required": "optional"
        },
        {
          "key": 32,
          "name": "compression_options",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "required": "optional"
        },
        {
          "key": 33,
          "name": "bloom_filter_fp_chance",
          "typeId": "double",
          "required": "optional"
        }
      ]
    },
    {
      "name": "KsDef",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 2,
          "name": "strategy_class",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 3,
          "name": "strategy_options",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "required": "optional"
        },
        {
          "key": 4,
          "name": "replication_factor",
          "typeId": "i32",
          "doc": "@deprecated\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "cf_defs",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "CfDef"
            }
          },
          "required": "required"
        },
        {
          "key": 6,
          "name": "durable_writes",
          "typeId": "bool",
          "required": "optional",
          "default": 1
        }
      ]
    },
    {
      "name": "CqlRow",
      "doc": "Row returned from a CQL query\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "key",
          "typeId": "binary",
          "required": "required"
        },
        {
          "key": 2,
          "name": "columns",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "Column"
            }
          },
          "required": "required"
        }
      ]
    },
    {
      "name": "CqlMetadata",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "name_types",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "binary",
            "valueTypeId": "string"
          },
          "required": "required"
        },
        {
          "key": 2,
          "name": "value_types",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "binary",
            "valueTypeId": "string"
          },
          "required": "required"
        },
        {
          "key": 3,
          "name": "default_name_type",
          "typeId": "string",
          "required": "required"
        },
        {
          "key": 4,
          "name": "default_value_type",
          "typeId": "string",
          "required": "required"
        }
      ]
    },
    {
      "name": "CqlResult",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "type",
          "typeId": "i32",
          "required": "required"
        },
        {
          "key": 2,
          "name": "rows",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "CqlRow"
            }
          },
          "required": "optional"
        },
        {
          "key": 3,
          "name": "num",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "schema",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "CqlMetadata"
          },
          "required": "optional"
        }
      ]
    },
    {
      "name": "CqlPreparedResult",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "itemId",
          "typeId": "i32",
          "required": "required"
        },
        {
          "key": 2,
          "name": "count",
          "typeId": "i32",
          "required": "required"
        }
      ]
    }
  ],
  "constants": [
    {
      "name": "VERSION",
      "typeId": "string",
      "value": "19.24.0-ARMERIA"
    }
  ],
  "services": [
    {
      "name": "Cassandra",
      "functions": [
        {
          "name": "login",
          "returnTypeId": "void",
          "oneway": false,
          "arguments": [
            {
              "key": 1,
              "name": "auth_request",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "AuthenticationRequest"
              },
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "authnx",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "AuthenticationException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "authzx",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "AuthorizationException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "set_keyspace",
          "returnTypeId": "void",
          "oneway": false,
          "arguments": [
            {
              "key": 1,
              "name": "keyspace",
              "typeId": "string",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "get",
          "returnTypeId": "struct",
          "returnType": {
            "typeId": "struct",
            "class": "ColumnOrSuperColumn"
          },
          "oneway": false,
          "doc": "Get the Column or SuperColumn at the given column_path. If no value is present, NotFoundException is thrown. (This is\nthe only method that can throw an exception under non-failure conditions.)\n\n@param key. key of column.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_path",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnPath"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "nfe",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "NotFoundException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 4,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "get_slice",
          "returnTypeId": "list",
          "returnType": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "ColumnOrSuperColumn"
            }
          },
          "oneway": false,
          "doc": "Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily\/SuperColumn name\npair) specified by the given SlicePredicate. If no matching values are found, an empty list is returned.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "predicate",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "SlicePredicate"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "get_count",
          "returnTypeId": "i32",
          "oneway": false,
          "doc": "returns the number of columns matching <code>predicate<\/code> for a particular <code>key<\/code>,\n<code>ColumnFamily<\/code> and optionally <code>SuperColumn<\/code>.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "predicate",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "SlicePredicate"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "multiget_slice",
          "returnTypeId": "map",
          "returnType": {
            "typeId": "map",
            "keyTypeId": "binary",
            "valueTypeId": "list",
            "valueType": {
              "typeId": "list",
              "elemTypeId": "struct",
              "elemType": {
                "typeId": "struct",
                "class": "ColumnOrSuperColumn"
              }
            }
          },
          "oneway": false,
          "doc": "Performs a get_slice for column_parent and predicate for the given keys in parallel.\n",
          "arguments": [
            {
              "key": 1,
              "name": "keys",
              "typeId": "list",
              "type": {
                "typeId": "list",
                "elemTypeId": "binary"
              },
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "predicate",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "SlicePredicate"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "multiget_count",
          "returnTypeId": "map",
          "returnType": {
            "typeId": "map",
            "keyTypeId": "binary",
            "valueTypeId": "i32"
          },
          "oneway": false,
          "doc": "Perform a get_count in parallel on the given list<binary> keys. The return value maps keys to the count found.\n",
          "arguments": [
            {
              "key": 1,
              "name": "keys",
              "typeId": "list",
              "type": {
                "typeId": "list",
                "elemTypeId": "binary"
              },
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "predicate",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "SlicePredicate"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "get_range_slices",
          "returnTypeId": "list",
          "returnType": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "KeySlice"
            }
          },
          "oneway": false,
          "doc": "returns a subset of columns for a contiguous range of keys.\n",
          "arguments": [
            {
              "key": 1,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 2,
              "name": "predicate",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "SlicePredicate"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "range",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "KeyRange"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "get_indexed_slices",
          "returnTypeId": "list",
          "returnType": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "KeySlice"
            }
          },
          "oneway": false,
          "doc": "Returns the subset of columns specified in SlicePredicate for the rows matching the IndexClause\n",
          "arguments": [
            {
              "key": 1,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 2,
              "name": "index_clause",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "IndexClause"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "column_predicate",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "SlicePredicate"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "insert",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "Insert a Column at the given column_parent.column_family and optional column_parent.super_column.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "column",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "Column"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "add",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "Increment or decrement a counter.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_parent",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnParent"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "column",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "CounterColumn"
              },
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "remove",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note\nthat all the values in column_path besides column_path.column_family are truly optional: you can remove the entire\nrow by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "column_path",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnPath"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "timestamp",
              "typeId": "i64",
              "required": "required"
            },
            {
              "key": 4,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "req_out",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "remove_counter",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "Remove a counter at the specified location.\nNote that counters have limited support for deletes: if you remove a counter, you must wait to issue any following update\nuntil the delete has reached all the nodes and all of them have been fully compacted.\n",
          "arguments": [
            {
              "key": 1,
              "name": "key",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "path",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "ColumnPath"
              },
              "required": "required"
            },
            {
              "key": 3,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "batch_mutate",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "  Mutate many columns or super columns for many row keys. See also: Mutation.\n\n  mutation_map maps key to column family to a list of Mutation objects to take place at that scope.\n*\n",
          "arguments": [
            {
              "key": 1,
              "name": "mutation_map",
              "typeId": "map",
              "type": {
                "typeId": "map",
                "keyTypeId": "binary",
                "valueTypeId": "map",
                "valueType": {
                  "typeId": "map",
                  "keyTypeId": "string",
                  "valueTypeId": "list",
                  "valueType": {
                    "typeId": "list",
                    "elemTypeId": "struct",
                    "elemType": {
                      "typeId": "struct",
                      "class": "Mutation"
                    }
                  }
                }
              },
              "required": "required"
            },
            {
              "key": 2,
              "name": "consistency_level",
              "typeId": "i32",
              "required": "required",
              "default": 1
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "truncate",
          "returnTypeId": "void",
          "oneway": false,
          "doc": "Truncate will mark and entire column family as deleted.\nFrom the user's perspective a successful call to truncate will result complete data deletion from cfname.\nInternally, however, disk space will not be immediatily released, as with all deletes in cassandra, this one\nonly marks the data as deleted.\nThe operation succeeds only if all hosts in the cluster at available and will throw an UnavailableException if\nsome hosts are down.\n",
          "arguments": [
            {
              "key": 1,
              "name": "cfname",
              "typeId": "string",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "describe_schema_versions",
          "returnTypeId": "map",
          "returnType": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "list",
            "valueType": {
              "typeId": "list",
              "elemTypeId": "string"
            }
          },
          "oneway": false,
          "doc": "for each schema version present in the cluster, returns a list of nodes at that version.\nhosts that do not respond will be under the key DatabaseDescriptor.INITIAL_VERSION.\nthe cluster is all on the same version if the size of the map is 1.\n",
          "arguments": [
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "describe_keyspaces",
          "returnTypeId": "list",
          "returnType": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "KsDef"
            }
          },
          "oneway": false,
          "doc": "list the defined keyspaces in this cluster\n",
          "arguments": [
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "describe_cluster_name",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "get the cluster name\n",
          "arguments": [
          ],
          "exceptions": [
          ]
        },
        {
          "name": "describe_version",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "get the thrift api version\n",
          "arguments": [
          ],
          "exceptions": [
          ]
        },
        {
          "name": "describe_ring",
          "returnTypeId": "list",
          "returnType": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "TokenRange"
            }
          },
          "oneway": false,
          "doc": "get the token ring: a map of ranges to host addresses,\nrepresented as a set of TokenRange instead of a map from range\nto list of endpoints, because you can't use Thrift structs as\nmap keys:\nhttps:\/\/issues.apache.org\/jira\/browse\/THRIFT-162\n\nfor the same reason, we can't return a set here, even though\norder is neither important nor predictable.\n",
          "arguments": [
            {
              "key": 1,
              "name": "keyspace",
              "typeId": "string",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "describe_partitioner",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "returns the partitioner used by this cluster\n",
          "arguments": [
          ],
          "exceptions": [
          ]
        },
        {
          "name": "describe_snitch",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "returns the snitch used by this cluster\n",
          "arguments": [
          ],
          "exceptions": [
          ]
        },
        {
          "name": "describe_keyspace",
          "returnTypeId": "struct",
          "returnType": {
            "typeId": "struct",
            "class": "KsDef"
          },
          "oneway": false,
          "doc": "describe specified keyspace\n",
          "arguments": [
            {
              "key": 1,
              "name": "keyspace",
              "typeId": "string",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "nfe",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "NotFoundException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "describe_splits",
          "returnTypeId": "list",
          "returnType": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "oneway": false,
          "doc": "experimental API for hadoop\/parallel query support.\nmay change violently and without warning.\n\nreturns list of token strings such that first subrange is (list[0], list[1]],\nnext is (list[1], list[2]], etc.\n",
          "arguments": [
            {
              "key": 1,
              "name": "cfName",
              "typeId": "string",
              "required": "required"
            },
            {
              "key": 2,
              "name": "start_token",
              "typeId": "string",
              "required": "required"
            },
            {
              "key": 3,
              "name": "end_token",
              "typeId": "string",
              "required": "required"
            },
            {
              "key": 4,
              "name": "keys_per_split",
              "typeId": "i32",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "system_add_column_family",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "adds a column family. returns the new schema id.\n",
          "arguments": [
            {
              "key": 1,
              "name": "cf_def",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "CfDef"
              },
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "system_drop_column_family",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "drops a column family. returns the new schema id.\n",
          "arguments": [
            {
              "key": 1,
              "name": "column_family",
              "typeId": "string",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "system_add_keyspace",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "adds a keyspace and any column families that are part of it. returns the new schema id.\n",
          "arguments": [
            {
              "key": 1,
              "name": "ks_def",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "KsDef"
              },
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "system_drop_keyspace",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "drops a keyspace and any column families that are part of it. returns the new schema id.\n",
          "arguments": [
            {
              "key": 1,
              "name": "keyspace",
              "typeId": "string",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "system_update_keyspace",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "updates properties of a keyspace. returns the new schema id.\n",
          "arguments": [
            {
              "key": 1,
              "name": "ks_def",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "KsDef"
              },
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "system_update_column_family",
          "returnTypeId": "string",
          "oneway": false,
          "doc": "updates properties of a column family. returns the new schema id.\n",
          "arguments": [
            {
              "key": 1,
              "name": "cf_def",
              "typeId": "struct",
              "type": {
                "typeId": "struct",
                "class": "CfDef"
              },
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "execute_cql_query",
          "returnTypeId": "struct",
          "returnType": {
            "typeId": "struct",
            "class": "CqlResult"
          },
          "oneway": false,
          "doc": "Executes a CQL (Cassandra Query Language) statement and returns a\nCqlResult containing the results.\n",
          "arguments": [
            {
              "key": 1,
              "name": "query",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "compression",
              "typeId": "i32",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            },
            {
              "key": 4,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "prepare_cql_query",
          "returnTypeId": "struct",
          "returnType": {
            "typeId": "struct",
            "class": "CqlPreparedResult"
          },
          "oneway": false,
          "doc": "Prepare a CQL (Cassandra Query Language) statement by compiling and returning\n- the type of CQL statement\n- an id token of the compiled CQL stored on the server side.\n- a count of the discovered bound markers in the statement\n",
          "arguments": [
            {
              "key": 1,
              "name": "query",
              "typeId": "binary",
              "required": "required"
            },
            {
              "key": 2,
              "name": "compression",
              "typeId": "i32",
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            }
          ]
        },
        {
          "name": "execute_prepared_cql_query",
          "returnTypeId": "struct",
          "returnType": {
            "typeId": "struct",
            "class": "CqlResult"
          },
          "oneway": false,
          "doc": "Executes a prepared CQL (Cassandra Query Language) statement by passing an id token and  a list of variables\nto bind and returns a CqlResult containing the results.\n",
          "arguments": [
            {
              "key": 1,
              "name": "itemId",
              "typeId": "i32",
              "required": "required"
            },
            {
              "key": 2,
              "name": "values",
              "typeId": "list",
              "type": {
                "typeId": "list",
                "elemTypeId": "string"
              },
              "required": "required"
            }
          ],
          "exceptions": [
            {
              "key": 1,
              "name": "ire",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "InvalidRequestException"
              },
              "required": "req_out"
            },
            {
              "key": 2,
              "name": "ue",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "UnavailableException"
              },
              "required": "req_out"
            },
            {
              "key": 3,
              "name": "te",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "TimedOutException"
              },
              "required": "req_out"
            },
            {
              "key": 4,
              "name": "sde",
              "typeId": "exception",
              "type": {
                "typeId": "exception",
                "class": "SchemaDisagreementException"
              },
              "required": "req_out"
            }
          ]
        }
      ]
    }
  ]
}
