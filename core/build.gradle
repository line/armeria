import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

ext.internalDependenciesJarTrimmed =
        file("${buildDir}/libs/internal-dependencies-trimmed.jar")
ext.internalDependenciesJarRelocated =
        file("${buildDir}/libs/internal-dependencies-relocated.jar")

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

configurations {
    internalDependency {
        // Disable the transitive dependencies so that they are never pulled in accidentally.
        transitive = false
    }
    compile.extendsFrom(internalDependency)
    trimmedInternalDependency
}

dependencies {
    // Guava
    compile 'com.google.guava:guava'
    testCompile 'com.google.guava:guava-testlib'

    // Jackson
    [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {
        compile "com.fasterxml.jackson.core:$it"
    }

    // Metrics
    compile 'io.dropwizard.metrics:metrics-core'

    // Netty
    [ 'netty-transport', 'netty-codec-http2', 'netty-resolver-dns' ].each {
        compile "io.netty:$it"
    }
    compile "io.netty:netty-transport-native-epoll:${versionOf('netty')}:linux-x86_64"
    compile 'io.netty:netty-tcnative-boringssl-static'
    runtime 'org.javassist:javassist'

    // Reactive Streams
    compile 'org.reactivestreams:reactive-streams'

    // Internal dependencies which will be shaded by the 'internalDeps' task below.
    internalDependency 'com.spotify:completable-futures'
    internalDependency 'it.unimi.dsi:fastutil'
    internalDependency 'org.reflections:reflections'

    // Used by the 'relocateInternalDependencies', because ShadowTask doesn't let me specify a file.
    trimmedInternalDependency files(internalDependenciesJarTrimmed)
}

task trimInternalDependencies(type: ProGuardTask) {
    injars files(configurations.internalDependency.collect()), filter: '!META-INF/**'
    outjars internalDependenciesJarTrimmed
    libraryjars files(configurations.runtime.collect() - configurations.internalDependency.collect())
    libraryjars file("${System.getProperty('java.home')}/lib/rt.jar")

    dontoptimize
    dontobfuscate
    dontwarn // Ignore the harmless 'missing classes' warnings related with the optional dependencies.

    keepattributes 'Signature, InnerClasses, Annotation'

    // CompletableFutures
    keepclasses 'com.spotify.futures.CompletableFutures'

    // FastUtil
    keepinterfaces 'it.unimi.dsi.fastutil.ints.Int2ObjectMap',
                   'it.unimi.dsi.fastutil.ints.Int2ObjectFunction'
    keepclasses 'it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap',
                'it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap'

    // Reflections
    keepclasses 'org.reflections.Configuration',
                'org.reflections.Reflections',
                'org.reflections.scanners.ResourcesScanner',
                'org.reflections.util.ClasspathHelper',
                'org.reflections.util.ConfigurationBuilder',
                'org.reflections.util.FilterBuilder'
}

task relocateInternalDependencies(type: ShadowJar, dependsOn: tasks.trimInternalDependencies) {
    destinationDir = internalDependenciesJarRelocated.parentFile
    archiveName = internalDependenciesJarRelocated.name
    // TODO(trustin): Uncomment this for faster building once shadow 2.0 is out.
    //                https://github.com/johnrengelman/shadow/issues/203
    //entryCompression = ZipEntryCompression.STORED

    configurations = [ project.configurations.trimmedInternalDependency ]

    relocations.each {
        relocate it[0], it[1]
    }
}

task extractRelocatedDependencies(type: Copy, dependsOn: relocateInternalDependencies) {
    from(zipTree(internalDependenciesJarRelocated)) {
        exclude 'META-INF/MANIFEST.MF'
    }
    into sourceSets.main.output.classesDir
}
jar.dependsOn extractRelocatedDependencies

// Exclude the internal dependencies from the coverage report.
test {
    jacoco {
        excludes += [ '**/internal/deps/**' ]
    }
}

class ProGuardTask extends proguard.gradle.ProGuardTask {
    def keepclasses(String... classNames) {
        classNames.each {
            keep "public class $it { *; }"
        }
    }
    def keepinterfaces(String... interfaceNames) {
        interfaceNames.each {
            keep "public interface $it { *; }"
        }
    }
}
