import net.davidecavestro.gradle.jxr.JxrLog
import org.apache.maven.jxr.JXR

import java.util.stream.Collectors

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "kr.motd.gradle:sphinx-gradle-plugin:${managedVersions['kr.motd.gradle:sphinx-gradle-plugin']}"
        classpath "gradle.plugin.net.davidecavestro:gradle-jxr-plugin:${managedVersions['gradle.plugin.net.davidecavestro:gradle-jxr-plugin']}"
    }
}

apply plugin: 'base'
apply plugin: 'kr.motd.sphinx'

sphinx {
    group = 'Documentation'
    description = 'Generates the Sphinx web site.'
    sourceDirectory "${project.projectDir}/src/sphinx"
}

def aggregatedProjects = projectsWithFlags('java', 'publish') - projectsWithFlags('no_aggregation')

task javadoc(type: Javadoc,
             group: 'Documentation',
             description: 'Generates Javadoc API documentation for the main source code.') {

    destinationDir = project.file("${project.buildDir}/site/apidocs")

    aggregatedProjects.each { source it.sourceSets.main.java.srcDirs }
    classpath = aggregatedProjects.inject(project.files()) { ConfigurableFileCollection result, project ->
        result.from(project.sourceSets.main.compileClasspath)
        result.from(project.sourceSets.main.runtimeClasspath)
    }
}

task xref(group: 'Documentation',
          description: 'Generates the source cross-reference.') {

    def outputDir = "${project.buildDir}/site/xref"
    def sourceDirs = aggregatedProjects.inject([]) { srcDirs, project ->
        project.sourceSets.main.java.srcDirs.each { srcDirs << it.path }
        return srcDirs
    }

    inputs.files sourceDirs
    outputs.dir outputDir

    doLast {
        JXR jxr = new JXR()
        jxr.dest = outputDir
        jxr.inputEncoding = 'UTF-8'
        jxr.outputEncoding = 'UTF-8'
        jxr.log = new JxrLog(logger: logger)

        def title = "Armeria ${project.version} cross-reference"
        jxr.xref(sourceDirs.findAll { new File(it).isDirectory() }, 'templates',
                 title, title, rootProject.ext.copyrightFooter)
        ant.copy(file: "${project.projectDir}/src/xref/stylesheet.css", todir: jxr.dest)
    }
}

task test(group: 'Verification',
          description: 'Ensures the public API does not expose the shaded classes.',
          dependsOn: tasks.javadoc) {

    def javadocDir = file("${tasks.javadoc.destinationDir}/com/linecorp/armeria")
    def reportFile = file("${project.buildDir}/test-results/referenced-classes.txt")
    inputs.dir javadocDir
    outputs.file reportFile

    doLast {
        def inheritancePrefixes = [
                'methods.inherited.from.class.',
                'fields.inherited.from.class.',
                'nested.classes.inherited.from.class.'
        ]
        def whitelistedPrefixes = ['java.', 'javax.']
        def blacklistedPrefixes = [ 'com.linecorp.armeria.internal.', 'reactor.core.scheduler.' ] +
                                  rootProject.ext.relocations.collect { it[1] + '.' }
        def errors = []

        reportFile.parentFile.mkdirs()
        reportFile.withPrintWriter('UTF-8') { reportOut ->
            fileTree(javadocDir).sort().each { File f ->
                if (!f.name.endsWith('.html') || f.name == 'package-tree.html') {
                    return
                }

                if (f.path.replace(File.separator, '/').endsWith(
                        'com/linecorp/armeria/common/thrift/ThriftListenableFuture.html')) {
                    // ThriftListenableFuture exposes Guava's ListenableFuture by contract.
                    return
                }

                // Look for all the class names in the Javadoc.
                def matcher = f.text =~ /([a-z]+\.(?:[a-z]+\.)+[A-Z][._A-Za-z0-9$]*[_A-Za-z0-9])/
                def classNames = matcher.findAll().stream().flatMap({ it.stream() }).map({ name ->
                    for (prefix in inheritancePrefixes) {
                        if (name.startsWith(prefix)) {
                            return name.substring(prefix.length())
                        }
                    }
                    return name
                }).filter({ name ->
                    whitelistedPrefixes.find { name.startsWith(it) } == null
                }).collect(Collectors.toSet())

                // .. and make sure none of them are blacklisted.
                classNames.sort().each { className ->
                    def reportLine = "${f.name.replaceFirst(/\.html$/, '')} -> ${className}"
                    reportOut.println reportLine

                    blacklistedPrefixes.each { prefix ->
                        if (className.startsWith(prefix)) {
                            errors += reportLine
                        }
                    }
                }
            }
        }

        if (!errors.empty) {
            throw new Exception("Blacklisted class(es) in the public API:${System.lineSeparator()}- " +
                                errors.join("${System.lineSeparator()}- "))
        }
    }
}

tasks.sphinx.dependsOn tasks.javadoc
tasks.site {
    group = 'Documentation'
    description = 'Generates the project web site.'
    dependsOn xref
    dependsOn javadoc
}

tasks.assemble.dependsOn tasks.site
tasks.check.dependsOn tasks.test
tasks.build {
  dependsOn tasks.assemble
  dependsOn tasks.check
}
