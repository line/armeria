buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.google.gradle', name: 'osdetector-gradle-plugin', version: '1.4.0'
    }
}

apply plugin: 'com.google.osdetector'

dependencies {
    // Guava
    compile "com.google.guava:guava:${property('guava.version')}"
    testCompile "com.google.guava:guava-testlib:${property('guava.version')}"

    // Jackson
    [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {
        compile "com.fasterxml.jackson.core:$it:${property('jackson.version')}"
    }

    // Metrics
    compile "io.dropwizard.metrics:metrics-core:${property('metrics.version')}"

    // Netty
    [ 'netty-transport', 'netty-codec-http2', 'netty-resolver-dns' ].each {
        compile "io.netty:$it:${property('netty.version')}"
    }
    compile "io.netty:netty-transport-native-epoll:${property('netty.version')}:linux-x86_64"
    compile "io.netty:netty-tcnative-boringssl-static:${property('netty-tcnative.version')}"
    runtime "org.javassist:javassist:${property('javassist.version')}"

    // Reactive Streams
    compile "org.reactivestreams:reactive-streams:${property('reactive-streams.version')}"

    // Reflections
    compile("org.reflections:reflections:${property('reflections.version')}") {
        exclude group: 'com.google.code.findbugs', module: 'annotations'
    }

    // Thrift
    compile("org.apache.thrift:libthrift:${property('thrift.version')}") {
        exclude module: 'httpcore'
        exclude module: 'httpclient'
    }

    // gRPC (optional)
    [ 'grpc-core', 'grpc-stub', 'grpc-protobuf' ].each {
        compile("io.grpc:$it:${property('grpc.version')}") {
            ext.optional = true
        }
    }
    testCompile("io.grpc:grpc-interop-testing:${property('grpc.version')}") {
        exclude module: 'netty-codec-http2'
    }

    // Tomcat (optional)
    [ 'tomcat-embed-core', 'tomcat-embed-jasper', 'tomcat-embed-el' ].each {
        compile("org.apache.tomcat.embed:$it:${property('tomcat.version')}") {
            ext.optional = true
        }
    }
    compile("org.slf4j:log4j-over-slf4j:${property('slf4j.version')}") {
        ext.optional = true
    }
    
    // Jetty (optional)
    compile("org.eclipse.jetty:jetty-server:${property('jetty.version')}") {
        ext.optional = true
    }
    [ 'jetty-webapp', 'jetty-annotations', 'apache-jsp', 'apache-jstl' ].each {
        testCompile "org.eclipse.jetty:$it:${property('jetty.version')}"
    }
    testCompile "org.eclipse.jetty.http2:http2-server:${property('jetty.version')}"

    // Zipkin (optional)
    [ 'brave-core', 'brave-http' ].each {
        compile("io.zipkin.brave:$it:${property('brave.version')}") {
            ext.optional = true
        }
    }
}

clean {
    // Delete the source files generated by the Thrift compiler.
    doLast {
        [ 'main', 'test' ].each {
            project.delete("${project.projectDir}/src/$it/gen-java")
        }
    }
}

// Compile the Thrift IDL with the correct binary.
task compileThrift {
    def thriftPath = "$project.projectDir/src/build/thrift.${osdetector.classifier}"

    [ 'main', 'test' ].each { scope ->
        def inputDir = "${project.projectDir}/src/${scope}/thrift"
        def outputDir = "${project.projectDir}/src/${scope}/gen-java"

        inputs.dir inputDir
        outputs.dir outputDir

        project.sourceSets[scope].java.srcDir outputDir

        project.fileTree(inputDir) {
            include "**/*.thrift"
        }.each { sourceFile ->
            doLast {
                project.mkdir(outputDir)
                project.exec {
                    commandLine thriftPath,
                            '-gen', 'java',
                            '-out', outputDir,
                            '-I', "${sourceFile.parentFile.absolutePath}",
                            sourceFile.absolutePath
                }
            }
        }
    }
}

compileJava {
    dependsOn compileThrift
}

processTestResources {
    destinationDir = project.file("${project.buildDir}/classes/test")
}
