{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#client-interoperability","title":"Client interoperability"}]},"excerpt":"Client interoperability This page describes methods to achieve interoperability with some well-known clients. Annotated services Axios Axios  works with Armeria annotated services without issues, except\nwhen serializing arrays as query parameters. By defa…","parent":{"sourceInstanceName":"docs","name":"advanced-client-interoperability"}},{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"excerpt":"RequestContext  custom attributes When you are using multiple decorators, you might want to pass some value to the next decorator.\nYou can do this by attaching attributes to a  type://RequestContext . To attach an attribute,\nyou need to define an  Attribu…","parent":{"sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"excerpt":"Using Armeria with Dropwizard Visit  armeria-examples  to find a fully \nworking example. Dropwizard provides many features which are necessary for building a web application, such as metrics,\nmodel validation, externalized and extensible configuration, et…","parent":{"sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#configuring-global-flags","title":"Configuring global flags"}]},"excerpt":"Configuring global flags What flags in Armeria are Flags are global variables that control the behavior of Armeria.\nThese variables mostly serve one of the following two purposes: Overriding the default system values. Overriding  type://FlagsProvider#defa…","parent":{"sourceInstanceName":"docs","name":"advanced-flags-provider"}},{"tableOfContents":{"items":[{"url":"#kotlin-integration","title":"Kotlin integration"}]},"excerpt":"Kotlin integration Coroutines support for annotated services Visit  annotated-http-service-kotlin  to check out a fully working example. You can implement annotated services with  Kotlin coroutines \nby adding the following dependency: Then, define the sus…","parent":{"sourceInstanceName":"docs","name":"advanced-kotlin"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"excerpt":"Logging contextual information With Armeria's  Logback  integration, you can log the properties of the\n type://RequestContext  of the request being handled.  type://RequestContextExportingAppender  is\na Logback appender that exports the properties of the …","parent":{"sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#collecting-metrics","title":"Collecting metrics"}]},"excerpt":"Collecting metrics Armeria has built-in support for collecting metrics both on the server and client side.\nThis page describes how to enable this. The metric data is collected using the  Micrometer  library.\nPlease consult its documentation for informatio…","parent":{"sourceInstanceName":"docs","name":"advanced-metrics"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"excerpt":"Production checklist Note that the advice on this page is not always applicable for every use case and thus should be\napplied with caution. Do not apply the changes you really do not need. You may want to consider the following options before putting your…","parent":{"sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"excerpt":"SAML Single Sign-On Visit  armeria-examples  to find a fully working example. What is SAML? Security Assertion Markup Language (SAML) \nis an open standard for exchanging authentication and authorization data between an identity provider and\na service prov…","parent":{"sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#scala-integration","title":"Scala integration"}]},"excerpt":"Scala integration As a matter of fact, there are three distinct ways to integrate Armeria and Scala: by using the  armeria-scala  library; by using the  http4s-armeria  library; or just by using Armeria directly in your Scala projects. In that case,\nthe s…","parent":{"sourceInstanceName":"docs","name":"advanced-scala"}},{"tableOfContents":{"items":[{"url":"#scalapb-integration","title":"ScalaPB integration"}]},"excerpt":"ScalaPB integration Visit  here  to find a fully working example. ScalaPB  is a protocol buffer compiler (protoc) plugin for \n Scala . It will generate Scala case classes, parsers and serializers for \nyour  protocol buffers . \nScalaPB also supports a thin…","parent":{"sourceInstanceName":"docs","name":"advanced-scalapb"}},{"tableOfContents":{"items":[{"url":"#spring-boot-integration","title":"Spring Boot integration"}]},"excerpt":"Spring Boot integration The  Spring  framework provides powerful features necessary for building web applications\nsuch as dependency injection, data binding, AOP and transaction management.\nBy integrating your Spring application with Armeria, you can serv…","parent":{"sourceInstanceName":"docs","name":"advanced-spring-boot-integration"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"excerpt":"Using Armeria with Spring WebFlux Visit  armeria-examples  to find a fully working example. Spring framework provides powerful features which are necessary for building a web application, such as\ndependency injection, data binding, AOP, transaction, etc. …","parent":{"sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#sending-a-streaming-response-with-back-pressure","title":"Sending a streaming response with back pressure"}]},"excerpt":"Sending a streaming response with back pressure Suppose we want to serve a static file whose size is larger than your available memory. If we load the file into the memory at once, we will definitely get an  OutOfMemoryError . To prevent such error and se…","parent":{"sourceInstanceName":"docs","name":"advanced-streaming-backpressure"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"excerpt":"Structured logging with Kafka TBW - See  type://KafkaAccessLogWriter .","parent":{"sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"excerpt":"Structured logging Although traditional logging is a useful tool to diagnose the behavior of an application, it has its own\nproblem; the resulting log messages are not always machine-friendly. This section explains the Armeria API for\nretrieving the infor…","parent":{"sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"excerpt":"Unit-testing  Client  and  Service A unit test of a client or a service will require you to prepare two objects: type://ClientRequestContext  or  type://ServiceRequestContext type://HttpRequest  or  type://RpcRequest type://ClientRequestContext  or  type:…","parent":{"sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"excerpt":"Zipkin integration If you want to troubleshoot latency problems in microservice architecture, you will want to use distributed\ntracing system such as  Zipkin . It gathers timing data and shows which component is\nfailing or taking more time than others in …","parent":{"sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"excerpt":"Circuit breaker In microservice architecture, it's common that various services running on different machines are connected to\neach other through remote calls. If one of the services becomes unreachable somehow such as due to network\nissues, the client wh…","parent":{"sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"excerpt":"Sending custom HTTP headers When sending an RPC request, it is sometimes required to send HTTP headers with it, such as an authentication token.\nThere are four ways to customize the HTTP headers of your RPC request: Using the  type://Clients#withHeaders(C…","parent":{"sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"excerpt":"Decorating a client A 'decorating client' (or a 'decorator') is a client that wraps another client to intercept an outgoing\nrequest or an incoming response. As its name says, it is an implementation of  the decorator pattern .\nClient decoration takes a cr…","parent":{"sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#customizing-a-clientfactory-with-clientfactorybuilder","title":"Customizing a ClientFactory with ClientFactoryBuilder"}]},"excerpt":"Customizing a  ClientFactory  with  ClientFactoryBuilder A  type://ClientFactory  manages connections and protocol-specific properties.\nYou can customize the properties via  type://ClientFactoryBuilder . For example,\nlet's say that you want to increase th…","parent":{"sourceInstanceName":"docs","name":"client-factory"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"excerpt":"Calling a gRPC service Visit  armeria-examples  to find a fully working example. Let's assume we have the following  gRPC  service definition, served at  http://127.0.0.1:8080/ , just like\nwhat we used in  Running a gRPC service : Making a call starts fro…","parent":{"sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"excerpt":"Calling an HTTP service You can create a  type://WebClient  with a base URI and send a request with a relative path. You can also create a  type://WebClient  without a base URI and send a request with an absolute URI.\nThe ad-hoc  type://WebClient  would b…","parent":{"sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"excerpt":"Retrofit integration Retrofit  is a library that simplifies the access to RESTful services\nby turning an HTTP API into a Java interface. Armeria provides a builder class called  type://ArmeriaRetrofit  that builds an alternative\n Retrofit  implementation …","parent":{"sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"excerpt":"Client-side load balancing and service discovery You can configure an Armeria client to distribute its requests to more than one server autonomously, unlike\ntraditional server-side load balancing where the requests go through a dedicated load balancer suc…","parent":{"sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"excerpt":"Overriding client timeouts Sometimes, the default timeouts used by the Armeria clients do not suit a particular scenario well.\nIn these cases, you might want to override the timeout settings. Using  type://ClientBuilder Using  type://WebClientRequestPrepa…","parent":{"sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"excerpt":"User manual What is Armeria? Armeria  is your go-to microservice framework for any situation. You can build any type of\nmicroservice leveraging your favorite technologies, including  gRPC ,\n Thrift ,  Kotlin ,\n Retrofit ,  Reactive Streams ,\n Spring Boot …","parent":{"sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"excerpt":"Writing an access log Configuring logging framework To write an access log, you need to configure a logging framework first. The following configurations are\nsimple examples of  logback.xml  and  log4j2.xml  respectively. logback log4j2 Customizing a log …","parent":{"sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"excerpt":"Annotated services Visit  armeria-examples  to find a fully working example. Armeria provides a way to write an HTTP service using annotations. It helps a user make his or her code\nsimple and easy to understand. A user is able to run an HTTP service by fe…","parent":{"sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"excerpt":"Server basics To start a server, you need to build it first. Use  type://ServerBuilder : Ports To serve anything, you need to specify which TCP/IP port you want to bind onto: Services Even if we opened a port, it's of no use if we didn't bind any services…","parent":{"sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"excerpt":"Automatic retry When a client gets an error response, it might want to retry the request depending on the response.\nThis can be accomplished using a  decorator , and Armeria provides the following\nimplementations out-of-the box. type://RetryingClient type…","parent":{"sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"excerpt":"Calling a Thrift service Visit  armeria-examples  to find a fully working example. Let's assume we have the following Thrift IDL, served at  http://127.0.0.1:8080/hello , just like what we\nused in  Running a Thrift service : Making a call starts from crea…","parent":{"sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"excerpt":"Configuring CORS Armeria provides a way to configure Cross-origin resource sharing (CORS) policy for specific origins or\nany origin via  type://CorsServiceBuilder . For more information about CORS,\nvisit  Wikipedia's CORS page . Allowing any origin To con…","parent":{"sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"excerpt":"Decorating a service A 'decorating service' (or a 'decorator') is a service that wraps another service\nto intercept an incoming request or an outgoing response. As its name says, it is an implementation of\n the decorator pattern . Service decoration takes…","parent":{"sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"excerpt":"Browsing and invoking services with  DocService type://DocService  is a single-page web application which provides the following useful features: Browsing the list of gRPC, Thrift or annotated services and their operations available in the server Invoking…","parent":{"sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#running-a-graphql-service","title":"Running a GraphQL service"}]},"excerpt":"Running a GraphQL service Visit  armeria-examples  to find a fully working example. First, You need the  armeria-graphql  dependency: Let's assume we have the following  GraphQL Schema : The schema describes that if a client requests a  User  data using t…","parent":{"sourceInstanceName":"docs","name":"server-graphql"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"excerpt":"Running a gRPC service Visit  armeria-examples  to find a fully working example. Let's assume we have the following  gRPC  service definition: The Protobuf compiler will produce some Java code under the  com.example.grpc.hello  package.\nThe most noteworth…","parent":{"sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"excerpt":"Serving static files Visit  armeria-examples  to find a fully working example. Use  type://FileService  to serve static files under a certain directory.  type://FileService  supports\n GET  and  HEAD  HTTP methods and will auto-fill  Date ,  Last-Modified …","parent":{"sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#handling-a-multipart-request","title":"Handling a multipart request"}]},"excerpt":"Handling a multipart request Armeria provides  type://Multipart  encoder and decoder built on top of \n Reactive Streams . Building a multipart request A  type://Multipart  consists of multiple  typeplural://BodyPart .\nEach  type://BodyPart  is divided int…","parent":{"sourceInstanceName":"docs","name":"server-multipart"}},{"tableOfContents":{"items":[{"url":"#service-registration-for-discovery","title":"Service registration for discovery"}]},"excerpt":"Service registration for discovery You can use  type://ServerListener  to register the information of Armeria servers when they start so that\na client uses the information to distribute its requests to the servers autonomously, unlike\ntraditional server-s…","parent":{"sourceInstanceName":"docs","name":"server-service-registration"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"excerpt":"Embedding a servlet container You can make Armeria serve your JEE web application on the same JVM and TCP/IP port by embedding\n Apache Tomcat  or  Jetty .\nNeither Tomcat nor Jetty will open a server socket or accept an incoming connection.\nAll HTTP reques…","parent":{"sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"excerpt":"Serving Server-Sent Events Visit  armeria-examples  to find a fully working example. A traditional web page has to send a request to the server in order to receive new data.\nWith  Server-Sent Events , however, it is possible for a server to push a new dat…","parent":{"sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"excerpt":"Running a Thrift service Visit  armeria-examples  to find a fully working example. Let's assume we have the following Thrift IDL: The Apache Thrift compiler will produce some Java code under the  com.example.thrift.hello  package.\nThe most noteworthy one …","parent":{"sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"excerpt":"Setting up a project Requirements Java 8 (or later)  is required to build and run an application based on Armeria. Use Java 19 (or later) if you are a contributor who tries to build Armeria itself.\nSee  CONTRIBUTING.md  for more information. Choosing the …","parent":{"sourceInstanceName":"docs","name":"setup"}},{"tableOfContents":{"items":[{"url":"#configuring-server-timeouts","title":"Configuring server timeouts"}]},"excerpt":"Configuring server timeouts There are several ways to override the default timeouts at server-side. Using  type://ServerBuilder Using  type://VirtualHostBuilder You can set the timeouts for each virtual host. Using  type://ServiceBindingBuilder You can se…","parent":{"sourceInstanceName":"docs","name":"server-timeouts"}}]}}}